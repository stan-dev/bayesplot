[{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to bayesplot","title":"Contributing to bayesplot","text":"outlines propose change bayesplot based similar instructions tidyverse packages, including contributing guidelines generated usethis::use_tidy_contributing().","code":""},{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to bayesplot","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to bayesplot","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reproducible example (see e.g. tidyverse reprex instructions). tidyverse guide create great issue advice.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to bayesplot","text":"new creating pull requests tips. Using functions usethis package required can helpful process new . Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"stan-dev/bayesplot\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style already used NEWS.md.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to bayesplot","text":"New code attempt follow style used package. doubt follow tidyverse style guide. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to bayesplot","text":"Please note bayesplot project follows Stan project’s Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Graphical posterior predictive checks using the bayesplot package","text":"vignette focuses graphical posterior predictive checks (PPC). Plots parameter estimates MCMC draws covered separate vignette Plotting MCMC draws, MCMC diagnostics covered Visual MCMC diagnostics vignette.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"graphical-posterior-predictive-checks-ppcs","dir":"Articles","previous_headings":"Introduction","what":"Graphical posterior predictive checks (PPCs)","title":"Graphical posterior predictive checks using the bayesplot package","text":"bayesplot package provides various plotting functions graphical posterior predictive checking, , creating graphical displays comparing observed data simulated data posterior predictive distribution (Gabry et al, 2019). idea behind posterior predictive checking simple: model good fit able use generate data looks lot like data observed. generate data used posterior predictive checks (PPCs) simulate posterior predictive distribution. distribution outcome variable implied model using observed data \\(y\\) (vector \\(N\\) outcome values) update beliefs unknown model parameters \\(\\theta\\). posterior predictive distribution observation \\(\\widetilde{y}\\) can written \\[p(\\widetilde{y} \\,|\\, y) = \\int p(\\widetilde{y} \\,|\\, \\theta) \\, p(\\theta \\,|\\, y) \\, d\\theta.\\] Typically also condition \\(X\\) (matrix predictor variables). draw (simulation) \\(s = 1, \\ldots, S\\) parameters posterior distribution, \\(\\theta^{(s)} \\sim p(\\theta \\,|\\, y)\\), draw entire vector \\(N\\) outcomes \\(\\widetilde{y}^{(s)}\\) posterior predictive distribution simulating data model conditional parameters \\(\\theta^{(s)}\\). result \\(S \\times N\\) matrix draws \\(\\widetilde{y}\\). simulating posterior predictive distribution can use either values predictors \\(X\\) used fitting model new observations predictors. use values \\(X\\) denote resulting simulations \\(y^{rep}\\), can thought replications outcome \\(y\\) rather predictions future observations (\\(\\widetilde{y}\\) using predictors \\(\\widetilde{X}\\)). corresponds notation Gelman et al. (2013) notation used throughout package documentation. Using replicated datasets drawn posterior predictive distribution, functions bayesplot package create various graphical displays comparing observed data \\(y\\) replications. names bayesplot plotting functions posterior predictive checking prefix ppc_.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Graphical posterior predictive checks using the bayesplot package","text":"addition bayesplot ’ll load following packages: ggplot2, case want customize ggplot objects created bayesplot rstanarm, fitting example models used throughout vignette","code":"library(\"bayesplot\") library(\"ggplot2\") library(\"rstanarm\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"example-models","dir":"Articles","previous_headings":"Introduction","what":"Example models","title":"Graphical posterior predictive checks using the bayesplot package","text":"demonstrate various PPCs can created bayesplot package ’ll use example comparing Poisson Negative binomial regression models one rstanarm package vignettes (Gabry Goodrich, 2017). want make inferences efficacy certain pest management system reducing number roaches urban apartments. […] regression predictors model pre-treatment number roaches roach1, treatment indicator treatment, variable senior indicating whether apartment building restricted elderly residents. number days roach traps used apartments sample, include exposure […]. First fit Poisson regression model outcome variable y representing roach count apartment end experiment. ’ll also fit negative binomial model ’ll compare Poisson:","code":"head(roaches) # see help(\"rstanarm-datasets\") y roach1 treatment senior exposure2 1 153 308.00         1      0  0.800000 2 127 331.25         1      0  0.600000 3   7   1.67         1      0  1.000000 4   7   3.00         1      0  1.000000 5   0   2.00         1      0  1.142857 6   0   0.00         1      0  1.000000 roaches$roach100 <- roaches$roach1 / 100 # pre-treatment number of roaches (in 100s) # using rstanarm's default priors. For details see the section on default # weakly informative priors at https://mc-stan.org/rstanarm/articles/priors.html fit_poisson <- stan_glm(   y ~ roach100 + treatment + senior,   offset = log(exposure2),   family = poisson(link = \"log\"),   data = roaches,   seed = 1111,    refresh = 0 # suppresses all output as of v2.18.1 of rstan ) print(fit_poisson) stan_glm  family:       poisson [log]  formula:      y ~ roach100 + treatment + senior  observations: 262  predictors:   4 ------             Median MAD_SD (Intercept)  3.1    0.0   roach100     0.7    0.0   treatment   -0.5    0.0   senior      -0.4    0.0    ------ * For help interpreting the printed output see ?print.stanreg * For info on the priors used see ?prior_summary.stanreg fit_nb <- update(fit_poisson, family = \"neg_binomial_2\") print(fit_nb) stan_glm  family:       neg_binomial_2 [log]  formula:      y ~ roach100 + treatment + senior  observations: 262  predictors:   4 ------             Median MAD_SD (Intercept)  2.8    0.2   roach100     1.3    0.3   treatment   -0.8    0.2   senior      -0.3    0.3    Auxiliary parameter(s):                       Median MAD_SD reciprocal_dispersion 0.3    0.0     ------ * For help interpreting the printed output see ?print.stanreg * For info on the priors used see ?prior_summary.stanreg"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"defining-y-and-yrep","dir":"Articles","previous_headings":"Introduction","what":"Defining y and yrep","title":"Graphical posterior predictive checks using the bayesplot package","text":"order use PPC functions bayesplot package need vector y outcome values, matrix yrep draws posterior predictive distribution, row matrix draw posterior predictive distribution, .e. vector one element data points y. Since fit models using rstanarm used special posterior_predict function, using model fit rstan package create yrep generated quantities block Stan program simulations R fitting model. Draws posterior predictive distribution can used bayesplot regardless whether model fit using interface Stan. bayesplot just requires yrep matrix number_of_draws rows number_of_observations columns.","code":"y <- roaches$y yrep_poisson <- posterior_predict(fit_poisson, draws = 500) yrep_nb <- posterior_predict(fit_nb, draws = 500) dim(yrep_poisson) [1] 500 262 dim(yrep_nb) [1] 500 262"},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"ppc_dens_overlay","dir":"Articles","previous_headings":"Histograms and density estimates","what":"ppc_dens_overlay","title":"Graphical posterior predictive checks using the bayesplot package","text":"first PPC ’ll look comparison distribution y distributions simulated datasets (rows) yrep matrix.  plot , dark line distribution observed outcomes y 50 lighter lines kernel density estimate one replications y posterior predictive distribution (.e., one rows yrep). plot makes easy see model fails account large proportion zeros y. , model predicts fewer zeros actually observed. see discrepancy lower values clearly can use xlim function ggplot2 restrict range x-axis:  See Figure 6 Gabry et al. (2019) another example using ppc_dens_overlay.","code":"color_scheme_set(\"brightblue\") ppc_dens_overlay(y, yrep_poisson[1:50, ]) ppc_dens_overlay(y, yrep_poisson[1:50, ]) + xlim(0, 150)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"ppc_hist","dir":"Articles","previous_headings":"Histograms and density estimates","what":"ppc_hist","title":"Graphical posterior predictive checks using the bayesplot package","text":"see thing different perspective looking separate histograms y yrep datasets using ppc_hist function:  plot negative binomial model looks much different:  negative binomial model better handling number zeros data, occasionally predicts values way large, x-axes extend high values plot make difficult read. see predictions smaller values clearly can zoom :","code":"ppc_hist(y, yrep_poisson[1:5, ]) ppc_hist(y, yrep_nb[1:5, ]) ppc_hist(y, yrep_nb[1:5, ], binwidth = 20) +    coord_cartesian(xlim = c(-1, 300))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"distributions-of-test-statistics","dir":"Articles","previous_headings":"","what":"Distributions of test statistics","title":"Graphical posterior predictive checks using the bayesplot package","text":"Another way see Poisson model predicts zeros look distribution proportion zeros replicated datasets posterior predictive distribution yrep compare proportion observed zeros y.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"ppc_stat","dir":"Articles","previous_headings":"Distributions of test statistics","what":"ppc_stat","title":"Graphical posterior predictive checks using the bayesplot package","text":"First define function takes vector input returns proportion zeros: stat argument ppc_stat accepts function name function computing test statistic vector data. case can specify stat = \"prop_zero\" since ’ve already defined prop_zero function, also used stat = function(x) mean(x == 0).  dark line value \\(T(y)\\), .e. value test statistic computed observed \\(y\\), case prop_zero(y). lighter area left actually histogram proportion zeros yrep simulations, can hard see almost none simulated datasets yrep zeros. ’s plot negative binomial model:  see negative binomial model much better job predicting proportion observed zeros Poisson. However, look instead distribution maximum value replications, can see Poisson model makes realistic predictions negative binomial:    See Figure 7 Gabry et al. (2019) another example using ppc_stat.","code":"prop_zero <- function(x) mean(x == 0) prop_zero(y) # check proportion of zeros in y [1] 0.3587786 ppc_stat(y, yrep_poisson, stat = \"prop_zero\", binwidth = 0.005) ppc_stat(y, yrep_nb, stat = \"prop_zero\") ppc_stat(y, yrep_poisson, stat = \"max\") ppc_stat(y, yrep_nb, stat = \"max\") ppc_stat(y, yrep_nb, stat = \"max\", binwidth = 100) +    coord_cartesian(xlim = c(-1, 5000))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"other-ppcs-and-ppcs-by-group","dir":"Articles","previous_headings":"","what":"Other PPCs and PPCs by group","title":"Graphical posterior predictive checks using the bayesplot package","text":"many additional PPCs available, including plots predictive intervals, distributions predictive errors, . links documentation various PPC plots see help(\"PPC-overview\") R online documentation Stan website. available_ppc function can also used list names PPC plotting functions: Many available PPCs can also carried within levels grouping variable. function PPCs group name ending _grouped accept additional argument group. full list currently available _grouped functions :","code":"available_ppc() bayesplot PPC module:   ppc_bars   ppc_bars_grouped   ppc_boxplot   ppc_dens   ppc_dens_overlay   ppc_dens_overlay_grouped   ppc_dots   ppc_ecdf_overlay   ppc_ecdf_overlay_grouped   ppc_error_binned   ppc_error_hist   ppc_error_hist_grouped   ppc_error_scatter   ppc_error_scatter_avg   ppc_error_scatter_avg_grouped   ppc_error_scatter_avg_vs_x   ppc_freqpoly   ppc_freqpoly_grouped   ppc_hist   ppc_intervals   ppc_intervals_grouped   ppc_km_overlay   ppc_km_overlay_grouped   ppc_loo_intervals   ppc_loo_pit_ecdf   ppc_loo_pit_overlay   ppc_loo_pit_qq   ppc_loo_ribbon   ppc_pit_ecdf   ppc_pit_ecdf_grouped   ppc_ribbon   ppc_ribbon_grouped   ppc_rootogram   ppc_scatter   ppc_scatter_avg   ppc_scatter_avg_grouped   ppc_stat   ppc_stat_2d   ppc_stat_freqpoly   ppc_stat_freqpoly_grouped   ppc_stat_grouped   ppc_violin_grouped available_ppc(pattern = \"_grouped\") bayesplot PPC module: (matching pattern '_grouped')    ppc_bars_grouped   ppc_dens_overlay_grouped   ppc_ecdf_overlay_grouped   ppc_error_hist_grouped   ppc_error_scatter_avg_grouped   ppc_freqpoly_grouped   ppc_intervals_grouped   ppc_km_overlay_grouped   ppc_pit_ecdf_grouped   ppc_ribbon_grouped   ppc_scatter_avg_grouped   ppc_stat_freqpoly_grouped   ppc_stat_grouped   ppc_violin_grouped"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"ppc_stat_grouped","dir":"Articles","previous_headings":"Other PPCs and PPCs by group","what":"ppc_stat_grouped","title":"Graphical posterior predictive checks using the bayesplot package","text":"example, ppc_stat_grouped ppc_stat except test statistic computed within levels grouping variable separate plot made level:  See Figure 8 Gabry et al. (2019) another example using ppc_stat_grouped.","code":"ppc_stat_grouped(y, yrep_nb, group = roaches$treatment, stat = \"prop_zero\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"providing-an-interface-to-bayesplot-ppcs-from-another-package","dir":"Articles","previous_headings":"","what":"Providing an interface to bayesplot PPCs from another package","title":"Graphical posterior predictive checks using the bayesplot package","text":"bayesplot package provides S3 generic function pp_check. Authors R packages Bayesian inference encouraged define methods fitted model objects created packages. hopefully convenient users developers contribute use naming conventions across many R packages Bayesian data analysis. provide interface bayesplot package, can easily define pp_check method (multiple pp_check methods) fitted model objects created package. pp_check method needs provide y vector yrep matrix arguments various plotting functions included bayesplot.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"defining-a-pp_check-method","dir":"Articles","previous_headings":"Providing an interface to bayesplot PPCs from another package","what":"Defining a pp_check method","title":"Graphical posterior predictive checks using the bayesplot package","text":"example define simple pp_check method package creates fitted model objects class \"foo\". define method pp_check.foo extracts data y draws posterior predictive distribution yrep object class \"foo\" calls one plotting functions bayesplot. Suppose objects class \"foo\" lists named components, two y yrep. ’s simple method pp_check.foo offers user option two different plots: try pp_check.foo can just make list y yrep components give class foo:","code":"# @param object An object of class \"foo\". # @param type The type of plot. # @param ... Optional arguments passed on to the bayesplot plotting function. pp_check.foo <- function(object, type = c(\"multiple\", \"overlaid\"), ...) {   type <- match.arg(type)   y <- object[[\"y\"]]   yrep <- object[[\"yrep\"]]   stopifnot(nrow(yrep) >= 50)   samp <- sample(nrow(yrep), size = ifelse(type == \"overlaid\", 50, 5))   yrep <- yrep[samp, ]      if (type == \"overlaid\") {     ppc_dens_overlay(y, yrep, ...)    } else {     ppc_hist(y, yrep, ...)   } } x <- list(y = rnorm(200), yrep = matrix(rnorm(1e5), nrow = 500, ncol = 200)) class(x) <- \"foo\" color_scheme_set(\"purple\") pp_check(x, type = \"multiple\", binwidth = 0.3) color_scheme_set(\"darkgray\") pp_check(x, type = \"overlaid\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"examples-of-pp_check-methods-in-other-packages","dir":"Articles","previous_headings":"Providing an interface to bayesplot PPCs from another package","what":"Examples of pp_check methods in other packages","title":"Graphical posterior predictive checks using the bayesplot package","text":"Several packages currently use approach provide interface bayesplot’s graphical posterior predictive checks. See, example, pp_check methods rstanarm brms packages.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/graphical-ppcs.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Graphical posterior predictive checks using the bayesplot package","text":"Buerkner, P. (2017). brms: Bayesian Regression Models using Stan. R package version 1.7.0. https://CRAN.R-project.org/package=brms Gabry, J., Goodrich, B. (2017). rstanarm: Bayesian Applied Regression Modeling via Stan. R package version 2.15.3. https://mc-stan.org/rstanarm/, https://CRAN.R-project.org/package=rstanarm Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. :10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. Stan Development Team. Stan Modeling Language Users Guide Reference Manual. https://mc-stan.org/users/documentation/","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Plotting MCMC draws using the bayesplot package","text":"vignette focuses plotting parameter estimates MCMC draws. MCMC diagnostic plots covered separate vignette Visual MCMC diagnostics, graphical posterior predictive model checking covered vignette Graphical posterior predictive checks.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Plotting MCMC draws using the bayesplot package","text":"addition bayesplot ’ll load following packages: ggplot2, case want customize ggplot objects created bayesplot rstanarm, fitting example models used throughout vignette","code":"library(\"bayesplot\") library(\"ggplot2\") library(\"rstanarm\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"example-model","dir":"Articles","previous_headings":"Introduction","what":"Example model","title":"Plotting MCMC draws using the bayesplot package","text":"bayesplot package provides various plotting functions visualizing Markov chain Monte Carlo (MCMC) draws posterior distribution parameters Bayesian model. vignette demonstrate functions. Example usage functions demonstrated can found package documentation. demonstration use draws obtained using stan_glm function rstanarm package (Gabry Goodrich, 2017), MCMC draws using package can used functions bayesplot package. See, example, brms, , like rstanarm, calls rstan package internally use Stan’s MCMC sampler. use posterior draws functions bayesplot package ’ll extract fitted model object: ’ve used .array (opposed .matrix) keeps Markov chains separate (stan_glm runs four chains default). plots don’t actually need chains separate, plots make vignette ’ll want show chains individually.","code":"head(mtcars) # see help(\"mtcars\") mpg cyl disp  hp drat    wt  qsec vs am gear carb Mazda RX4         21.0   6  160 110 3.90 2.620 16.46  0  1    4    4 Mazda RX4 Wag     21.0   6  160 110 3.90 2.875 17.02  0  1    4    4 Datsun 710        22.8   4  108  93 3.85 2.320 18.61  1  1    4    1 Hornet 4 Drive    21.4   6  258 110 3.08 3.215 19.44  1  0    3    1 Hornet Sportabout 18.7   8  360 175 3.15 3.440 17.02  0  0    3    2 Valiant           18.1   6  225 105 2.76 3.460 20.22  1  0    3    1 # linear regression model using stan_glm # using '~ .' to include all variables fit <- stan_glm(mpg ~ ., data = mtcars, seed = 1111) print(fit) stan_glm  family:       gaussian [identity]  formula:      mpg ~ .  observations: 32  predictors:   11 ------             Median MAD_SD (Intercept) 12.0   19.3   cyl         -0.1    1.1   disp         0.0    0.0   hp           0.0    0.0   drat         0.8    1.6   wt          -3.7    1.9   qsec         0.8    0.8   vs           0.3    2.1   am           2.6    2.1   gear         0.6    1.5   carb        -0.2    0.9    Auxiliary parameter(s):       Median MAD_SD sigma 2.7    0.4     ------ * For help interpreting the printed output see ?print.stanreg * For info on the priors used see ?prior_summary.stanreg posterior <- as.array(fit) dim(posterior) [1] 1000    4   12 dimnames(posterior) $iterations NULL  $chains [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\"  $parameters  [1] \"(Intercept)\" \"cyl\"         \"disp\"        \"hp\"          \"drat\"         [6] \"wt\"          \"qsec\"        \"vs\"          \"am\"          \"gear\"        [11] \"carb\"        \"sigma\""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"posterior-uncertainty-intervals","dir":"Articles","previous_headings":"","what":"Posterior uncertainty intervals","title":"Plotting MCMC draws using the bayesplot package","text":"models fit using MCMC can compute posterior uncertainty intervals (sometimes called “credible intervals”) various ways. bayesplot currently provides plots central intervals based quantiles, although additional options may provided future releases (e.g., HDIs, can useful particular cases). Documentation: help(\"MCMC-intervals\") mc-stan.org/bayesplot/reference/MCMC-intervals","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_intervals-mcmc_areas","dir":"Articles","previous_headings":"Posterior uncertainty intervals","what":"mcmc_intervals, mcmc_areas","title":"Plotting MCMC draws using the bayesplot package","text":"Central posterior uncertainty intervals can plotted using mcmc_intervals function.  default show 50% intervals (thick segments) 90% intervals (thinner outer lines). defaults can changed using prob prob_outer arguments, respectively. points plot posterior medians. point_est argument can used select posterior means instead omit point estimates. show uncertainty intervals shaded areas estimated posterior density curves can use mcmc_areas function.","code":"color_scheme_set(\"red\") mcmc_intervals(posterior, pars = c(\"cyl\", \"drat\", \"am\", \"sigma\")) mcmc_areas(   posterior,    pars = c(\"cyl\", \"drat\", \"am\", \"sigma\"),   prob = 0.8, # 80% intervals   prob_outer = 0.99, # 99%   point_est = \"mean\" )"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"univariate-marginal-posterior-distributions","dir":"Articles","previous_headings":"","what":"Univariate marginal posterior distributions","title":"Plotting MCMC draws using the bayesplot package","text":"bayesplot provides functions looking histograms kernel density estimates marginal posterior distributions, either Markov chains combined chains separate. Documentation: help(\"MCMC-distributions\") mc-stan.org/bayesplot/reference/MCMC-distributions","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_hist","dir":"Articles","previous_headings":"Univariate marginal posterior distributions","what":"mcmc_hist","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_hist function plots marginal posterior distributions (combining chains):  want plot log(sigma) rather sigma can either transform draws advance use transformations argument.  functions plotting MCMC draws also transformations argument.","code":"color_scheme_set(\"green\") mcmc_hist(posterior, pars = c(\"wt\", \"sigma\")) color_scheme_set(\"blue\") mcmc_hist(posterior, pars = c(\"wt\", \"sigma\"),           transformations = list(\"sigma\" = \"log\"))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_hist_by_chain","dir":"Articles","previous_headings":"Univariate marginal posterior distributions","what":"mcmc_hist_by_chain","title":"Plotting MCMC draws using the bayesplot package","text":"view separate histograms four Markov chains can use mcmc_hist_by_chain, plots chain separate facet plot.","code":"color_scheme_set(\"brightblue\") mcmc_hist_by_chain(posterior, pars = c(\"wt\", \"sigma\"))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_dens","dir":"Articles","previous_headings":"Univariate marginal posterior distributions","what":"mcmc_dens","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_dens function similar mcmc_hist plots kernel density estimates instead histograms.","code":"color_scheme_set(\"purple\") mcmc_dens(posterior, pars = c(\"wt\", \"sigma\"))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_dens_overlay","dir":"Articles","previous_headings":"Univariate marginal posterior distributions","what":"mcmc_dens_overlay","title":"Plotting MCMC draws using the bayesplot package","text":"Like mcmc_hist_by_chain, mcmc_dens_overlay function separates Markov chains. instead plotting chain individually, density estimates overlaid.","code":"mcmc_dens_overlay(posterior, pars = c(\"wt\", \"sigma\"))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_violin","dir":"Articles","previous_headings":"Univariate marginal posterior distributions","what":"mcmc_violin","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_violin function plots density estimates chain violins draws horizontal line segments user-specified quantiles.","code":"color_scheme_set(\"teal\") mcmc_violin(posterior, pars = c(\"wt\", \"sigma\"), probs = c(0.1, 0.5, 0.9))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"bivariate-plots","dir":"Articles","previous_headings":"","what":"Bivariate plots","title":"Plotting MCMC draws using the bayesplot package","text":"Various functions available plotting bivariate marginal posterior distributions. functions also take optional arguments adding MCMC diagnostic information plots. additional functionality discussed separate Visual MCMC diagnostics vignette. Documentation: help(\"MCMC-scatterplots\") mc-stan.org/bayesplot/reference/MCMC-scatterplots","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_scatter","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_scatter","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_scatter function creates simple scatterplot two parameters.","code":"color_scheme_set(\"gray\") mcmc_scatter(posterior, pars = c(\"(Intercept)\", \"wt\"),               size = 1.5, alpha = 0.5)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_hex","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_hex","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_hex function creates similar plot using hexagonal binning, can useful avoid overplotting.","code":"# requires hexbin package if (requireNamespace(\"hexbin\", quietly = TRUE)) {   mcmc_hex(posterior, pars = c(\"(Intercept)\", \"wt\")) }"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_pairs","dir":"Articles","previous_headings":"Bivariate plots","what":"mcmc_pairs","title":"Plotting MCMC draws using the bayesplot package","text":"addition mcmc_scatter mcmc_hex, bayesplot now provides mcmc_pairs function creating pairs plots two parameters.  univariate marginal posteriors shown along diagonal histograms, can changed densities setting diag_fun=\"dens\". Bivariate plots displayed diagonal scatterplots, also possible use hex plots setting off_diag_fun=\"hex\". default, mcmc_pairs shows Markov chains (half, even number chains) diagonal others . many options controlling draws split plots diagonal (see documentation condition argument), useful MCMC diagnostic information included. discussed Visual MCMC diagnostics vignette.","code":"color_scheme_set(\"pink\") mcmc_pairs(posterior, pars = c(\"(Intercept)\", \"wt\", \"sigma\"),            off_diag_args = list(size = 1.5))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"trace-plots","dir":"Articles","previous_headings":"","what":"Trace plots","title":"Plotting MCMC draws using the bayesplot package","text":"Trace plots time series plots Markov chains. vignette show standard trace plots bayesplot can make. models fit using Stan interface (Hamiltonian Monte Carlo general), Visual MCMC diagnostics vignette provides example also adding information divergences trace plots. Documentation: help(\"MCMC-traces\") mc-stan.org/bayesplot/reference/MCMC-traces","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_trace","dir":"Articles","previous_headings":"Trace plots","what":"mcmc_trace","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_trace function creates standard trace plots:  ’s hard see difference chains can change mixed color scheme, example:  code also illustrates use facet_args argument, list parameters passed facet_wrap ggplot2. Specifying ncol=1 means trace plots stacked single column rather placed side side, strip.position=\"left\" moves facet labels y-axis (instead facet). \"viridis\" color scheme also useful trace plots comprised distinct colors:","code":"color_scheme_set(\"blue\") mcmc_trace(posterior, pars = c(\"wt\", \"sigma\")) color_scheme_set(\"mix-blue-red\") mcmc_trace(posterior, pars = c(\"wt\", \"sigma\"),             facet_args = list(ncol = 1, strip.position = \"left\")) color_scheme_set(\"viridis\") mcmc_trace(posterior, pars = \"(Intercept)\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"mcmc_trace_highlight","dir":"Articles","previous_headings":"Trace plots","what":"mcmc_trace_highlight","title":"Plotting MCMC draws using the bayesplot package","text":"mcmc_trace_highlight function uses points instead lines reduces opacity single chain (specified using highlight argument).","code":"mcmc_trace_highlight(posterior, pars = \"sigma\", highlight = 3)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/plotting-mcmc-draws.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Plotting MCMC draws using the bayesplot package","text":"Gabry, J., Goodrich, B. (2017). rstanarm: Bayesian Applied Regression Modeling via Stan. R package version 2.15.3. https://mc-stan.org/rstanarm/, https://CRAN.R-project.org/package=rstanarm Gabry, J., Simpson, D., Vehtari, ., Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. :10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. Stan Development Team. (2017). Stan Modeling Language Users Guide Reference Manual. https://mc-stan.org/users/documentation/","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Visual MCMC diagnostics using the bayesplot package","text":"vignette focuses MCMC diagnostic plots, particular diagnosing divergent transitions n_eff Rhat statistics help determine chains mixed well. Plots parameter estimates MCMC draws covered separate vignette Plotting MCMC draws, graphical posterior predictive model checking covered Graphical posterior predictive checks vignette. Note plots can also browsed interactively using shinystan package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"setup","dir":"Articles","previous_headings":"Introduction","what":"Setup","title":"Visual MCMC diagnostics using the bayesplot package","text":"addition bayesplot ’ll load following packages: ggplot2, case want customize ggplot objects created bayesplot rstan, fitting example models used throughout vignette","code":"library(\"bayesplot\") library(\"ggplot2\") library(\"rstan\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"example-model","dir":"Articles","previous_headings":"Introduction","what":"Example model","title":"Visual MCMC diagnostics using the bayesplot package","text":"delve actual plotting need fit model something work . vignette ’ll use eight schools example, discussed many places, including Rubin (1981), Gelman et al. (2013), RStan Getting Started wiki. simple hierarchical meta-analysis model data consisting point estimates y standard errors sigma analyses test prep programs J=8 schools. Ideally full data previous studies, case estimates. model : \\[ \\begin{align*} y_j &\\sim {\\rm Normal}(\\theta_j, \\sigma_j), \\quad j = 1,\\dots,J \\\\ \\theta_j &\\sim {\\rm Normal}(\\mu, \\tau), \\quad j = 1, \\dots, J \\\\ \\mu &\\sim {\\rm Normal}(0, 10) \\\\ \\tau &\\sim {\\rm half-Cauchy}(0, 10), \\end{align*} \\] normal distribution parameterized mean standard deviation, variance precision. Stan code: parameterization model referred centered parameterization (CP). ’ll also fit statistical model using -called non-centered parameterization (NCP), replaces vector \\(\\theta\\) vector \\(\\eta\\) priori ..d. standard normal parameters constructs \\(\\theta\\) deterministically \\(\\eta\\) scaling \\(\\tau\\) shifting \\(\\mu\\): \\[ \\begin{align*} \\theta_j &= \\mu + \\tau \\,\\eta_j, \\quad j = 1,\\dots,J \\\\ \\eta_j &\\sim N(0,1), \\quad j = 1,\\dots,J. \\end{align*} \\] Stan code model : centered non-centered two parameterizations statistical model, different practical implications MCMC. Using bayesplot diagnostic plots, ’ll see , data, NCP required order properly explore posterior distribution. fit models first translate Stan code C++ compile using stan_model function. fit model calling Stan’s MCMC algorithm using sampling function (increased adapt_delta param make sampler bit “careful” avoid false positive divergences), extract iterations x chains x parameters array posterior draws .array, may noticed warnings divergent transitions centered parameterization fit. serious business cases indicate something wrong model results trusted. explanation warnings see Divergent transitions warmup. ’ll look diagnosing source divergences first dive diagnostics checked even warnings sampler.","code":"schools_dat <- list(   J = 8,    y = c(28,  8, -3,  7, -1,  1, 18, 12),   sigma = c(15, 10, 16, 11,  9, 11, 10, 18) ) // Saved in 'schools_mod_cp.stan' data {   int<lower=0> J;   vector[J] y;   vector<lower=0>[J] sigma; } parameters {   real mu;   real<lower=0> tau;   vector[J] theta; } model {   mu ~ normal(0, 10);   tau ~ cauchy(0, 10);   theta ~ normal(mu, tau);   y ~ normal(theta, sigma); } // Saved in 'schools_mod_ncp.stan' data {   int<lower=0> J;   vector[J] y;   vector<lower=0>[J] sigma; } parameters {   real mu;   real<lower=0> tau;   vector[J] eta; } transformed parameters {   vector[J] theta;   theta = mu + tau * eta; } model {   mu ~ normal(0, 10);   tau ~ cauchy(0, 10);   eta ~ normal(0, 1); // implies theta ~ normal(mu, tau)   y ~ normal(theta, sigma); } schools_mod_cp <- stan_model(\"schools_mod_cp.stan\") schools_mod_ncp <- stan_model(\"schools_mod_ncp.stan\") fit_cp <- sampling(schools_mod_cp, data = schools_dat, seed = 803214055, control = list(adapt_delta = 0.9)) Warning: There were 124 divergent transitions after warmup. See https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup to find out why this is a problem and how to eliminate them. Warning: Examine the pairs() plot to diagnose sampling problems Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#tail-ess fit_ncp <- sampling(schools_mod_ncp, data = schools_dat, seed = 457721433, control = list(adapt_delta = 0.9)) # Extract posterior draws for later use posterior_cp <- as.array(fit_cp) posterior_ncp <- as.array(fit_ncp)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"diagnostics-for-the-no-u-turn-sampler","dir":"Articles","previous_headings":"","what":"Diagnostics for the No-U-Turn Sampler","title":"Visual MCMC diagnostics using the bayesplot package","text":"-U-Turn Sampler (NUTS, Hoffman Gelman, 2014) variant Hamiltonian Monte Carlo (HMC) used Stan various R packages depend Stan fitting Bayesian models. bayesplot package special functions visualizing unique diagnostics permitted HMC, NUTS particular. See Betancourt (2017), Betancourt Girolami (2013), Stan Development Team (2017) details concepts. Documentation: help(\"MCMC-nuts\") mc-stan.org/bayesplot/reference/MCMC-nuts special bayesplot functions NUTS diagnostics functions require information simply posterior draws, particular log posterior density draw NUTS-specific diagnostic values may needed. bayesplot package provides generic functions log_posterior nuts_params extracting information fitted model objects. Currently methods provided models fit using rstan, rstanarm brms packages, although difficult define additional methods objects returned R packages. Stan models fit can use log_posterior nuts_params methods stanfit objects: addition NUTS-specific plotting functions, general MCMC plotting functions demonstrated Plotting MCMC draws vignette also take optional arguments can used display important HMC/NUTS diagnostic information. ’ll see examples next section divergent transitions.","code":"available_mcmc(pattern = \"_nuts_\") bayesplot MCMC module: (matching pattern '_nuts_')    mcmc_nuts_acceptance   mcmc_nuts_divergence   mcmc_nuts_energy   mcmc_nuts_stepsize   mcmc_nuts_treedepth lp_cp <- log_posterior(fit_cp) head(lp_cp) Chain Iteration     Value 1     1         1 -25.73958 2     1         2 -24.52259 3     1         3 -22.32740 4     1         4 -22.54495 5     1         5 -20.49160 6     1         6 -24.06619 np_cp <- nuts_params(fit_cp) head(np_cp) Chain Iteration     Parameter     Value 1     1         1 accept_stat__ 0.9589744 2     1         2 accept_stat__ 0.9927801 3     1         3 accept_stat__ 0.9925771 4     1         4 accept_stat__ 0.9857866 5     1         5 accept_stat__ 0.9802687 6     1         6 accept_stat__ 0.9492450 # for the second model lp_ncp <- log_posterior(fit_ncp) np_ncp <- nuts_params(fit_ncp)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"divergent-transitions","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler","what":"Divergent transitions","title":"Visual MCMC diagnostics using the bayesplot package","text":"running Stan models , warnings divergent transitions. ’ll look diagnosing source divergences visualizations.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_parcoord","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Divergent transitions","what":"mcmc_parcoord","title":"Visual MCMC diagnostics using the bayesplot package","text":"mcmc_parcoord plot shows one line per iteration, connecting parameter values iteration. lets see global patterns divergences. function works general without including information divergences, optional np argument used pass NUTS parameter information, divergences colored plot (default red).  , may notice divergences centered parameterization happen exclusively tau, hierarchical standard deviation, goes near zero values thetas essentially fixed. makes tau immediately suspect. See Gabry et al. (2019) another example parallel coordinates plot.","code":"color_scheme_set(\"darkgray\") mcmc_parcoord(posterior_cp, np = np_cp)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_pairs","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Divergent transitions","what":"mcmc_pairs","title":"Visual MCMC diagnostics using the bayesplot package","text":"mcmc_pairs function can also used look multiple parameters , unlike mcmc_parcoord (works well even including several dozen parameters) mcmc_pairs useful ~8 parameters. shows univariate histograms bivariate scatter plots selected parameters especially useful identifying collinearity variables (manifests narrow bivariate plots) well presence multiplicative non-identifiabilities (banana-like shapes). Let’s look tau interacts variables, using one thetas keep plot readable:  Note bivariate plot present twice – default contain half chains, also get see chains produced similar results (see documentation condition argument options). , interaction tau theta[1] seems interesting, concentrates divergences tight region. examples pairs plots instructions using various optional arguments mcmc_pairs provided via help(\"mcmc_pairs\").","code":"mcmc_pairs(posterior_cp, np = np_cp, pars = c(\"mu\",\"tau\",\"theta[1]\"),            off_diag_args = list(size = 0.75))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_scatter","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Divergent transitions","what":"mcmc_scatter","title":"Visual MCMC diagnostics using the bayesplot package","text":"Using mcmc_scatter function (optional argument np) can look single bivariate plot investigate closely. hierarchical models, good place start plot “local” parameter (theta[j]) “global” scale parameter depends (tau). also use transformations argument look log tau, Stan hood parameters like tau lower bound zero. , even though draws tau returned Stan positive, parameter space Markov chains actual explore unconstrained. Transforming tau strictly necessary plot (often plot still useful without ) plotting unconstrained often even informative. First plot centered parameterization:  shape bivariate distribution resembles funnel (tornado). one particular essentially example referred Neal’s funnel (details Stan manual) clear indication Markov chains struggling explore tip funnel, narrower rest space. main problem large steps required explore less narrow regions efficiently, steps become large navigating narrow region. required step size connected value tau. tau large allows large variation theta (requires large steps) small tau requires small steps theta. non-centered parameterization avoids sampling eta parameter , unlike theta, priori independent tau. theta computed deterministically parameters eta, mu tau afterwards. ’s plot , eta[1] non-centered parameterization instead theta[1] centered parameterization:  can see funnel/tornado shape replaced somewhat Gaussian blob/cloud divergences go away. Gabry et al. (2019) discussion example. Ultimately care eta insofar enables Markov chains better explore posterior, let’s directly examine much exploration possible reparameterization. non-centered parameterization can make scatterplot use values theta[1] = mu + eta[1] * tau instead eta[1]. side side comparison scatterplot theta[1] vs log(tau) centered parameterization made . also force plots \\(y\\)-axis limits, make important difference much apparent:  transform eta values theta values actually see even pronounced funnel/tornado shape centered parameterization. precisely want! non-centered parameterization allowed us obtain draws funnel distribution without directly navigate curvature funnel. centered parameterization chains never make neck funnel see clustering divergences draws tail distribution.","code":"# assign to an object so we can reuse later scatter_theta_cp <- mcmc_scatter(   posterior_cp,    pars = c(\"theta[1]\", \"tau\"),    transform = list(tau = \"log\"), # can abbrev. 'transformations'   np = np_cp,    size = 1 ) scatter_theta_cp scatter_eta_ncp <- mcmc_scatter(   posterior_ncp,    pars = c(\"eta[1]\", \"tau\"),    transform = list(tau = \"log\"),    np = np_ncp,    size = 1 ) scatter_eta_ncp # A function we'll use several times to plot comparisons of the centered  # parameterization (cp) and the non-centered parameterization (ncp). See # help(\"bayesplot_grid\") for details on the bayesplot_grid function used here. compare_cp_ncp <- function(cp_plot, ncp_plot, ncol = 2, ...) {   bayesplot_grid(     cp_plot, ncp_plot,      grid_args = list(ncol = ncol),     subtitles = c(\"Centered parameterization\",                    \"Non-centered parameterization\"),     ...   ) }   scatter_theta_ncp <- mcmc_scatter(   posterior_ncp,    pars = c(\"theta[1]\", \"tau\"),    transform = list(tau = \"log\"),    np = np_ncp,    size = 1 )  compare_cp_ncp(scatter_theta_cp, scatter_theta_ncp, ylim = c(-8, 4)) Warning:  [1m [22mRemoved 5 rows containing missing values or values outside the scale range (`geom_point()`)."},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_trace","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Divergent transitions","what":"mcmc_trace","title":"Visual MCMC diagnostics using the bayesplot package","text":"Another useful diagnostic plot trace plot, time series plot Markov chains. , trace plot shows evolution parameter vector iterations one many Markov chains. np argument mcmc_trace function can used add rug plot divergences trace plot parameter draws. Typically can see least one chains getting stuck wherever cluster many red marks. trace plot tau parameter centered parameterization:  first thing note chains seem exploring region parameter values, good sign. plot crowded help us diagnose divergences. may however zoom investigate, using window argument:  see chains can get stuck tau approaches zero spend substantial time region parameter space. just another indication problematic geometry \\(\\tau \\simeq 0\\) – healthy chains jump frequently.","code":"color_scheme_set(\"mix-brightblue-gray\") mcmc_trace(posterior_cp, pars = \"tau\", np = np_cp) +    xlab(\"Post-warmup iteration\") mcmc_trace(posterior_cp, pars = \"tau\", np = np_cp, window = c(200,400)) +    xlab(\"Post-warmup iteration\")"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_nuts_divergence","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Divergent transitions","what":"mcmc_nuts_divergence","title":"Visual MCMC diagnostics using the bayesplot package","text":"understand divergences interact model globally, can use mcmc_nuts_divergence function:  top panel see distribution log-posterior divergence vs distribution divergence. Divergences often indicate part posterior isn’t explored plot confirms lp|Divergence indeed lighter tails lp|divergence. bottom panel shows thing instead log-posterior NUTS acceptance statistic shown. Specifying optional chain argument overlay plot just particular Markov chain plot chains combined:  non-centered parameterization may get warnings divergences ’ll far fewer worry .  divergences can often get rid increasing target acceptance rate (adapt_delta, upper limit 1), effect lowering step size used sampler allowing Markov chains explore complicated curvature target distribution. first model particular data, increasing adapt_delta solve problem reparameterization required.","code":"color_scheme_set(\"red\") mcmc_nuts_divergence(np_cp, lp_cp) mcmc_nuts_divergence(np_cp, lp_cp, chain = 4) mcmc_nuts_divergence(np_ncp, lp_ncp) fit_cp_2 <- sampling(schools_mod_cp, data = schools_dat,                      control = list(adapt_delta = 0.999), seed = 978245244) Warning: There were 18 divergent transitions after warmup. See https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup to find out why this is a problem and how to eliminate them. Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See https://mc-stan.org/misc/warnings.html#bfmi-low Warning: Examine the pairs() plot to diagnose sampling problems Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#tail-ess fit_ncp_2 <- sampling(schools_mod_ncp, data = schools_dat,                       control = list(adapt_delta = 0.999), seed = 843256842) mcmc_nuts_divergence(nuts_params(fit_cp_2), log_posterior(fit_cp_2)) mcmc_nuts_divergence(nuts_params(fit_ncp_2), log_posterior(fit_ncp_2))"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"energy-and-bayesian-fraction-of-missing-information","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler","what":"Energy and Bayesian fraction of missing information","title":"Visual MCMC diagnostics using the bayesplot package","text":"mcmc_nuts_energy function creates plots similar presented Betancourt (2017). mcmcm_nuts_divergence can identify light tails incomplete exploration target distribution, mcmc_nuts_energy function can identify overly heavy tails also challenging sampling. Informally, energy diagnostic HMC (related energy-based Bayesian fraction missing information) quantifies heaviness tails posterior distribution.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_nuts_energy","dir":"Articles","previous_headings":"Diagnostics for the No-U-Turn Sampler > Energy and Bayesian fraction of missing information","what":"mcmc_nuts_energy","title":"Visual MCMC diagnostics using the bayesplot package","text":"plot created mcmc_nuts_energy shows overlaid histograms (centered) marginal energy distribution \\(\\pi_E\\) first-differenced distribution \\(\\pi_{\\Delta E}\\),  two histograms ideally look (Betancourt, 2017), case non-centered parameterization (right):  difference parameterizations even apparent force step size smaller value help chains explore posterior:  See Betancourt (2017) particular example well general theory behind energy plots.","code":"color_scheme_set(\"red\") mcmc_nuts_energy(np_cp) compare_cp_ncp(   mcmc_nuts_energy(np_cp, binwidth = 1/2),   mcmc_nuts_energy(np_ncp, binwidth = 1/2) ) np_cp_2 <- nuts_params(fit_cp_2) np_ncp_2 <- nuts_params(fit_ncp_2)  compare_cp_ncp(   mcmc_nuts_energy(np_cp_2),    mcmc_nuts_energy(np_ncp_2) )"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"general-mcmc-diagnostics","dir":"Articles","previous_headings":"","what":"General MCMC diagnostics","title":"Visual MCMC diagnostics using the bayesplot package","text":"Markov chain generates draws target distribution converged equilibrium. Unfortunately, guaranteed limit theory. practice, diagnostics must applied monitor whether Markov chain(s) converged. bayesplot package provides various plotting functions visualizing Markov chain Monte Carlo (MCMC) diagnostics fitting Bayesian model. MCMC draws package can used, although diagnostic plots see later vignette specifically intended used Stan models (models fit using algorithms Stan). Documentation: help(\"MCMC-diagnostics\") mc-stan.org/bayesplot/reference/MCMC-diagnostics","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"rhat-potential-scale-reduction-statistic","dir":"Articles","previous_headings":"General MCMC diagnostics","what":"Rhat: potential scale reduction statistic","title":"Visual MCMC diagnostics using the bayesplot package","text":"One way monitor whether chain converged equilibrium distribution compare behavior randomly initialized chains. motivation potential scale reduction statistic, split-\\(\\hat{R}\\). split-\\(\\hat{R}\\) statistic measures ratio average variance draws within chain variance pooled draws across chains; chains equilibrium, \\(\\hat{R}\\) one. chains converged common distribution, \\(\\hat{R}\\) statistic greater one (see Gelman et al. 2013, Stan Development Team 2018). bayesplot package provides functions mcmc_rhat mcmc_rhat_hist visualizing \\(\\hat{R}\\) estimates. First ’ll quickly fit one models , time intentionally using MCMC iterations allowing dispersed initial values. lead high \\(\\hat{R}\\) values. bayesplot provides generic rhat extractor function, currently methods defined models fit using rstan, rstanarm brms packages. regardless fit model, bayesplot needs vector \\(\\hat{R}\\) values.","code":"fit_cp_bad_rhat <- sampling(schools_mod_cp, data = schools_dat,                              iter = 50, init_r = 10, seed = 671254821) Warning: There were 48 transitions after warmup that exceeded the maximum treedepth. Increase max_treedepth above 10. See https://mc-stan.org/misc/warnings.html#maximum-treedepth-exceeded Warning: Examine the pairs() plot to diagnose sampling problems Warning: The largest R-hat is 1.73, indicating chains have not mixed. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#r-hat Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#bulk-ess Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. Running the chains for more iterations may help. See https://mc-stan.org/misc/warnings.html#tail-ess rhats <- rhat(fit_cp_bad_rhat) print(rhats) mu      tau theta[1] theta[2] theta[3] theta[4] theta[5] theta[6]  1.195704 1.652153 1.299397 1.396103 1.255961 1.123405 1.154049 1.424647  theta[7] theta[8]     lp__  1.133948 1.577158 1.840006"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_rhat-mcmc_rhat_hist","dir":"Articles","previous_headings":"General MCMC diagnostics > Rhat: potential scale reduction statistic","what":"mcmc_rhat, mcmc_rhat_hist","title":"Visual MCMC diagnostics using the bayesplot package","text":"can visualize \\(\\hat{R}\\) values mcmc_rhat function:  plot, points representing \\(\\hat{R}\\) values colored based whether less \\(1.05\\), \\(1.05\\) \\(1.1\\), greater \\(1.1\\). theoretical reason trichotomize \\(\\hat{R}\\) values using cutoffs, keep mind just heuristic. \\(y\\)-axis text default plot ’s possible see labels clearly models parameters. can see names parameters concerning \\(\\hat{R}\\) values using yaxis_text convenience function (passes arguments like hjust ggplot2::element_text):  look model fit using longer Markov chains see \\(\\hat{R} < 1.1\\), points plot (light) color:  can see information shown mcmc_rhat histogram form using mcmc_rhat_hist function. See Examples section help(\"mcmc_rhat_hist\") examples.","code":"color_scheme_set(\"brightblue\") # see help(\"color_scheme_set\") mcmc_rhat(rhats) mcmc_rhat(rhats) + yaxis_text(hjust = 1) mcmc_rhat(rhat = rhat(fit_cp)) + yaxis_text(hjust = 0)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"effective-sample-size","dir":"Articles","previous_headings":"General MCMC diagnostics","what":"Effective sample size","title":"Visual MCMC diagnostics using the bayesplot package","text":"effective sample size estimate number independent draws posterior distribution estimand interest. \\(n_{eff}\\) metric used Stan based ability draws estimate true mean value parameter, related (necessarily equivalent ) estimating functions draws. draws within Markov chain independent autocorrelation, effective sample size, \\(n_{eff}\\), usually smaller total sample size, \\(N\\) (although may larger cases1). larger ratio \\(n_{eff}\\) \\(N\\) better (see Gelman et al. 2013, Stan Development Team 2018 details) . bayesplot package provides generic neff_ratio extractor function, currently methods defined models fit using rstan, rstanarm brms packages. regardless fit model, bayesplot needs vector \\(n_{eff}/N\\) values. mcmc_neff mcmc_neff_hist can used plot ratios.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_neff-mcmc_neff_hist","dir":"Articles","previous_headings":"General MCMC diagnostics > Effective sample size","what":"mcmc_neff, mcmc_neff_hist","title":"Visual MCMC diagnostics using the bayesplot package","text":"plot, points representing values \\(n_{eff}/N\\) colored based whether less \\(0.1\\), \\(0.1\\) \\(0.5\\), greater \\(0.5\\). particular values arbitrary particular theoretical meaning, useful heuristic worry \\(n_{eff}/N\\) less \\(0.1\\). One important thing keep mind ratios depend model fit also particular MCMC algorithm used. One reason high ratios \\(n_{eff}\\) \\(N\\) -U-Turn sampler used rstan generally produces draws posterior distribution much lower autocorrelations compared draws obtained using MCMC algorithms (e.g., Gibbs). Even models fit using rstan parameterization can make big difference. \\(n_{eff}/N\\) plots fit_cp fit_ncp side side.  difference parameterization, effective sample sizes much better second model, non-centered parameterization.","code":"ratios_cp <- neff_ratio(fit_cp) print(ratios_cp) mu        tau   theta[1]   theta[2]   theta[3]   theta[4]   theta[5]  0.12692799 0.06376363 0.17873489 0.20191192 0.22967848 0.23713514 0.15317114    theta[6]   theta[7]   theta[8]       lp__  0.21067336 0.14218173 0.24068546 0.03069567 mcmc_neff(ratios_cp, size = 2) neff_cp <- neff_ratio(fit_cp, pars = c(\"theta\", \"mu\", \"tau\")) neff_ncp <- neff_ratio(fit_ncp, pars = c(\"theta\", \"mu\", \"tau\")) compare_cp_ncp(mcmc_neff(neff_cp), mcmc_neff(neff_ncp), ncol = 1)"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"autocorrelation","dir":"Articles","previous_headings":"General MCMC diagnostics","what":"Autocorrelation","title":"Visual MCMC diagnostics using the bayesplot package","text":"mentioned , \\(n_{eff}/N\\) decreases autocorrelation becomes extreme. can visualize autocorrelation using mcmc_acf (line plot) mcmc_acf_bar (bar plot) functions. selected parameters, functions show autocorrelation Markov chain separately user-specified number lags. Positive autocorrelation bad (means chain tends stay area iterations) want drop quickly zero increasing lag. Negative autocorrelation possible useful indicates fast convergence sample mean towards true mean.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"mcmc_acf-mcmc_acf_bar","dir":"Articles","previous_headings":"General MCMC diagnostics > Autocorrelation","what":"mcmc_acf, mcmc_acf_bar","title":"Visual MCMC diagnostics using the bayesplot package","text":"can see difference comparing two parameterizations model. model 1, \\(\\theta_1\\) primitive parameter school 1, whereas non-centered parameterization model 2 primitive parameter \\(\\eta_1\\) (\\(\\theta_1\\) later constructed \\(\\eta_1\\), \\(\\mu\\), \\(\\tau\\)):","code":"compare_cp_ncp(   mcmc_acf(posterior_cp, pars = \"theta[1]\", lags = 10),   mcmc_acf(posterior_ncp, pars = \"eta[1]\", lags = 10) )"},{"path":"https://mc-stan.org/bayesplot/dev/articles/visual-mcmc-diagnostics.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Visual MCMC diagnostics using the bayesplot package","text":"Betancourt, M. (2017). conceptual introduction Hamiltonian Monte Carlo. https://arxiv.org/abs/1701.02434 Betancourt, M. (2016). Diagnosing suboptimal cotangent disintegrations Hamiltonian Monte Carlo. https://arxiv.org/abs/1604.00695 Betancourt, M. Girolami, M. (2013). Hamiltonian Monte Carlo hierarchical models. https://arxiv.org/abs/1312.0906 Gabry, J., Goodrich, B. (2018). rstanarm: Bayesian Applied Regression Modeling via Stan. R package version 2.17.4. https://mc-stan.org/rstanarm/ Gabry, J., Simpson, D., Vehtari, ., Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. :10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, . Rubin, D. B. (1992). Inference iterative simulation using multiple sequences. Statistical Science. 7(4): 457–472. Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. Hoffman, M. D. Gelman, . (2014). -U-Turn Sampler: adaptively setting path lengths Hamiltonian Monte Carlo. Journal Machine Learning Research. 15:1593–1623. Rubin, D. B. (1981). Estimation Parallel Randomized Experiments. Journal Educational Behavioral Statistics. 6:377–401. Stan Development Team. Stan Modeling Language Users Guide Reference Manual. https://mc-stan.org/users/documentation/ Stan Development Team. (2018). RStan: R interface Stan. R package version 2.17.3. https://mc-stan.org/rstan/","code":""},{"path":"https://mc-stan.org/bayesplot/dev/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Jonah Gabry. Author, maintainer. Tristan Mahr. Author. Paul-Christian Bürkner. Contributor. Martin Modrák. Contributor. Malcolm Barrett. Contributor. Frank Weber. Contributor. Eduardo Coronado Sroka. Contributor. Teemu Sailynoja. Contributor. Aki Vehtari. Contributor. Behram Ulukır. Contributor.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Gabry J, Mahr T (2025). “bayesplot: Plotting Bayesian Models.” R package version 1.14.0.9000, https://mc-stan.org/bayesplot/. Gabry J, Simpson D, Vehtari , Betancourt M, Gelman (2019). “Visualization Bayesian workflow.” J. R. Stat. Soc. , 182, 389-402. doi:10.1111/rssa.12378.","code":"@Misc{,   title = {bayesplot: Plotting for Bayesian Models},   author = {Jonah Gabry and Tristan Mahr},   year = {2025},   note = {R package version 1.14.0.9000},   url = {https://mc-stan.org/bayesplot/}, } @Article{,   title = {Visualization in Bayesian workflow},   author = {Jonah Gabry and Daniel Simpson and Aki Vehtari and Michael Betancourt and Andrew Gelman},   year = {2019},   journal = {J. R. Stat. Soc. A},   volume = {182},   issue = {2},   pages = {389-402},   doi = {10.1111/rssa.12378}, }"},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"overview","dir":"","previous_headings":"","what":"Overview","title":"Plotting for Bayesian Models","text":"bayesplot R package providing extensive library plotting functions use fitting Bayesian models (typically MCMC). plots created bayesplot ggplot objects, means plot created can customized using various functions ggplot2 package. Currently bayesplot offers variety plots posterior draws, visual MCMC diagnostics, graphical posterior (prior) predictive checking, general plots posterior (prior) predictive distributions. idea behind bayesplot provide convenient functionality users, also common set functions can easily used developers working variety packages Bayesian modeling, particularly (necessarily) powered RStan.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Plotting for Bayesian Models","text":"just getting started bayesplot recommend starting tutorial vignettes, examples throughout package documentation, paper Visualization Bayesian workflow: Gabry J, Simpson D, Vehtari , Betancourt M, Gelman (2019). Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"resources","dir":"","previous_headings":"","what":"Resources","title":"Plotting for Bayesian Models","text":"mc-stan.org/bayesplot (online documentation, vignettes) Ask question (Stan Forums Discourse) Open issue (GitHub issues bug reports, feature requests)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Plotting for Bayesian Models","text":"always looking new contributors! See CONTRIBUTING.md details /reach via issue tracker.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Plotting for Bayesian Models","text":"Install CRAN: Install latest development version GitHub (requires devtools package): installation won’t include vignettes (take time build), vignettes available online mc-stan.org/bayesplot/articles.","code":"install.packages(\"bayesplot\") if (!require(\"devtools\")) {   install.packages(\"devtools\") } devtools::install_github(\"stan-dev/bayesplot\", dependencies = TRUE, build_vignettes = FALSE)"},{"path":"https://mc-stan.org/bayesplot/dev/index.html","id":"examples","dir":"","previous_headings":"","what":"Examples","title":"Plotting for Bayesian Models","text":"quick examples using MCMC draws obtained rstanarm rstan packages.","code":"library(\"bayesplot\") library(\"rstanarm\") library(\"ggplot2\")  fit <- stan_glm(mpg ~ ., data = mtcars) posterior <- as.matrix(fit)  plot_title <- ggtitle(\"Posterior distributions\",                       \"with medians and 80% intervals\") mcmc_areas(posterior,             pars = c(\"cyl\", \"drat\", \"am\", \"wt\"),             prob = 0.8) + plot_title color_scheme_set(\"red\") ppc_dens_overlay(y = fit$y,                   yrep = posterior_predict(fit, draws = 50)) # also works nicely with piping library(\"dplyr\") color_scheme_set(\"brightblue\") fit %>%    posterior_predict(draws = 500) %>%   ppc_stat_grouped(y = mtcars$mpg,                     group = mtcars$carb,                     stat = \"median\") # with rstan demo model library(\"rstan\") fit2 <- stan_demo(\"eight_schools\", warmup = 300, iter = 700) posterior2 <- extract(fit2, inc_warmup = TRUE, permuted = FALSE)  color_scheme_set(\"mix-blue-pink\") p <- mcmc_trace(posterior2,  pars = c(\"mu\", \"tau\"), n_warmup = 300,                 facet_args = list(nrow = 2, labeller = label_parsed)) p + facet_text(size = 15) # scatter plot also showing divergences color_scheme_set(\"darkgray\") mcmc_scatter(   as.matrix(fit2),   pars = c(\"tau\", \"theta[1]\"),    np = nuts_params(fit2),    np_style = scatter_style_np(div_color = \"green\", div_alpha = 0.8) ) color_scheme_set(\"red\") np <- nuts_params(fit2) mcmc_nuts_energy(np) + ggtitle(\"NUTS Energy Diagnostic\") # another example with rstanarm color_scheme_set(\"purple\")  fit <- stan_glmer(mpg ~ wt + (1|cyl), data = mtcars) ppc_intervals(   y = mtcars$mpg,   yrep = posterior_predict(fit),   x = mtcars$wt,   prob = 0.5 ) +   labs(     x = \"Weight (1000 lbs)\",     y = \"MPG\",     title = \"50% posterior predictive intervals \\nvs observed miles per gallon\",     subtitle = \"by vehicle weight\"   ) +   panel_bg(fill = \"gray95\", color = NA) +   grid_lines(color = \"white\")"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-combos.html","id":null,"dir":"Reference","previous_headings":"","what":"Combination plots — MCMC-combos","title":"Combination plots — MCMC-combos","text":"Combination plots","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-combos.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Combination plots — MCMC-combos","text":"","code":"mcmc_combo(x, combo = c(\"dens\", \"trace\"), ..., widths = NULL, gg_theme = NULL)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-combos.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Combination plots — MCMC-combos","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. combo character vector least two elements. element combo corresponds column resulting graphic name one available MCMC functions (omitting mcmc_ prefix). ... Arguments passed plotting functions named combo. widths numeric vector length combo specifying relative column widths. example, plot two columns, widths = c(2, 1) allocate space first column factor 2 (widths = c(.3, .15), etc.). default, NULL, allocates horizontal space column. gg_theme Unlike bayesplot functions, mcmc_combo returns gtable object rather ggplot object, theme objects added directly returned plot object. gg_theme argument helps get around problem accepting ggplot2 theme object added plots combining gtable object returned. can theme object created call ggplot2::theme() one bayesplot convenience functions, e.g. legend_none() (see Examples section, ).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-combos.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Combination plots — MCMC-combos","text":"gtable object (result calling gridExtra::arrangeGrob()) length(combo) columns row parameter.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-combos.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Combination plots — MCMC-combos","text":"","code":"# some parameter draws to use for demonstration x <- example_mcmc_draws() dim(x) #> [1] 250   4   4 dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" #>   mcmc_combo(x, pars = c(\"alpha\", \"sigma\"))  mcmc_combo(x, pars = c(\"alpha\", \"sigma\"), widths = c(1, 2))   # \\donttest{ # change second plot, show log(sigma) instead of sigma, # and remove the legends color_scheme_set(\"mix-blue-red\") mcmc_combo(  x,  combo = c(\"dens_overlay\", \"trace\"),  pars = c(\"alpha\", \"sigma\"),  transformations = list(sigma = \"log\"),  gg_theme = legend_none() )   # same thing but this time also change the entire ggplot theme mcmc_combo(  x,  combo = c(\"dens_overlay\", \"trace\"),  pars = c(\"alpha\", \"sigma\"),  transformations = list(sigma = \"log\"),  gg_theme = ggplot2::theme_gray() + legend_none() )  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":null,"dir":"Reference","previous_headings":"","what":"General MCMC diagnostics — MCMC-diagnostics","title":"General MCMC diagnostics — MCMC-diagnostics","text":"Plots Rhat statistics, ratios effective sample size total sample size, autocorrelation MCMC draws. See Plot Descriptions section, , details. models fit using -U-Turn-Sampler, see also MCMC-nuts additional MCMC diagnostic plots.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"General MCMC diagnostics — MCMC-diagnostics","text":"","code":"mcmc_rhat(rhat, ..., size = NULL)  mcmc_rhat_hist(rhat, ..., binwidth = NULL, bins = NULL, breaks = NULL)  mcmc_rhat_data(rhat, ...)  mcmc_neff(ratio, ..., size = NULL)  mcmc_neff_hist(ratio, ..., binwidth = NULL, bins = NULL, breaks = NULL)  mcmc_neff_data(ratio, ...)  mcmc_acf(   x,   pars = character(),   regex_pars = character(),   ...,   facet_args = list(),   lags = 20,   size = NULL )  mcmc_acf_bar(   x,   pars = character(),   regex_pars = character(),   ...,   facet_args = list(),   lags = 20 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"General MCMC diagnostics — MCMC-diagnostics","text":"rhat vector R-hat estimates. ... Currently ignored. size Optional values override ggplot2::geom_point()'s default size (mcmc_rhat(), mcmc_neff()) ggplot2::geom_line()'s default line width (mcmc_acf()). binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. ratio vector ratios effective sample size estimates total sample size. See neff_ratio(). x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". lags number lags show autocorrelation plot.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"General MCMC diagnostics — MCMC-diagnostics","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"General MCMC diagnostics — MCMC-diagnostics","text":"mcmc_rhat(), mcmc_rhat_hist() Rhat values either points histogram. Values colored using different shades (lighter better). chosen thresholds somewhat arbitrary, can useful guidelines practice. light: 1.05 (good) mid: 1.05 1.1 (ok) dark: 1.1 (high) mcmc_neff(), mcmc_neff_hist() Ratios effective sample size total sample size either points histogram. Values colored using different shades (lighter better). chosen thresholds somewhat arbitrary, can useful guidelines practice. light: 0.5 1 (high) mid: 0.1 0.5 (good) dark: 0.1 (low) mcmc_acf(), mcmc_acf_bar() Grid autocorrelation plots chain parameter. lags argument gives maximum number lags calculate autocorrelation function. mcmc_acf() line plot whereas mcmc_acf_bar() barplot.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"General MCMC diagnostics — MCMC-diagnostics","text":"Stan Development Team. Stan Modeling Language Users Guide Reference Manual. https://mc-stan.org/users/documentation/ Gelman, . Rubin, D. B. (1992). Inference iterative simulation using multiple sequences. Statistical Science. 7(4), 457–472.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-diagnostics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"General MCMC diagnostics — MCMC-diagnostics","text":"","code":"# autocorrelation x <- example_mcmc_draws() dim(x) #> [1] 250   4   4 dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" #>   color_scheme_set(\"green\") mcmc_acf(x, pars = c(\"alpha\", \"beta[1]\"))  # \\donttest{ color_scheme_set(\"pink\") (p <- mcmc_acf_bar(x, pars = c(\"alpha\", \"beta[1]\")))   # add horiztonal dashed line at 0.5 p + hline_at(0.5, linetype = 2, size = 0.15, color = \"gray\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> ℹ The deprecated feature was likely used in the bayesplot package. #>   Please report the issue at <https://github.com/stan-dev/bayesplot/issues/>.  # }  # fake rhat values to use for demonstration rhat <- c(runif(100, 1, 1.15)) mcmc_rhat_hist(rhat) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_rhat(rhat)   # lollipops color_scheme_set(\"purple\") mcmc_rhat(rhat[1:10], size = 5)   color_scheme_set(\"blue\") mcmc_rhat(runif(1000, 1, 1.07))  mcmc_rhat(runif(1000, 1, 1.3)) + legend_move(\"top\") # add legend above plot   # fake neff ratio values to use for demonstration ratio <- c(runif(100, 0, 1)) mcmc_neff_hist(ratio) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_neff(ratio)   # \\dontrun{ # Example using rstanarm model (requires rstanarm package) library(rstanarm) #> Loading required package: Rcpp #> This is rstanarm version 2.32.2 #> - See https://mc-stan.org/rstanarm/articles/priors for changes to default priors! #> - Default priors may change, so it's safest to specify priors, even if equivalent to the defaults. #> - For execution on a local, multicore CPU with excess RAM we recommend calling #>   options(mc.cores = parallel::detectCores())  # intentionally use small 'iter' so there are some # problems with rhat and neff for demonstration fit <- stan_glm(mpg ~ ., data = mtcars, iter = 50, refresh = 0) #> Warning: The largest R-hat is 1.11, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess rhats <- rhat(fit) ratios <- neff_ratio(fit) mcmc_rhat(rhats)  mcmc_neff(ratios, size = 3)   # there's a small enough number of parameters in the # model that we can display their names on the y-axis mcmc_neff(ratios) + yaxis_text(hjust = 1)   # can also look at autocorrelation draws <- as.array(fit) mcmc_acf(draws, pars = c(\"wt\", \"cyl\"), lags = 10)   # increase number of iterations and plots look much better fit2 <- update(fit, iter = 500) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess mcmc_rhat(rhat(fit2))  mcmc_neff(neff_ratio(fit2))  mcmc_acf(as.array(fit2), pars = c(\"wt\", \"cyl\"), lags = 10)  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"Various types histograms kernel density plots MCMC draws. See Plot Descriptions section, , details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"","code":"mcmc_hist(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE,   alpha = 1 )  mcmc_dens(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   trim = FALSE,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL,   alpha = 1 )  mcmc_hist_by_chain(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   freq = TRUE,   alpha = 1 )  mcmc_dens_overlay(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   color_chains = TRUE,   trim = FALSE,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_dens_chains(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   color_chains = TRUE,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_dens_chains_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_violin(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   probs = c(0.1, 0.5, 0.9) )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. transformations Optionally, transformations apply parameters plotting. transformations function single string naming function function used transform parameters. apply transformations particular parameters, transformations argument can named list length equal number parameters transformed. Currently univariate transformations scalar parameters can specified (multivariate transformations implemented future release). transformations list, name list element parameter name content list element function (item match function via match.fun(), e.g. string naming function). function specified name string (e.g. \"log\"), can used construct new parameter label appropriate parameter (e.g. \"log(sigma)\"). function specified (e.g. log function(x) log(x)) \"t\" used new parameter label indicate parameter transformed (e.g. \"t(sigma)\"). Note: due partial argument matching transformations can abbreviated convenience interactive use (e.g., transform). ... Currently ignored. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) alpha Passed geom control transparency. trim logical scalar passed ggplot2::geom_density(). bw, adjust, kernel, n_dens Optional arguments passed stats::density() override default kernel density estimation parameters. n_dens defaults 1024. color_chains Option whether separately color chains. probs numeric vector passed ggplot2::geom_violin()'s draw_quantiles argument specify quantiles draw horizontal lines. Set NULL remove lines.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"mcmc_hist() Histograms posterior draws chains merged. mcmc_dens() Kernel density plots posterior draws chains merged. mcmc_hist_by_chain() Histograms posterior draws chains separated via faceting. mcmc_dens_overlay() Kernel density plots posterior draws chains separated overlaid single plot. mcmc_violin() density estimate chain plotted violin horizontal lines notable quantiles. mcmc_dens_chains() Ridgeline kernel density plots posterior draws chains separated overlaid single plot. mcmc_dens_overlay() parameters appear separate facets; mcmc_dens_chains() appear panel can overlap vertically.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Histograms and kernel density plots of MCMC draws — MCMC-distributions","text":"","code":"set.seed(9262017) # some parameter draws to use for demonstration x <- example_mcmc_draws() dim(x) #> [1] 250   4   4 dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" #>   ################## ### Histograms ### ##################  # histograms of all parameters color_scheme_set(\"brightblue\") mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # histograms of some parameters color_scheme_set(\"pink\") mcmc_hist(x, pars = c(\"alpha\", \"beta[2]\")) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # \\donttest{ mcmc_hist(x, pars = \"sigma\", regex_pars = \"beta\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # } # example of using 'transformations' argument to plot log(sigma), # and parsing facet labels (e.g. to get greek letters for parameters) mcmc_hist(x, transformations = list(sigma = \"log\"),           facet_args = list(labeller = ggplot2::label_parsed)) +           facet_text(size = 15) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # \\donttest{ # instead of list(sigma = \"log\"), you could specify the transformation as # list(sigma = log) or list(sigma = function(x) log(x)), but then the # label for the transformed sigma is 't(sigma)' instead of 'log(sigma)' mcmc_hist(x, transformations = list(sigma = log)) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # separate histograms by chain color_scheme_set(\"pink\") mcmc_hist_by_chain(x, regex_pars = \"beta\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }  ################# ### Densities ### #################  mcmc_dens(x, pars = c(\"sigma\", \"beta[2]\"),           facet_args = list(nrow = 2))  # \\donttest{ # separate and overlay chains color_scheme_set(\"mix-teal-pink\") mcmc_dens_overlay(x, pars = c(\"sigma\", \"beta[2]\"),                   facet_args = list(nrow = 2)) +                   facet_text(size = 14)  x2 <- example_mcmc_draws(params = 6) mcmc_dens_chains(x2, pars = c(\"beta[1]\", \"beta[2]\", \"beta[3]\"))  # } # separate chains as violin plots color_scheme_set(\"green\") mcmc_violin(x) + panel_bg(color = \"gray20\", size = 2, fill = \"gray30\") #> Warning: The `size` argument of `element_rect()` is deprecated as of ggplot2 3.4.0. #> ℹ Please use the `linewidth` argument instead. #> ℹ The deprecated feature was likely used in the bayesplot package. #>   Please report the issue at <https://github.com/stan-dev/bayesplot/issues/>."},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot interval estimates from MCMC draws — MCMC-intervals","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"Plot central (quantile-based) posterior interval estimates MCMC draws. See Plot Descriptions section, , details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"","code":"mcmc_intervals(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   prob = 0.5,   prob_outer = 0.9,   point_est = c(\"median\", \"mean\", \"none\"),   outer_size = 0.5,   inner_size = 2,   point_size = 4,   rhat = numeric() )  mcmc_areas(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   area_method = c(\"equal area\", \"equal height\", \"scaled height\"),   prob = 0.5,   prob_outer = 1,   point_est = c(\"median\", \"mean\", \"none\"),   rhat = numeric(),   border_size = NULL,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_areas_ridges(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   prob_outer = 1,   prob = 1,   border_size = NULL,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_intervals_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   prob = 0.5,   prob_outer = 0.9,   point_est = c(\"median\", \"mean\", \"none\"),   rhat = numeric() )  mcmc_areas_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   prob = 0.5,   prob_outer = 1,   point_est = c(\"median\", \"mean\", \"none\"),   rhat = numeric(),   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )  mcmc_areas_ridges_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   prob_outer = 1,   prob = 1,   bw = NULL,   adjust = NULL,   kernel = NULL,   n_dens = NULL )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. transformations Optionally, transformations apply parameters plotting. transformations function single string naming function function used transform parameters. apply transformations particular parameters, transformations argument can named list length equal number parameters transformed. Currently univariate transformations scalar parameters can specified (multivariate transformations implemented future release). transformations list, name list element parameter name content list element function (item match function via match.fun(), e.g. string naming function). function specified name string (e.g. \"log\"), can used construct new parameter label appropriate parameter (e.g. \"log(sigma)\"). function specified (e.g. log function(x) log(x)) \"t\" used new parameter label indicate parameter transformed (e.g. \"t(sigma)\"). Note: due partial argument matching transformations can abbreviated convenience interactive use (e.g., transform). ... Currently unused. prob probability mass include inner interval (mcmc_intervals()) shaded region (mcmc_areas()). default 0.5 (50% interval) 1 mcmc_areas_ridges(). prob_outer probability mass include outer interval. default 0.9 mcmc_intervals() (90% interval) 1 mcmc_areas() mcmc_areas_ridges(). point_est point estimate show. Either \"median\" (default), \"mean\", \"none\". inner_size, outer_size mcmc_intervals(), size inner interval segments, respectively. point_size mcmc_intervals(), size point estimate. rhat optional numeric vector R-hat estimates, one element per parameter included x. rhat provided, intervals/areas point estimates resulting plot colored based R-hat value. See rhat() methods extracting R-hat estimates. area_method constrain areas mcmc_areas(). default \"equal area\", setting density curves area. \"equal height\", curves scaled highest points across curves height. method \"scaled height\" tries compromise two: heights \"equal height\" scaled using height*sqrt(height) border_size mcmc_areas() mcmc_areas_ridges(), size ridgelines. bw, adjust, kernel, n_dens Optional arguments passed stats::density() override default kernel density estimation parameters. n_dens defaults 1024.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"mcmc_intervals() Plots uncertainty intervals computed posterior draws chains merged. mcmc_areas() Density plots computed posterior draws chains merged, uncertainty intervals shown shaded areas curves. mcmc_areas_ridges() Density plot, mcmc_areas(), drawn overlapping ridgelines. plot provides compact display (hierarchically) related distributions.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot interval estimates from MCMC draws — MCMC-intervals","text":"","code":"set.seed(9262017)  # load ggplot2 to use its functions to modify our plots library(ggplot2)  # some parameter draws to use for demonstration x <- example_mcmc_draws(params = 6) dim(x) #> [1] 250   4   6 dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" #>   color_scheme_set(\"brightblue\") mcmc_intervals(x)  mcmc_intervals(x, pars = c(\"beta[1]\", \"beta[2]\"))  mcmc_areas(x, regex_pars = \"beta\\\\[[1-3]\\\\]\",  prob = 0.8) +  labs(    title = \"Posterior distributions\",    subtitle = \"with medians and 80% intervals\"  )   color_scheme_set(\"red\") p <- mcmc_areas(    x,    pars = c(\"alpha\", \"beta[4]\"),    prob = 2/3,    prob_outer = 0.9,    point_est = \"mean\",    border_size = 1.5 # make the ridgelines fatter ) plot(p)   # \\donttest{ # control spacing at top and bottom of plot # see ?ggplot2::expansion p + scale_y_discrete(   limits = c(\"beta[4]\", \"alpha\"),   expand = expansion(add = c(1, 2)) ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.  p + scale_y_discrete(   limits = c(\"beta[4]\", \"alpha\"),   expand = expansion(add = c(.1, .3)) ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   # relabel parameters p + scale_y_discrete(   labels = c(\"alpha\" = \"param label 1\",              \"beta[4]\" = \"param label 2\") ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   # relabel parameters and define the order p + scale_y_discrete(   labels = c(\"alpha\" = \"param label 1\",              \"beta[4]\" = \"param label 2\"),   limits = c(\"beta[4]\", \"alpha\") ) #> Scale for y is already present. #> Adding another scale for y, which will replace the existing scale.   # color by rhat value color_scheme_set(\"blue\") fake_rhat_values <- c(1, 1.07, 1.3, 1.01, 1.15, 1.005) mcmc_intervals(x, rhat = fake_rhat_values)   # get the dataframe that is used in the plotting functions mcmc_intervals_data(x) #> # A tibble: 6 × 9 #>   parameter outer_width inner_width point_est      ll       l       m      h #>   <fct>           <dbl>       <dbl> <chr>       <dbl>   <dbl>   <dbl>  <dbl> #> 1 alpha             0.9         0.5 median    -42.7   -28.7   -18.5   -7.46  #> 2 sigma             0.9         0.5 median     17.1    17.6    18.0   18.4   #> 3 beta[1]           0.9         0.5 median     -0.165   0.136   0.358  0.601 #> 4 beta[2]           0.9         0.5 median     -0.722  -0.578  -0.469 -0.362 #> 5 beta[3]           0.9         0.5 median      0.718   0.858   0.950  1.05  #> 6 beta[4]           0.9         0.5 median     24.9    39.1    49.2   59.4   #> # ℹ 1 more variable: hh <dbl> mcmc_intervals_data(x, rhat = fake_rhat_values) #> # A tibble: 6 × 12 #>   parameter outer_width inner_width point_est      ll       l       m      h #>   <fct>           <dbl>       <dbl> <chr>       <dbl>   <dbl>   <dbl>  <dbl> #> 1 alpha             0.9         0.5 median    -42.7   -28.7   -18.5   -7.46  #> 2 sigma             0.9         0.5 median     17.1    17.6    18.0   18.4   #> 3 beta[1]           0.9         0.5 median     -0.165   0.136   0.358  0.601 #> 4 beta[2]           0.9         0.5 median     -0.722  -0.578  -0.469 -0.362 #> 5 beta[3]           0.9         0.5 median      0.718   0.858   0.950  1.05  #> 6 beta[4]           0.9         0.5 median     24.9    39.1    49.2   59.4   #> # ℹ 4 more variables: hh <dbl>, rhat_value <dbl>, rhat_rating <fct>, #> #   rhat_description <chr> mcmc_areas_data(x, pars = \"alpha\") #> # A tibble: 2,091 × 7 #>    parameter interval interval_width     x density scaled_density #>    <fct>     <chr>             <dbl> <dbl>   <dbl>          <dbl> #>  1 alpha     inner               0.5 -28.7  0.0220          0.865 #>  2 alpha     inner               0.5 -28.7  0.0221          0.865 #>  3 alpha     inner               0.5 -28.7  0.0221          0.866 #>  4 alpha     inner               0.5 -28.7  0.0221          0.866 #>  5 alpha     inner               0.5 -28.6  0.0221          0.867 #>  6 alpha     inner               0.5 -28.6  0.0221          0.867 #>  7 alpha     inner               0.5 -28.6  0.0221          0.868 #>  8 alpha     inner               0.5 -28.6  0.0221          0.868 #>  9 alpha     inner               0.5 -28.5  0.0222          0.869 #> 10 alpha     inner               0.5 -28.5  0.0222          0.870 #> # ℹ 2,081 more rows #> # ℹ 1 more variable: plotting_density <dbl>  color_scheme_set(\"gray\") p <- mcmc_areas(x, pars = c(\"alpha\", \"beta[4]\"), rhat = c(1, 1.1)) p + legend_move(\"bottom\")  p + legend_move(\"none\") # or p + legend_none()   # }  # Different area calculations b3 <- c(\"beta[1]\", \"beta[2]\", \"beta[3]\")  mcmc_areas(x, pars = b3, area_method = \"equal area\") +   labs(     title = \"Curves have same area\",     subtitle = \"A wide, uncertain interval is spread thin when areas are equal\"    )   mcmc_areas(x, pars = b3, area_method = \"equal height\") +   labs(     title = \"Curves have same maximum height\",     subtitle = \"Local curvature is clearer but more uncertain curves use more area\"   )   mcmc_areas(x, pars = b3, area_method = \"scaled height\") +   labs(     title = \"Same maximum heights but heights scaled by square-root\",     subtitle = \"Compromise: Local curvature is accentuated and less area is used\"    )   # \\donttest{ # apply transformations mcmc_intervals(   x,   pars = c(\"beta[2]\", \"sigma\"),   transformations = list(\"sigma\" = \"log\", \"beta[2]\" = function(x) x + 3) )   # apply same transformation to all selected parameters mcmc_intervals(x, regex_pars = \"beta\", transformations = \"exp\")  # }  # \\dontrun{ # example using fitted model from rstanarm package library(rstanarm) fit <- stan_glm(  mpg ~ 0 + wt + factor(cyl),  data = mtcars,  iter = 500,  refresh = 0 ) #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess x <- as.matrix(fit)  color_scheme_set(\"teal\") mcmc_intervals(x, point_est = \"mean\", prob = 0.8, prob_outer = 0.95)  mcmc_areas(x, regex_pars = \"cyl\", bw = \"SJ\",            rhat = rhat(fit, regex_pars = \"cyl\"))  # }  # \\dontrun{ # Example of hierarchically related parameters # plotted with ridgelines m <- shinystan::eight_schools@posterior_sample mcmc_areas_ridges(m, pars = \"mu\", regex_pars = \"theta\", border_size = 0.75) +   ggtitle(\"Treatment effect on eight schools (Rubin, 1981)\")  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":null,"dir":"Reference","previous_headings":"","what":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"Diagnostic plots -U-Turn-Sampler (NUTS), default MCMC algorithm used Stan. See Plot Descriptions section, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"","code":"mcmc_nuts_acceptance(   x,   lp,   chain = NULL,   ...,   binwidth = NULL,   bins = NULL,   breaks = NULL )  mcmc_nuts_divergence(x, lp, chain = NULL, ...)  mcmc_nuts_stepsize(x, lp, chain = NULL, ...)  mcmc_nuts_treedepth(x, lp, chain = NULL, ...)  mcmc_nuts_energy(   x,   ...,   binwidth = NULL,   bins = NULL,   breaks = NULL,   alpha = 0.5,   merge_chains = FALSE )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"x molten data frame NUTS sampler parameters, either created nuts_params() form object returned nuts_params(). lp molten data frame draws log-posterior , commonly, quantity equal log-posterior constant. lp either created via log_posterior() object form object returned log_posterior(). chain positive integer selecting particular chain. default (NULL) merge chains plotting. chain = k plot chain k overlaid (darker shade transparency) top plot chains. chain argument used mcmc_nuts_energy(). ... Currently ignored. binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. alpha mcmc_nuts_energy() , transparency (alpha) level [0,1] used overlaid histogram. merge_chains mcmc_nuts_energy() , chains merged displayed separately? default FALSE, .e., show chains separately.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"gtable object (result calling gridExtra::arrangeGrob()) created several ggplot objects, except mcmc_nuts_energy(), returns ggplot object.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"quick-definitions","dir":"Reference","previous_headings":"","what":"Quick Definitions","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"details see Stan Development Team (2016) Betancourt (2017). accept_stat__: average acceptance probabilities possible samples proposed tree. divergent__: number leapfrog transitions diverging error. NUTS terminates first divergence either 0 1 iteration. stepsize__: step size used NUTS Hamiltonian simulation. treedepth__: depth tree used NUTS, log (base 2) number leapfrog steps taken Hamiltonian simulation. energy__: value Hamiltonian (additive constant) iteration.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"mcmc_nuts_acceptance() Three plots: Histogram accept_stat__ vertical lines indicating mean (solid line) median (dashed line). Histogram lp__ vertical lines indicating mean (solid line) median (dashed line). Scatterplot accept_stat__ vs lp__. mcmc_nuts_divergence() Two plots: Violin plots lp__|divergent__=1 lp__|divergent__=0. Violin plots accept_stat__|divergent__=1 accept_stat__|divergent__=0. mcmc_nuts_stepsize() Two plots: Violin plots lp__ chain ordered stepsize__ value. Violin plots accept_stat__ chain ordered stepsize__ value. mcmc_nuts_treedepth() Three plots: Violin plots lp__ value treedepth__. Violin plots accept_stat__ value treedepth__. Histogram treedepth__. mcmc_nuts_energy() Overlaid histograms showing energy__ vs change energy__. See Betancourt (2016) details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"Betancourt, M. (2017). conceptual introduction Hamiltonian Monte Carlo. https://arxiv.org/abs/1701.02434 Betancourt, M. Girolami, M. (2013). Hamiltonian Monte Carlo hierarchical models. https://arxiv.org/abs/1312.0906 Hoffman, M. D. Gelman, . (2014). -U-Turn Sampler: adaptively setting path lengths Hamiltonian Monte Carlo. Journal Machine Learning Research. 15:1593–1623. Stan Development Team. Stan Modeling Language Users Guide Reference Manual. https://mc-stan.org/users/documentation/","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-nuts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Diagnostic plots for the No-U-Turn-Sampler (NUTS) — MCMC-nuts","text":"","code":"# \\dontrun{ library(ggplot2) library(rstanarm) fit <- stan_glm(mpg ~ wt + am, data = mtcars, iter = 1000, refresh = 0) np <- nuts_params(fit) lp <- log_posterior(fit)  color_scheme_set(\"brightblue\") mcmc_nuts_acceptance(np, lp) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_nuts_acceptance(np, lp, chain = 2) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   mcmc_nuts_divergence(np, lp)  mcmc_nuts_stepsize(np, lp)  mcmc_nuts_treedepth(np, lp)    color_scheme_set(\"red\") mcmc_nuts_energy(np) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_nuts_energy(np, merge_chains = TRUE, binwidth = .15)  mcmc_nuts_energy(np) +  facet_wrap(vars(Chain), nrow = 1) +  coord_fixed(ratio = 150) +  ggtitle(\"NUTS Energy Diagnostic\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots for Markov chain Monte Carlo simulations — MCMC-overview","title":"Plots for Markov chain Monte Carlo simulations — MCMC-overview","text":"bayesplot MCMC module provides various plotting functions creating graphical displays Markov chain Monte Carlo (MCMC) simulations. MCMC plotting functions section, , provides links documentation various categories MCMC plots. Currently MCMC plotting functions accept posterior draws provided one following formats: 3-D array: array dimensions Iteration, Chain, Parameter order. list: list matrices, matrix corresponds Markov chain. matrices number iterations (rows) parameters (columns), parameters names order. matrix (2-D array): matrix one column per parameter. using matrix single Markov chain chains already merged (stacked). data frame: two types data frames allowed. Either data frame one column per parameter (single chain chains already merged), data frame one column per parameter plus additional column \"Chain\" contains chain number (integer) corresponding row data frame. draws: draws formats supported posterior package. Note: typically user include warmup iterations object passed bayesplot plotting functions, although certain plots (e.g. trace plots) can occasionally useful include warmup iterations diagnostic purposes.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-overview.html","id":"mcmc-plotting-functions","dir":"Reference","previous_headings":"","what":"MCMC plotting functions","title":"Plots for Markov chain Monte Carlo simulations — MCMC-overview","text":"Posterior distributions: Histograms kernel density plots parameter draws, optionally showing Markov chain separately. Uncertainty intervals: Uncertainty intervals computed parameter draws. Trace plots: Times series parameter draws, optionally including HMC/NUTS diagnostic information. Scatterplots: Scatterplots, heatmaps, pairs plots parameter draws, optionally including HMC/NUTS diagnostic information. Parallel coordinates plots: Parallel coordinates plot MCMC draws (one dimension per parameter), optionally including HMC/NUTS diagnostic information. Combos: Combination plots (e.g. trace plot + histogram). General MCMC diagnostics: MCMC diagnostic plots including R-hat, effective sample size, autocorrelation. NUTS diagnostics: Special diagnostic plots -U-Turn Sampler. Comparisons \"true\" values: Plots comparing MCMC estimates \"true\" parameter values (e.g., values used simulate data).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-overview.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots for Markov chain Monte Carlo simulations — MCMC-overview","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":null,"dir":"Reference","previous_headings":"","what":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"Parallel coordinates plot MCMC draws (one dimension per parameter). See Plot Descriptions section details, see Gabry et al. (2019) background real example.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"","code":"mcmc_parcoord(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   size = 0.2,   alpha = 0.3,   np = NULL,   np_style = parcoord_style_np() )  mcmc_parcoord_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   np = NULL )  parcoord_style_np(div_color = \"red\", div_size = 0.2, div_alpha = 0.2)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. transformations Optionally, transformations apply parameters plotting. transformations function single string naming function function used transform parameters. apply transformations particular parameters, transformations argument can named list length equal number parameters transformed. Currently univariate transformations scalar parameters can specified (multivariate transformations implemented future release). transformations list, name list element parameter name content list element function (item match function via match.fun(), e.g. string naming function). function specified name string (e.g. \"log\"), can used construct new parameter label appropriate parameter (e.g. \"log(sigma)\"). function specified (e.g. log function(x) log(x)) \"t\" used new parameter label indicate parameter transformed (e.g. \"t(sigma)\"). Note: due partial argument matching transformations can abbreviated convenience interactive use (e.g., transform). ... Currently ignored. size, alpha Arguments passed ggplot2::geom_line(). np models fit using NUTS (generally, symplectic integrator), optional data frame providing NUTS diagnostic information. data frame object returned nuts_params() one structure. np_style call parcoord_style_np() helper function specify arguments controlling appearance superimposed lines representing NUTS diagnostics (case divergences) np argument specified. div_color, div_size, div_alpha Optional arguments parcoord_style_np() helper function eventually passed ggplot2::geom_line() np argument also specified. control color, size, transparency specifications showing divergences plot. default values displayed Usage section .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"mcmc_parcoord() Parallel coordinates plot MCMC draws. one dimension per parameter along horizontal axis set connected line segments represents single MCMC draw (.e., vector length equal number parameters). parallel coordinates plot useful optional HMC/NUTS diagnostic information provided via np argument. case divergences highlighted plot. appearance divergences can customized using np_style argument parcoord_style_np helper function. version plot parallel coordinates plot described Gabry et al. (2019). plotted model parameters different scales transformations argument can useful. example, standardize variables plotting use function (x - mean(x))/sd(x) specifying transformations argument mcmc_parcoord. See Examples section .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Hartikainen, . (2017, Aug 23). Concentration divergences (Msg 21). Message posted Stan Forums: https://discourse.mc-stan.org/t/concentration--divergences/1590/21.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-parcoord.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parallel coordinates plot of MCMC draws — MCMC-parcoord","text":"","code":"color_scheme_set(\"pink\") x <- example_mcmc_draws(params = 5) mcmc_parcoord(x)  mcmc_parcoord(x, regex_pars = \"beta\")   # \\dontrun{ # Example using a Stan demo model library(rstan) #> Loading required package: StanHeaders #>  #> rstan version 2.32.7 (Stan version 2.32.2) #> For execution on a local, multicore CPU with excess RAM we recommend calling #> options(mc.cores = parallel::detectCores()). #> To avoid recompilation of unchanged Stan programs, we recommend calling #> rstan_options(auto_write = TRUE) #> For within-chain threading using `reduce_sum()` or `map_rect()` Stan functions, #> change `threads_per_chain` option: #> rstan_options(threads_per_chain = 1) fit <- stan_demo(\"eight_schools\") #>  #> > J <- 8 #>  #> > y <- c(28, 8, -3, 7, -1, 1, 18, 12) #>  #> > sigma <- c(15, 10, 16, 11, 9, 11, 10, 18) #>  #> > tau <- 25 #>  #> SAMPLING FOR MODEL 'eight_schools' NOW (CHAIN 1). #> Chain 1:  #> Chain 1: Gradient evaluation took 1.3e-05 seconds #> Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0.13 seconds. #> Chain 1: Adjust your expectations accordingly! #> Chain 1:  #> Chain 1:  #> Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 1: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 1: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 1: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 1: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 1: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 1: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 1: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 1: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 0.036 seconds (Warm-up) #> Chain 1:                0.022 seconds (Sampling) #> Chain 1:                0.058 seconds (Total) #> Chain 1:  #>  #> SAMPLING FOR MODEL 'eight_schools' NOW (CHAIN 2). #> Chain 2:  #> Chain 2: Gradient evaluation took 2e-06 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 2: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 2: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 2: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 2: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 2: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 2: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 2: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 2: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 0.045 seconds (Warm-up) #> Chain 2:                0.031 seconds (Sampling) #> Chain 2:                0.076 seconds (Total) #> Chain 2:  #>  #> SAMPLING FOR MODEL 'eight_schools' NOW (CHAIN 3). #> Chain 3:  #> Chain 3: Gradient evaluation took 2e-06 seconds #> Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0.02 seconds. #> Chain 3: Adjust your expectations accordingly! #> Chain 3:  #> Chain 3:  #> Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 3: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 3: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 3: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 3: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 3: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 3: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 3: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 3: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 3:  #> Chain 3:  Elapsed Time: 0.041 seconds (Warm-up) #> Chain 3:                0.028 seconds (Sampling) #> Chain 3:                0.069 seconds (Total) #> Chain 3:  #>  #> SAMPLING FOR MODEL 'eight_schools' NOW (CHAIN 4). #> Chain 4:  #> Chain 4: Gradient evaluation took 3e-06 seconds #> Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0.03 seconds. #> Chain 4: Adjust your expectations accordingly! #> Chain 4:  #> Chain 4:  #> Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup) #> Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup) #> Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup) #> Chain 4: Iteration:  600 / 2000 [ 30%]  (Warmup) #> Chain 4: Iteration:  800 / 2000 [ 40%]  (Warmup) #> Chain 4: Iteration: 1000 / 2000 [ 50%]  (Warmup) #> Chain 4: Iteration: 1001 / 2000 [ 50%]  (Sampling) #> Chain 4: Iteration: 1200 / 2000 [ 60%]  (Sampling) #> Chain 4: Iteration: 1400 / 2000 [ 70%]  (Sampling) #> Chain 4: Iteration: 1600 / 2000 [ 80%]  (Sampling) #> Chain 4: Iteration: 1800 / 2000 [ 90%]  (Sampling) #> Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling) #> Chain 4:  #> Chain 4:  Elapsed Time: 0.033 seconds (Warm-up) #> Chain 4:                0.124 seconds (Sampling) #> Chain 4:                0.157 seconds (Total) #> Chain 4:  #> Warning: There were 109 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: There were 1 chains where the estimated Bayesian Fraction of Missing Information was low. See #> https://mc-stan.org/misc/warnings.html#bfmi-low #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess draws <- as.array(fit, pars = c(\"mu\", \"tau\", \"theta\", \"lp__\")) np <- nuts_params(fit) str(np) #> 'data.frame':\t24000 obs. of  4 variables: #>  $ Chain    : int  1 1 1 1 1 1 1 1 1 1 ... #>  $ Iteration: int  1 2 3 4 5 6 7 8 9 10 ... #>  $ Parameter: Factor w/ 6 levels \"accept_stat__\",..: 1 1 1 1 1 1 1 1 1 1 ... #>  $ Value    : num  0.995 0.987 0.835 0.855 0.948 ... levels(np$Parameter) #> [1] \"accept_stat__\" \"stepsize__\"    \"treedepth__\"   \"n_leapfrog__\"  #> [5] \"divergent__\"   \"energy__\"       color_scheme_set(\"brightblue\") mcmc_parcoord(draws, alpha = 0.05)  mcmc_parcoord(draws, np = np)   # customize appearance of divergences color_scheme_set(\"darkgray\") div_style <- parcoord_style_np(div_color = \"green\", div_size = 0.05, div_alpha = 0.4) mcmc_parcoord(draws, size = 0.25, alpha = 0.1,               np = np, np_style = div_style)   # to use a transformation (e.g., standardizing all the variables can be helpful) # specify the 'transformations' argument (though partial argument name # matching means we can just use 'trans' or 'transform') mcmc_parcoord(   draws,   transform = function(x) {(x - mean(x)) / sd(x)},   size = 0.25,   alpha = 0.1,   np = np,   np_style = div_style  )   # mcmc_parcoord_data returns just the data in a conventient form for plotting d <- mcmc_parcoord_data(x, np = np) head(d) #> # A tibble: 6 × 4 #>    Draw Parameter  Value Divergent #>   <int> <fct>      <dbl>     <dbl> #> 1     1 alpha     -14.1          0 #> 2     2 alpha     -20.0          0 #> 3     3 alpha     -21.0          0 #> 4     4 alpha     -36.3          0 #> 5     5 alpha      -7.58         0 #> 6     6 alpha     -10.4          0 tail(d) #> # A tibble: 6 × 4 #>    Draw Parameter Value Divergent #>   <int> <fct>     <dbl>     <dbl> #> 1   995 beta[3]   1.04          0 #> 2   996 beta[3]   1.07          0 #> 3   997 beta[3]   0.983         0 #> 4   998 beta[3]   0.821         0 #> 5   999 beta[3]   0.903         0 #> 6  1000 beta[3]   0.858         0 # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":null,"dir":"Reference","previous_headings":"","what":"Compare MCMC estimates to ","title":"Compare MCMC estimates to ","text":"Plots comparing MCMC estimates \"true\" parameter values. fitting model real data useful simulate data according model using known (fixed) parameter values check \"true\" parameter values (approximately) recovered fitting model simulated data. See Plot Descriptions section, , details available plots.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compare MCMC estimates to ","text":"","code":"mcmc_recover_intervals(   x,   true,   batch = rep(1, length(true)),   ...,   facet_args = list(),   prob = 0.5,   prob_outer = 0.9,   point_est = c(\"median\", \"mean\", \"none\"),   size = 4,   alpha = 1 )  mcmc_recover_scatter(   x,   true,   batch = rep(1, length(true)),   ...,   facet_args = list(),   point_est = c(\"median\", \"mean\"),   size = 3,   alpha = 1 )  mcmc_recover_hist(   x,   true,   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compare MCMC estimates to ","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. true numeric vector \"true\" values parameters x. one value true parameter included x order parameters true order parameters x. batch Optionally, vector-like object (numeric, character, integer, factor) used split parameters batches. batch specified, must length true order true. Parameters batch grouped together facet plot (see Examples section, ). default group parameters together single batch. Changing default useful parameters different scales, case batch can used group batches within makes sense use y-axis. ... Currently unused. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". prob probability mass include inner interval. default 0.5 (50% interval). prob_outer probability mass include outer interval. default 0.9 (90% interval). point_est point estimate show. Either \"median\" (default), \"mean\", \"none\". size, alpha Passed ggplot2::geom_point() control appearance plotted points. binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compare MCMC estimates to ","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Compare MCMC estimates to ","text":"mcmc_recover_intervals() Central intervals point estimates computed MCMC draws, \"true\" values plotted using different shape. mcmc_recover_scatter() Scatterplot posterior means (medians) \"true\" values. mcmc_recover_hist() Histograms draws parameter \"true\" value overlaid vertical line.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-recover.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compare MCMC estimates to ","text":"","code":"# \\dontrun{ library(rstanarm) alpha <- 1; beta <- rnorm(10, 0, 3); sigma <- 2 X <- matrix(rnorm(1000), 100, 10) y <- rnorm(100, mean = c(alpha + X %*% beta), sd = sigma) fit <- stan_glm(y ~ ., data = data.frame(y, X), refresh = 0) draws <- as.matrix(fit) print(colnames(draws)) #>  [1] \"(Intercept)\" \"X1\"          \"X2\"          \"X3\"          \"X4\"          #>  [6] \"X5\"          \"X6\"          \"X7\"          \"X8\"          \"X9\"          #> [11] \"X10\"         \"sigma\"       true <- c(alpha, beta, sigma)  mcmc_recover_intervals(draws, true)   # put the coefficients on X into the same batch mcmc_recover_intervals(draws, true, batch = c(1, rep(2, 10), 1))  # equivalent mcmc_recover_intervals(draws, true, batch = grepl(\"X\", colnames(draws)))  # same but facets stacked vertically mcmc_recover_intervals(draws, true,                        batch = grepl(\"X\", colnames(draws)),                        facet_args = list(ncol = 1),                        size = 3)   # each parameter in its own facet mcmc_recover_intervals(draws, true, batch = 1:ncol(draws))  # same but in a different order mcmc_recover_intervals(draws, true, batch = c(1, 3, 4, 2, 5:12))  # present as bias by centering with true values mcmc_recover_intervals(sweep(draws, 2, true), rep(0, ncol(draws))) + hline_0()    # scatterplot of posterior means vs true values mcmc_recover_scatter(draws, true, point_est = \"mean\")    # histograms of parameter draws with true value added as vertical line color_scheme_set(\"brightblue\") mcmc_recover_hist(draws[, 1:4], true[1:4]) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":null,"dir":"Reference","previous_headings":"","what":"Scatterplots of MCMC draws — MCMC-scatterplots","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"Scatterplots, hexagonal heatmaps, pairs plots MCMC draws. See Plot Descriptions section, , details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"","code":"mcmc_scatter(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   shape = 21,   size = 2.5,   alpha = 0.8,   np = NULL,   np_style = scatter_style_np() )  mcmc_hex(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   bins = 30,   binwidth = NULL )  mcmc_pairs(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   diag_fun = c(\"hist\", \"dens\"),   off_diag_fun = c(\"scatter\", \"hex\"),   diag_args = list(),   off_diag_args = list(),   condition = pairs_condition(),   lp = NULL,   np = NULL,   np_style = pairs_style_np(),   max_treedepth = NULL,   grid_args = list(),   save_gg_objects = TRUE )  scatter_style_np(   div_color = \"red\",   div_shape = 16,   div_size = 2.5,   div_alpha = 1 )  pairs_style_np(   div_color = \"red\",   div_shape = 4,   div_size = 1,   div_alpha = 1,   td_color = \"yellow2\",   td_shape = 3,   td_size = 1,   td_alpha = 1 )  pairs_condition(chains = NULL, draws = NULL, nuts = NULL)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. transformations Optionally, transformations apply parameters plotting. transformations function single string naming function function used transform parameters. apply transformations particular parameters, transformations argument can named list length equal number parameters transformed. Currently univariate transformations scalar parameters can specified (multivariate transformations implemented future release). transformations list, name list element parameter name content list element function (item match function via match.fun(), e.g. string naming function). function specified name string (e.g. \"log\"), can used construct new parameter label appropriate parameter (e.g. \"log(sigma)\"). function specified (e.g. log function(x) log(x)) \"t\" used new parameter label indicate parameter transformed (e.g. \"t(sigma)\"). Note: due partial argument matching transformations can abbreviated convenience interactive use (e.g., transform). ... Currently ignored. shape, size, alpha mcmc_scatter(), passed ggplot2::geom_point() control appearance points. np Optionally, data frame NUTS sampler parameters, either created nuts_params() form object returned nuts_params(). colors, shapes, sizes superimposed points can customized using np_style argument. np_style np specified, np_style can call scatter_style_np() helper function (mcmc_scatter()) pairs_style_np() helper function (mcmc_pairs()) specify arguments controlling appearance superimposed points representing NUTS diagnostic information. (Note: pairs_style_np() size arguments interpreted scaling factors). bins, binwidth mcmc_hex(), optional numeric vector length two passed ggplot2::geom_hex() override default binwidth vertical horizontal directions. diag_fun, off_diag_fun mcmc_pairs(), plotting function use plots along diagonal -diagonal plots, respectively. Currently diag_fun can \"hist\" histogram \"dens\" density, off_diag_fun can \"scatter\" scatterplot \"hex\" hexagonal heatmap. diag_args, off_diag_args mcmc_pairs(), optional named lists arguments pass functions implied diag_fun off_diag_fun arguments, respectively. example, off_diag_fun \"scatter\" off_diag_args include optional arguments mcmc_scatter() like size alpha. condition mcmc_pairs(), call pairs_condition() helper function, used specify criterion determining chains (iterations) shown plots diagonal shown plots diagonal. histograms (density plots) along diagonal always made using chains iterations, scatterplots (hex plots) diagonal show different combinations chains/iterations depending condition. default call pairs_condition() none arguments specified. case half chains (roughly half odd number) used plots diagonal rest plots diagonal. chains, draws, nuts arguments pairs_condition(), documented , can used change default. lp mcmc_pairs(), molten data frame draws log-posterior , commonly, quantity equal log-posterior constant. lp either created via log_posterior() object form object returned log_posterior(). max_treedepth mcmc_pairs(), integer representing maximum treedepth allowed fitting model (fit using NUTS). needed detecting transitions () hit maximum treedepth. grid_args, save_gg_objects mcmc_pairs(), arguments pass bayesplot_grid(). example, since mcmc_pairs() returns single ggplot object, using ggtitle() afterwards work. can still add title plot using grid_args = list(top=\"title\"). div_color, div_shape, div_size, div_alpha, td_color, td_shape, td_size, td_alpha Optional arguments scatter_style_np() pairs_style_np() helper functions eventually passed ggplot2::geom_point().default values displayed Usage section . chains, draws, nuts Optional arguments pairs_condition() helper function, used specify condition argument mcmc_pairs(). chains argument can used select subset chains. chains integer vector behavior default (half chains diagonal half ) except using specified subset chains. Alternatively, chains can list two integer vectors first specifying chains shown plots diagonal second diagonal. draws argument pairs_condition() can used directly specify realizations plotted diagonal. draws can single proportion, interpreted proportion realizations (among chains) plot lower panel starting first realization chain, complement (end chain) plotted upper panel. Alternatively draws can logical vector length equal product number iterations number chains, case realizations corresponding FALSE TRUE plotted lower upper panels, respectively. models fit using NUTS, nuts argument pairs_condition() can used. takes (possibly abbreviated) string select among \"accept_stat__\", \"stepsize__\", \"treedepth__\", \"n_leapfrog__\", \"divergent__\", \"energy__\", \"lp__\". sampler parameters associated NUTS() (\"lp__\" log-posterior additive constant). case, plots diagonal contain realizations median indicated variable (zero case \"divergent__\"), plots diagonal contain realizations greater equal median indicated variable (one case \"divergent__\"). \"lp__\" used lp argument mcmc_pairs must also specified. NUTS parameters np argument mcmc_pairs() must also specified.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"mcmc_scatter() mcmc_hex() return ggplot object can customized using ggplot2 package. mcmc_pairs() returns many ggplot objects organized grid via bayesplot_grid().","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"mcmc_scatter() Bivariate scatterplot posterior draws. using large number posterior draws mcmc_hex() may preferable avoid overplotting. models fit using NUTS np, np_style arguments can used add additional information plot (case approximate location divergences). scatter plot divergences useful diagnostic tool see Gabry et al. (2019). mcmc_hex() Hexagonal heatmap 2-D bin counts. plot useful cases posterior sample size large enough mcmc_scatter() suffers overplotting. mcmc_pairs() square plot matrix univariate marginal distributions along diagonal (histograms kernel density plots) bivariate distributions diagonal (scatterplots hex heatmaps). -diagonal plots, default split chains (roughly) half displayed diagonal half (chains always merged together plots along diagonal). possibilities available setting condition argument. Additionally, extra diagnostic information models fit using NUTS can added pairs plot using lp, np, np_style arguments. np specified (condition \"divergent__\"), points (red, default) superimposed onto -diagonal plots indicating () iterations encountered divergent transition. Also, np max_treedepth specified points (yellow, default) superimposed indicate transition hit maximum treedepth rather terminated evolution normally. np_style argument can used pairs_style_np() convenience function change appearance overlaid points. See Examples section.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-scatterplots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scatterplots of MCMC draws — MCMC-scatterplots","text":"","code":"library(\"ggplot2\")  # some parameter draws to use for demonstration x <- example_mcmc_draws(params = 6) dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" #>   # scatterplot of alpha vs log(sigma) color_scheme_set(\"teal\") (p <- mcmc_scatter(x, pars = c(\"alpha\", \"sigma\"),                   transform = list(sigma = \"log\")))  p +   labs(     title = \"Insert your own headline-grabbing title\",     subtitle = \"with a provocative subtitle\",     caption = \"and a controversial caption\",     x = expression(alpha),     y = expression(log(sigma))    )   # add ellipse p + stat_ellipse(level = 0.9, color = \"gray20\", size = 1)   # add contour color_scheme_set(\"red\") p2 <- mcmc_scatter(x, pars = c(\"alpha\", \"sigma\"), size = 3.5, alpha = 0.25) p2 + stat_density_2d(color = \"black\", size = .5)   # can also add lines/smooths color_scheme_set(\"pink\") (p3 <- mcmc_scatter(x, pars = c(\"alpha\", \"beta[3]\"), alpha = 0.25, size = 3))  p3 + geom_smooth(method = \"lm\", se = FALSE, color = \"gray20\",                  size = .75, linetype = 2) #> `geom_smooth()` using formula = 'y ~ x'   # \\donttest{ if (requireNamespace(\"hexbin\", quietly = TRUE)) {  # hexagonal heatmap  color_scheme_set(\"brightblue\")  (p <- mcmc_hex(x, pars = c(\"sigma\", \"alpha\"), transform = list(sigma = \"log\")))  p + plot_bg(fill = \"gray95\")  p + plot_bg(fill = \"gray95\") + panel_bg(fill = \"gray70\") }  # } # \\donttest{ color_scheme_set(\"purple\")  # pairs plots # default of condition=NULL implies splitting chains between upper and lower panels mcmc_pairs(x, pars = \"alpha\", regex_pars = \"beta\\\\[[1,4]\\\\]\",            off_diag_args = list(size = 1, alpha = 0.5))   # change to density plots instead of histograms and hex plots instead of # scatterplots mcmc_pairs(x, pars = \"alpha\", regex_pars = \"beta\\\\[[1,4]\\\\]\",            diag_fun = \"dens\", off_diag_fun = \"hex\")   # plot chain 1 above diagonal and chains 2, 3, and 4 below color_scheme_set(\"brightblue\") mcmc_pairs(x, pars = \"alpha\", regex_pars = \"beta\\\\[[1,4]\\\\]\",            diag_fun = \"dens\", off_diag_fun = \"hex\",            condition = pairs_condition(chains = list(1, 2:4)))  # }  # \\dontrun{ ### Adding NUTS diagnostics to scatterplots and pairs plots  # examples using rstanarm package library(rstanarm)  # for demonstration purposes, intentionally fit a model that # will (almost certainly) have some divergences fit <- stan_glm(   mpg ~ ., data = mtcars,   iter = 1000, refresh = 0,   # this combo of prior and adapt_delta should lead to some divergences   prior = hs(),   adapt_delta = 0.9 ) #> Warning: There were 35 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess posterior <- as.array(fit) np <- nuts_params(fit)  # mcmc_scatter with divergences highlighted color_scheme_set(\"brightblue\") mcmc_scatter(posterior, pars = c(\"wt\", \"sigma\"), np = np)   color_scheme_set(\"darkgray\") div_style <- scatter_style_np(div_color = \"green\", div_shape = 4, div_size = 4) mcmc_scatter(posterior, pars = c(\"sigma\", \"(Intercept)\"),              np = np, np_style = div_style)   # split the draws according to above/below median accept_stat__ # and show approximate location of divergences (red points) color_scheme_set(\"brightblue\") mcmc_pairs(   posterior,   pars = c(\"wt\", \"cyl\", \"sigma\"),   off_diag_args = list(size = 1, alpha = 1/3),   condition = pairs_condition(nuts = \"accept_stat__\"),   np = np )   # more customizations: # - transform sigma to log(sigma) # - median log-posterior as 'condition' # - hex instead of scatter for off-diagonal plots # - show points where max treedepth hit in blue color_scheme_set(\"darkgray\") mcmc_pairs(   posterior,   pars = c(\"wt\", \"cyl\", \"sigma\"),   transform = list(sigma = \"log\"),   off_diag_fun = \"hex\",   condition = pairs_condition(nuts = \"lp__\"),   lp = log_posterior(fit),   np = np,   np_style = pairs_style_np(div_color = \"firebrick\",                             td_color = \"blue\",                             td_size = 2),   # for demonstration purposes, set max_treedepth to a value that will   # result in at least a few max treedepth warnings   max_treedepth = with(np, -1 + max(Value[Parameter == \"treedepth__\"])) )  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":null,"dir":"Reference","previous_headings":"","what":"Trace and rank plots of MCMC draws — MCMC-traces","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"Trace rank plots MCMC draws. See Plot Descriptions section, , details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"","code":"mcmc_trace(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   n_warmup = 0,   iter1 = 0,   window = NULL,   size = NULL,   np = NULL,   np_style = trace_style_np(),   divergences = NULL )  mcmc_trace_highlight(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   n_warmup = 0,   window = NULL,   size = NULL,   alpha = 0.2,   highlight = 1 )  trace_style_np(div_color = \"red\", div_size = 0.25, div_alpha = 1)  mcmc_rank_overlay(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   facet_args = list(),   ...,   n_bins = 20,   ref_line = FALSE )  mcmc_rank_hist(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   facet_args = list(),   n_bins = 20,   ref_line = FALSE )  mcmc_rank_ecdf(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   K = NULL,   facet_args = list(),   prob = 0.99,   plot_diff = FALSE,   interpolate_adj = NULL )  mcmc_trace_data(   x,   pars = character(),   regex_pars = character(),   transformations = list(),   ...,   highlight = NULL,   n_warmup = 0,   iter1 = 0 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"x object containing MCMC draws: 3-D array, matrix, list matrices, data frame. MCMC-overview page provides details specify . draws object posterior package (e.g., draws_array, draws_rvars, etc.). object .array() method returns kind 3-D array described MCMC-overview page. pars optional character vector parameter names. neither pars regex_pars specified default use parameters. version 1.7.0, bayesplot also supports 'tidy' parameter selection specifying pars = vars(...), ... specified way dplyr::select(...) similar functions. Examples using pars way can found Tidy parameter selection page. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function. transformations Optionally, transformations apply parameters plotting. transformations function single string naming function function used transform parameters. apply transformations particular parameters, transformations argument can named list length equal number parameters transformed. Currently univariate transformations scalar parameters can specified (multivariate transformations implemented future release). transformations list, name list element parameter name content list element function (item match function via match.fun(), e.g. string naming function). function specified name string (e.g. \"log\"), can used construct new parameter label appropriate parameter (e.g. \"log(sigma)\"). function specified (e.g. log function(x) log(x)) \"t\" used new parameter label indicate parameter transformed (e.g. \"t(sigma)\"). Note: due partial argument matching transformations can abbreviated convenience interactive use (e.g., transform). ... Currently ignored. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". n_warmup integer; number warmup iterations included x. default n_warmup = 0, .e. assume warmup iterations included. n_warmup > 0 background iterations 1:n_warmup shaded gray. iter1 integer; iteration number first included draw (default 0). can used make obvious warmup iterations discarded traceplot. specified n_warmup also set positive value. window integer vector length two specifying limits range iterations display. size optional value override default line size mcmc_trace() default point size mcmc_trace_highlight(). np models fit using NUTS (generally, symplectic integrator), optional data frame providing NUTS diagnostic information. data frame object returned nuts_params() one structure. np specified tick marks added bottom trace plot indicating within iterations divergence (). See end Examples section, . np_style call trace_style_np() helper function specify arguments controlling appearance tick marks representing divergences (np argument specified). divergences Deprecated. Use np argument instead. alpha mcmc_trace_highlight(), passed ggplot2::geom_point() control transparency points chains highlighted. highlight mcmc_trace_highlight(), integer specifying one chains visible others plot. div_color, div_size, div_alpha Optional arguments trace_style_np() helper function eventually passed ggplot2::geom_rug() np argument also specified. control color, size, transparency specifications showing divergences plot. default values displayed Usage section . n_bins rank plots, number bins use histogram rank-normalized MCMC samples. Defaults 20. ref_line rank plots, whether draw horizontal line average number ranks per bin. Defaults FALSE. K optional integer defining number equally spaced evaluation points PIT-ECDF. Reducing K using interpolate_adj = FALSE makes computing confidence bands faster. ppc_pit_ecdf ppc_pit_ecdf_grouped, PIT values supplied, defaults length(pit), otherwise yrep determines maximum accuracy estimated PIT values K set min(nrow(yrep) + 1, 1000). mcmc_rank_ecdf, defaults number iterations per chain x. prob mcmc_rank_ecdf(), value 0 1 specifying desired simultaneous confidence confidence bands drawn rank ECDF plots. plot_diff mcmc_rank_ecdf(), boolean specifying difference observed rank ECDFs theoretical expectation drawn instead unmodified rank ECDF plots. interpolate_adj boolean defining simultaneous confidence bands interpolated based precomputed values rather computed exactly. Computing bands may computationally intensive approximation gives fast method assessing ECDF trajectory. default use interpolation K greater 200.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function. mcmc_trace_data() returns data trace rank plots data frame.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"mcmc_trace() Standard trace plots MCMC draws. models fit using NUTS, np argument can used also show divergences trace plot. mcmc_trace_highlight() Traces plotted using points rather lines opacity chains one (specified highlight argument) reduced. mcmc_rank_hist() Whereas traditional trace plots visualize chains mix course sampling, rank histograms visualize values chains mix together terms ranking. ideal plot show rankings mixing overlapping uniform distribution. See Vehtari et al. (2019) details. mcmc_rank_overlay() Ranks mcmc_rank_hist() plotted using overlaid lines single panel. mcmc_rank_ecdf() ECDFs ranks mcmc_rank_hist() plotted simultaneous confidence bands coverage determined prob, , bands completely cover rank ECDFs probability prob. plot_diff = TRUE, difference observed rank ECDFs theoretical expectation samples originating distribution drawn. See Säilynoja et al. (2021) details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"Vehtari, ., Gelman, ., Simpson, D., Carpenter, B., Bürkner, P. (2019). Rank-normalization, folding, localization: improved R-hat assessing convergence MCMC. arXiv preprint. Säilynoja, T., Bürkner, P., Vehtari, . (2021). Graphical Test Discrete Uniformity Applications Goodness Fit Evaluation Multiple Sample Comparison arXiv preprint.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/MCMC-traces.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trace and rank plots of MCMC draws — MCMC-traces","text":"","code":"# some parameter draws to use for demonstration x <- example_mcmc_draws(chains = 4, params = 6) dim(x) #> [1] 250   4   6 dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" #>   # trace plots of the betas color_scheme_set(\"viridis\") mcmc_trace(x, regex_pars = \"beta\")  # \\donttest{ color_scheme_set(\"viridisA\") mcmc_trace(x, regex_pars = \"beta\")   color_scheme_set(\"viridisC\") mcmc_trace(x, regex_pars = \"beta\")  # }  # mix color schemes color_scheme_set(\"mix-blue-red\") mcmc_trace(x, regex_pars = \"beta\")   # use traditional ggplot discrete color scale mcmc_trace(x, pars = c(\"alpha\", \"sigma\")) +  ggplot2::scale_color_discrete() #> Scale for colour is already present. #> Adding another scale for colour, which will replace the existing scale.   # zoom in on a window of iterations, increase line size, # add tick marks, move legend to the top, add gray background color_scheme_set(\"viridisA\") mcmc_trace(x[,, 1:4], window = c(100, 130), size = 1) +   panel_bg(fill = \"gray90\", color = NA) +   legend_move(\"top\")   # Rank-normalized histogram plots. Instead of showing how chains mix over # time, look at how the ranking of MCMC samples mixed between chains. color_scheme_set(\"viridisE\") mcmc_rank_hist(x, \"alpha\")  mcmc_rank_hist(x, pars = c(\"alpha\", \"sigma\"), ref_line = TRUE)  mcmc_rank_overlay(x, \"alpha\")   # ECDF and ECDF difference plots of the ranking of MCMC samples between chains. # Provide 99% simultaneous confidence intervals for the chains sampling from # the same distribution. mcmc_rank_ecdf(x, prob = 0.99)  mcmc_rank_ecdf(x, prob = 0.99, plot_diff = TRUE)   # \\dontrun{ # parse facet label text color_scheme_set(\"purple\") p <- mcmc_trace(   x,   regex_pars = \"beta\\\\[[1,3]\\\\]\",   facet_args = list(labeller = ggplot2::label_parsed) ) p + facet_text(size = 15)   # mark first 100 draws as warmup mcmc_trace(x, n_warmup = 100)   # plot as points, highlighting chain 2 color_scheme_set(\"brightblue\") mcmc_trace_highlight(x, pars = \"sigma\", highlight = 2, size = 2)   # for models fit using HMC/NUTS divergences can be displayed in the trace plot library(\"rstanarm\") fit <- stan_glm(mpg ~ ., data = mtcars, refresh = 0,   # next line to keep example fast and also ensure we get some divergences                 prior = hs(), iter = 400, adapt_delta = 0.8) #> Warning: There were 26 divergent transitions after warmup. See #> https://mc-stan.org/misc/warnings.html#divergent-transitions-after-warmup #> to find out why this is a problem and how to eliminate them. #> Warning: Examine the pairs() plot to diagnose sampling problems #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess  # extract draws using as.array (instead of as.matrix) to keep # chains separate for trace plot posterior <- as.array(fit)  # for stanfit and stanreg objects use nuts_params() to get the divergences mcmc_trace(posterior, pars = \"sigma\", np = nuts_params(fit))   color_scheme_set(\"viridis\") mcmc_trace(   posterior,   pars = c(\"wt\", \"sigma\"),   size = 0.5,   facet_args = list(nrow = 2),   np = nuts_params(fit),   np_style = trace_style_np(div_color = \"black\", div_size = 0.5) )  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC censoring — PPC-censoring","title":"PPC censoring — PPC-censoring","text":"Compare empirical distribution censored data y distributions simulated/replicated data yrep posterior predictive distribution. See Plot Descriptions section, , details. Although bayesplot plots can used censored data, ppc_km_overlay() currently plotting function designed specifically censored data. encourage suggest contribute additional plots github.com/stan-dev/bayesplot.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC censoring — PPC-censoring","text":"","code":"ppc_km_overlay(   y,   yrep,   ...,   status_y,   left_truncation_y = NULL,   extrapolation_factor = 1.2,   size = 0.25,   alpha = 0.7 )  ppc_km_overlay_grouped(   y,   yrep,   group,   ...,   status_y,   left_truncation_y = NULL,   extrapolation_factor = 1.2,   size = 0.25,   alpha = 0.7 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC censoring — PPC-censoring","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. ... Currently used internally. status_y status indicator observations y. must numeric vector length y values {0, 1} (0 = right censored, 1 = event). left_truncation_y Optional parameter specifies left-truncation (delayed entry) times observations y. must numeric vector length y. NULL (default), left-truncation assumed. extrapolation_factor numeric value (>=1) controls far plot extended beyond largest observed value y. default value 1.2, corresponds 20 % extrapolation. Note posterior predictive draws may shown default controlled extrapolation. display posterior predictive draws, set extrapolation_factor = Inf. size, alpha Passed appropriate geom control appearance yrep distributions. group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC censoring — PPC-censoring","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPC censoring — PPC-censoring","text":"ppc_km_overlay() Empirical CCDF estimates dataset (row) yrep overlaid, Kaplan-Meier estimate (Kaplan Meier, 1958) y top (darker shade). PPC suitable right-censored y. Note replicated data yrep assumed uncensored. Left truncation (delayed entry) times y can specified using left_truncation_y. ppc_km_overlay_grouped() ppc_km_overlay(), separate facets group.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC censoring — PPC-censoring","text":"Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6) Kaplan, E. L. Meier, P. (1958). Nonparametric estimation incomplete observations. Journal American Statistical Association. 53(282), 457–481. doi:10.1080/01621459.1958.10501452.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-censoring.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC censoring — PPC-censoring","text":"","code":"# \\donttest{ color_scheme_set(\"brightblue\")  # For illustrative purposes, (right-)censor values y > 110: y <- example_y_data() status_y <- as.numeric(y <= 110) y <- pmin(y, 110)  # In reality, the replicated data (yrep) would be obtained from a # model which takes the censoring of y properly into account. Here, # for illustrative purposes, we simply use example_yrep_draws(): yrep <- example_yrep_draws() dim(yrep) #> [1] 500 434  # Overlay 25 curves ppc_km_overlay(y, yrep[1:25, ], status_y = status_y) #> Note: `extrapolation_factor` now defaults to 1.2 (20%). #> To display all posterior predictive draws, set `extrapolation_factor = Inf`.   # With extrapolation_factor = 1 (no extrapolation) ppc_km_overlay(y, yrep[1:25, ], status_y = status_y, extrapolation_factor = 1)   # With extrapolation_factor = Inf (show all posterior predictive draws) ppc_km_overlay(y, yrep[1:25, ], status_y = status_y, extrapolation_factor = Inf)   # With separate facets by group: group <- example_group_data() ppc_km_overlay_grouped(y, yrep[1:25, ], group = group, status_y = status_y) #> Note: `extrapolation_factor` now defaults to 1.2 (20%). #> To display all posterior predictive draws, set `extrapolation_factor = Inf`.   # With left-truncation (delayed entry) times: min_vals <- pmin(y, apply(yrep, 2, min)) left_truncation_y <- rep(0, length(y)) condition <- y > mean(y) / 2 left_truncation_y[condition] <- pmin(   runif(sum(condition), min = 0.6, max = 0.99) * y[condition],   min_vals[condition] - 0.001 ) ppc_km_overlay(y, yrep[1:25, ], status_y = status_y,               left_truncation_y = left_truncation_y) #> Note: `extrapolation_factor` now defaults to 1.2 (20%). #> To display all posterior predictive draws, set `extrapolation_factor = Inf`.  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":null,"dir":"Reference","previous_headings":"","what":"PPCs for discrete outcomes — PPC-discrete","title":"PPCs for discrete outcomes — PPC-discrete","text":"Many PPC functions bayesplot can used discrete data. small subset functions can used y yrep discrete documented page. Currently include rootograms count outcomes bar plots ordinal, categorical, multinomial outcomes. See Plot Descriptions section .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPCs for discrete outcomes — PPC-discrete","text":"","code":"ppc_bars(   y,   yrep,   ...,   prob = 0.9,   width = 0.9,   size = 1,   fatten = 2.5,   linewidth = 1,   freq = TRUE )  ppc_bars_grouped(   y,   yrep,   group,   ...,   facet_args = list(),   prob = 0.9,   width = 0.9,   size = 1,   fatten = 2.5,   linewidth = 1,   freq = TRUE )  ppc_rootogram(   y,   yrep,   style = c(\"standing\", \"hanging\", \"suspended\", \"discrete\"),   ...,   prob = 0.9,   size = 1,   bound_distinct = TRUE )  ppc_bars_data(y, yrep, group = NULL, prob = 0.9, freq = TRUE)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPCs for discrete outcomes — PPC-discrete","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. ... Currently unused. prob value 0 1 indicating desired probability mass include yrep intervals. Set prob=0 remove intervals. (Note: rootograms intervals square roots expected counts.) width bar plots , passed ggplot2::geom_bar() control bar width. size, fatten, linewidth bar plots, size, fatten, linewidth passed ggplot2::geom_pointrange() control appearance yrep points intervals. rootograms size passed ggplot2::geom_line() ggplot2::geom_pointrange(). freq bar plots , TRUE (default) y-axis display counts. Setting freq=FALSE put proportions y-axis. group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. facet_args optional list  arguments (facets) passed ggplot2::facet_wrap() control faceting. style ppc_rootogram, string specifying rootogram style. options \"discrete\", \"standing\", \"hanging\", \"suspended\". See Plot Descriptions section, , details different styles. bound_distinct ppc_rootogram(style = \"discrete), TRUE observed counts plotted different shapes depending whether within bounds y quantiles.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPCs for discrete outcomes — PPC-discrete","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPCs for discrete outcomes — PPC-discrete","text":"plots y yrep must integers, although need integers strict sense R's integer type. rootogram plots y yrep must also non-negative.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPCs for discrete outcomes — PPC-discrete","text":"ppc_bars() Bar plot y yrep medians uncertainty intervals superimposed bars. ppc_bars_grouped() ppc_bars() separate plot (facet) generated level grouping variable. ppc_rootogram() Rootograms allow diagnosing problems count data models overdispersion excess zeros. standing, hanging, suspended styles, consist histogram y expected counts based yrep overlaid line along uncertainty intervals. Meanwhile, discrete style, median counts based yrep laid point range uncertainty intervals along dots representing y. y-axis represents square roots counts approximately adjust scale differences thus ease comparison observed expected counts. Using style argument, rootogram can adjusted focus different aspects data: Standing: basic histogram observed counts curve showing expected counts. Hanging: observed counts hanging curve representing expected counts. Suspended: histogram differences expected observed counts. Discrete: dot--whisker plot median counts dots representing observed counts. emphasizes discrete nature count data, using discrete style suggested. rootograms plotted square root scale. See Kleiber Zeileis (2016) advice interpreting rootograms selecting among different styles.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"related-functions","dir":"Reference","previous_headings":"","what":"Related functions","title":"PPCs for discrete outcomes — PPC-discrete","text":"addition functions page restricted discrete outcomes, general PPC/PPD functions also support discrete data requested: ppc_stat() ppc_stat_grouped() can visualize discrete test statistics predictive checks discrete = TRUE. ppd_stat() ppd_stat_grouped() can visualize discrete test statistics predictive draws discrete = TRUE. ppc_ecdf_overlay can visualize empirical CDFs discrete statistics discrete = TRUE. ppc_pit_ecdf() ppc_pit_ecdf_grouped() can also handle discrete variables plot PIT-ECDF empirical PIT values. functions limited discrete outcomes, offer discrete-friendly displays integer-valued statistics.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPCs for discrete outcomes — PPC-discrete","text":"Kleiber, C. Zeileis, . (2016). Visualizing count data regressions using rootograms. American Statistician. 70(3): 296–303. https://arxiv.org/abs/1605.01311.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-discrete.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPCs for discrete outcomes — PPC-discrete","text":"","code":"set.seed(9222017)  # bar plots f <- function(N) {   sample(1:4, size = N, replace = TRUE, prob = c(0.25, 0.4, 0.1, 0.25)) } y <- f(100) yrep <- t(replicate(500, f(100))) dim(yrep) #> [1] 500 100 group <- gl(2, 50, length = 100, labels = c(\"GroupA\", \"GroupB\"))  color_scheme_set(\"mix-pink-blue\") ppc_bars(y, yrep)   # split by group, change interval width, and display proportion # instead of count on y-axis color_scheme_set(\"mix-blue-pink\") ppc_bars_grouped(y, yrep, group, prob = 0.5, freq = FALSE)   # \\dontrun{ # example for ordinal regression using rstanarm library(rstanarm) fit <- stan_polr(   tobgp ~ agegp,   data = esoph,   method = \"probit\",   prior = R2(0.2, \"mean\"),   init_r = 0.1,   seed = 12345,   # cores = 4,   refresh = 0  )  # coded as character, so convert to integer yrep_char <- posterior_predict(fit) print(yrep_char[1, 1:4]) #>          1          2          3          4  #> \"0-9g/day\" \"0-9g/day\"    \"10-19\"    \"10-19\"   yrep_int <- sapply(data.frame(yrep_char, stringsAsFactors = TRUE), as.integer) y_int <- as.integer(esoph$tobgp)  ppc_bars(y_int, yrep_int)   ppc_bars_grouped(   y = y_int,   yrep = yrep_int,   group = esoph$agegp,   freq=FALSE,   prob = 0.5,   fatten = 1,   size = 1.5 )  # }  # rootograms for counts y <- rpois(100, 20) yrep <- matrix(rpois(10000, 20), ncol = 100)  color_scheme_set(\"brightblue\") ppc_rootogram(y, yrep)  ppc_rootogram(y, yrep, prob = 0)   ppc_rootogram(y, yrep, style = \"hanging\", prob = 0.8)  ppc_rootogram(y, yrep, style = \"suspended\")  ppc_rootogram(y, yrep, style = \"discrete\")"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC distributions — PPC-distributions","title":"PPC distributions — PPC-distributions","text":"Compare empirical distribution data y distributions simulated/replicated data yrep posterior predictive distribution. See Plot Descriptions section, , details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC distributions — PPC-distributions","text":"","code":"ppc_data(y, yrep, group = NULL)  ppc_dens_overlay(   y,   yrep,   ...,   size = 0.25,   alpha = 0.7,   trim = FALSE,   bw = \"nrd0\",   adjust = 1,   kernel = \"gaussian\",   n_dens = 1024 )  ppc_dens_overlay_grouped(   y,   yrep,   group,   ...,   size = 0.25,   alpha = 0.7,   trim = FALSE,   bw = \"nrd0\",   adjust = 1,   kernel = \"gaussian\",   n_dens = 1024 )  ppc_ecdf_overlay(   y,   yrep,   ...,   discrete = FALSE,   pad = TRUE,   size = 0.25,   alpha = 0.7 )  ppc_ecdf_overlay_grouped(   y,   yrep,   group,   ...,   discrete = FALSE,   pad = TRUE,   size = 0.25,   alpha = 0.7 )  ppc_dens(y, yrep, ..., trim = FALSE, size = 0.5, alpha = 1)  ppc_hist(   y,   yrep,   ...,   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppc_freqpoly(   y,   yrep,   ...,   binwidth = NULL,   bins = NULL,   freq = TRUE,   size = 0.5,   alpha = 1 )  ppc_freqpoly_grouped(   y,   yrep,   group,   ...,   binwidth = NULL,   bins = NULL,   freq = TRUE,   size = 0.5,   alpha = 1 )  ppc_boxplot(y, yrep, ..., notch = TRUE, size = 0.5, alpha = 1)  ppc_dots(y, yrep, ..., binwidth = NA, quantiles = NA, freq = TRUE)  ppc_violin_grouped(   y,   yrep,   group,   ...,   probs = c(0.1, 0.5, 0.9),   size = 1,   alpha = 1,   y_draw = c(\"violin\", \"points\", \"both\"),   y_size = 1,   y_alpha = 1,   y_jitter = 0.1 )  ppc_pit_ecdf(   y,   yrep,   ...,   pit = NULL,   K = NULL,   prob = 0.99,   plot_diff = FALSE,   interpolate_adj = NULL )  ppc_pit_ecdf_grouped(   y,   yrep,   group,   ...,   K = NULL,   pit = NULL,   prob = 0.99,   plot_diff = FALSE,   interpolate_adj = NULL )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC distributions — PPC-distributions","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. ... dot plots, optional additional arguments pass ggdist::stat_dots(). size, alpha Passed appropriate geom control appearance predictive distributions. trim logical scalar passed ggplot2::geom_density(). bw, adjust, kernel, n_dens Optional arguments passed stats::density() override default kernel density estimation parameters. n_dens defaults 1024. discrete ppc_ecdf_overlay(), data treated discrete? default FALSE, case geom=\"line\" passed ggplot2::stat_ecdf(). discrete set TRUE geom=\"step\" used. pad logical scalar passed ggplot2::stat_ecdf(). binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) notch box plot, logical scalar passed ggplot2::geom_boxplot(). Note: unlike geom_boxplot(), default notch=TRUE. quantiles dot plots, optional integer passed ggdist::stat_dots() specifying number quantiles use quantile dot plot. quantiles NA (default) data points plotted. probs numeric vector passed ggplot2::geom_violin()'s draw_quantiles argument specify quantiles draw horizontal lines. Set NULL remove lines. y_draw ppc_violin_grouped(), string specifying draw y: \"violin\" (default), \"points\" (jittered points), \"\". y_jitter, y_size, y_alpha ppc_violin_grouped(), y_draw \"points\" \"\" y_size, y_alpha, y_jitter passed size, alpha, width arguments ggplot2::geom_jitter() control appearance y points. default y_jitter=NULL let ggplot2 determine amount jitter. pit optional vector probability integral transformed values ECDF drawn. NULL, PIT values computed y respect corresponding values yrep. K optional integer defining number equally spaced evaluation points PIT-ECDF. Reducing K using interpolate_adj = FALSE makes computing confidence bands faster. ppc_pit_ecdf ppc_pit_ecdf_grouped, PIT values supplied, defaults length(pit), otherwise yrep determines maximum accuracy estimated PIT values K set min(nrow(yrep) + 1, 1000). mcmc_rank_ecdf, defaults number iterations per chain x. prob desired simultaneous coverage level bands around ECDF. value (0,1). plot_diff boolean defining whether plot difference observed PIT- ECDF theoretical expectation uniform PIT values rather plotting regular ECDF. default FALSE, large samples recommend setting plot_diff=TRUE difference plot visually show dynamic range. interpolate_adj boolean defining simultaneous confidence bands interpolated based precomputed values rather computed exactly. Computing bands may computationally intensive approximation gives fast method assessing ECDF trajectory. default use interpolation K greater 200.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC distributions — PPC-distributions","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPC distributions — PPC-distributions","text":"Binomial data, plots may useful input contains \"success\" proportions (discrete \"success\" \"failure\" counts).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPC distributions — PPC-distributions","text":"ppc_hist(), ppc_freqpoly(), ppc_dens(), ppc_boxplot() separate histogram, shaded frequency polygon, smoothed kernel density estimate, box whiskers plot displayed y dataset (row) yrep. plots yrep therefore contain small number rows. See Examples section. ppc_dots() dot plot plot displayed y dataset (row) yrep. plots yrep therefore contain small number rows. See Examples section. function requires ggdist::stat_dots installed. ppc_freqpoly_grouped() separate frequency polygon plotted level grouping variable y dataset (row) yrep. plot yrep therefore contain small number rows. See Examples section. ppc_ecdf_overlay(), ppc_dens_overlay(), ppc_ecdf_overlay_grouped(), ppc_dens_overlay_grouped() Kernel density empirical CDF estimates dataset (row) yrep overlaid, distribution y top (darker shade). using ppc_ecdf_overlay() discrete data, set discrete argument TRUE better results. example ppc_dens_overlay() also see Gabry et al. (2019). ppc_violin_grouped() density estimate yrep within level grouping variable plotted violin horizontal lines notable quantiles. y overlaid plot either violin, points, , depending y_draw argument. ppc_pit_ecdf(), ppc_pit_ecdf_grouped() PIT-ECDF empirical PIT values y computed respect corresponding yrep values. 100 * prob% central simultaneous confidence intervals provided asses y yrep originate distribution. PIT values can also provided directly pit. See Säilynoja et al. (2021) details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC distributions — PPC-distributions","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Säilynoja, T., Bürkner, P., Vehtari, . (2021). Graphical Test Discrete Uniformity Applications Goodness Fit Evaluation Multiple Sample Comparison arXiv preprint. Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC distributions — PPC-distributions","text":"","code":"color_scheme_set(\"brightblue\") y <- example_y_data() yrep <- example_yrep_draws() group <- example_group_data() dim(yrep) #> [1] 500 434  ppc_dens_overlay(y, yrep[1:25, ])  # \\donttest{ # ppc_ecdf_overlay with continuous data (set discrete=TRUE if discrete data) ppc_ecdf_overlay(y, yrep[sample(nrow(yrep), 25), ])   # PIT-ECDF and PIT-ECDF difference plot of the PIT values of y compared to # yrep with 99% simultaneous confidence bands. ppc_pit_ecdf(y, yrep, prob = 0.99, plot_diff = FALSE)  ppc_pit_ecdf(y, yrep, prob = 0.99, plot_diff = TRUE)  # }  # for ppc_hist,dens,freqpoly,boxplot,dots definitely use a subset yrep rows so # only a few (instead of nrow(yrep)) histograms are plotted ppc_hist(y, yrep[1:8, ]) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # \\donttest{ color_scheme_set(\"red\") ppc_boxplot(y, yrep[1:8, ])   # wizard hat plot color_scheme_set(\"blue\") ppc_dens(y, yrep[200:202, ])   # dot plot ppc_dots(y, yrep[1:8, ])  # }  # \\donttest{ # frequency polygons ppc_freqpoly(y, yrep[1:3, ], alpha = 0.1, size = 1, binwidth = 5)   ppc_freqpoly_grouped(y, yrep[1:3, ], group) + yaxis_text() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # if groups are different sizes then the 'freq' argument can be useful ppc_freqpoly_grouped(y, yrep[1:3, ], group, freq = FALSE) + yaxis_text() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }  # density and distribution overlays by group ppc_dens_overlay_grouped(y, yrep[1:25, ], group = group)   ppc_ecdf_overlay_grouped(y, yrep[1:25, ], group = group)   # \\donttest{ # PIT-ECDF plots of the PIT values by group # with 99% simultaneous confidence bands. ppc_pit_ecdf_grouped(y, yrep, group=group, prob=0.99)  # }  # \\donttest{ # don't need to only use small number of rows for ppc_violin_grouped # (as it pools yrep draws within groups) color_scheme_set(\"gray\") ppc_violin_grouped(y, yrep, group, size = 1.5)  ppc_violin_grouped(y, yrep, group, alpha = 0)   # change how y is drawn ppc_violin_grouped(y, yrep, group, alpha = 0, y_draw = \"points\", y_size = 1.5)  ppc_violin_grouped(y, yrep, group,   alpha = 0, y_draw = \"both\",   y_size = 1.5, y_alpha = 0.5, y_jitter = 0.33 )  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC errors — PPC-errors","title":"PPC errors — PPC-errors","text":"Various plots predictive errors y - yrep. See Details Plot Descriptions sections, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC errors — PPC-errors","text":"","code":"ppc_error_hist(   y,   yrep,   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppc_error_hist_grouped(   y,   yrep,   group,   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppc_error_scatter(y, yrep, ..., facet_args = list(), size = 2.5, alpha = 0.8)  ppc_error_scatter_avg(   y,   yrep,   x = NULL,   ...,   stat = \"mean\",   size = 2.5,   alpha = 0.8 )  ppc_error_scatter_avg_grouped(   y,   yrep,   group,   ...,   stat = \"mean\",   facet_args = list(),   size = 2.5,   alpha = 0.8 )  ppc_error_scatter_avg_vs_x(   y,   yrep,   x,   ...,   stat = \"mean\",   size = 2.5,   alpha = 0.8 )  ppc_error_binned(   y,   yrep,   x = NULL,   ...,   facet_args = list(),   bins = NULL,   size = 1,   alpha = 0.25 )  ppc_error_data(y, yrep, group = NULL)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC errors — PPC-errors","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. ... Currently unused. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". binwidth Passed ggplot2::geom_histogram() override default binwidth. bins ppc_error_binned(), number bins use (approximately). breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. size, alpha scatterplots, arguments passed ggplot2::geom_point() control appearance points. binned error plot, arguments controlling size outline opacity shaded region indicating 2-SE bounds. x numeric vector length y use x-axis variable. stat function string naming function computing posterior average. cases, function take vector input return scalar statistic. function name displayed axis-label. Defaults \"mean\".","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC errors — PPC-errors","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPC errors — PPC-errors","text":"functions (aside *_scatter_avg functions) compute plot predictive errors row matrix yrep, usually good idea yrep contain small number draws (rows). See Examples, . binomial Bernoulli data ppc_error_binned() function can used generate binned error plots. Bernoulli data can input vector 0s 1s, whereas binomial data y yrep contain \"success\" proportions (counts). See Examples section, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot descriptions","title":"PPC errors — PPC-errors","text":"ppc_error_hist() separate histogram plotted predictive errors computed y dataset (row) yrep. plot yrep small number rows. ppc_error_hist_grouped() Like ppc_error_hist(), except errors computed within levels grouping variable. number histograms therefore equal product number rows yrep number groups (unique values group). ppc_error_scatter() separate scatterplot displayed y vs. predictive errors computed y dataset (row) yrep. plot yrep small number rows. ppc_error_scatter_avg() single scatterplot y vs. average errors computed y dataset (row) yrep. individual data point y[n] average error average errors y[n] computed draws posterior predictive distribution. optional x argument provided, average error plotted y-axis predictor variable x plotted x-axis. ppc_error_scatter_avg_vs_x() Deprecated. Use ppc_error_scatter_avg(x = x) instead. ppc_error_binned() Intended use binomial data. separate binned error plot (similar arm::binnedplot()) generated dataset (row) yrep. plot y yrep contain proportions rather counts, yrep small number rows.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC errors — PPC-errors","text":"Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-errors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC errors — PPC-errors","text":"","code":"y <- example_y_data() yrep <- example_yrep_draws() ppc_error_hist(y, yrep[1:3, ]) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # errors within groups group <- example_group_data() (p1 <- ppc_error_hist_grouped(y, yrep[1:3, ], group)) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  p1 + yaxis_text() # defaults to showing counts on y-axis #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # \\donttest{ table(group) # more obs in GroupB, can set freq=FALSE to show density on y-axis #> group #> GroupA GroupB  #>     93    341  (p2 <- ppc_error_hist_grouped(y, yrep[1:3, ], group, freq = FALSE)) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  p2 + yaxis_text() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }  # scatterplots ppc_error_scatter(y, yrep[10:14, ])  ppc_error_scatter_avg(y, yrep)   x <- example_x_data() ppc_error_scatter_avg(y, yrep, x)   # \\dontrun{ # binned error plot with binomial model from rstanarm library(rstanarm) example(\"example_model\", package = \"rstanarm\") #>  #> exmpl_> if (.Platform$OS.type != \"windows\" || .Platform$r_arch != \"i386\") { #> exmpl_+ example_model <-  #> exmpl_+   stan_glmer(cbind(incidence, size - incidence) ~ size + period + (1|herd), #> exmpl_+              data = lme4::cbpp, family = binomial, QR = TRUE, #> exmpl_+              # this next line is only to keep the example small in size! #> exmpl_+              chains = 2, cores = 1, seed = 12345, iter = 1000, refresh = 0) #> exmpl_+ example_model #> exmpl_+ } #> stan_glmer #>  family:       binomial [logit] #>  formula:      cbind(incidence, size - incidence) ~ size + period + (1 | herd) #>  observations: 56 #> ------ #>             Median MAD_SD #> (Intercept) -1.5    0.6   #> size         0.0    0.0   #> period2     -1.0    0.3   #> period3     -1.1    0.4   #> period4     -1.6    0.5   #>  #> Error terms: #>  Groups Name        Std.Dev. #>  herd   (Intercept) 0.76     #> Num. levels: herd 15  #>  #> ------ #> * For help interpreting the printed output see ?print.stanreg #> * For info on the priors used see ?prior_summary.stanreg formula(example_model) #> cbind(incidence, size - incidence) ~ size + period + (1 | herd)  # get observed proportion of \"successes\" y <- example_model$y  # matrix of \"success\" and \"failure\" counts trials <- rowSums(y) y_prop <- y[, 1] / trials  # proportions  # get predicted success proportions yrep <- posterior_predict(example_model) yrep_prop <- sweep(yrep, 2, trials, \"/\")  ppc_error_binned(y_prop, yrep_prop[1:6, ])   # plotting against a covariate on x-axis herd <- as.numeric(example_model$data$herd) ppc_error_binned(y_prop, yrep_prop[1:6, ], x = herd)  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC intervals — PPC-intervals","title":"PPC intervals — PPC-intervals","text":"Medians central interval estimates yrep y overlaid. See Plot Descriptions section, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC intervals — PPC-intervals","text":"","code":"ppc_intervals(   y,   yrep,   x = NULL,   ...,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 1,   fatten = 2.5,   linewidth = 1 )  ppc_intervals_grouped(   y,   yrep,   x = NULL,   group,   ...,   facet_args = list(),   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 1,   fatten = 2.5,   linewidth = 1 )  ppc_ribbon(   y,   yrep,   x = NULL,   ...,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 0.25,   y_draw = c(\"line\", \"points\", \"both\") )  ppc_ribbon_grouped(   y,   yrep,   x = NULL,   group,   ...,   facet_args = list(),   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 0.25,   y_draw = c(\"line\", \"points\", \"both\") )  ppc_intervals_data(   y,   yrep,   x = NULL,   group = NULL,   ...,   prob = 0.5,   prob_outer = 0.9 )  ppc_ribbon_data(   y,   yrep,   x = NULL,   group = NULL,   ...,   prob = 0.5,   prob_outer = 0.9 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC intervals — PPC-intervals","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. x numeric vector use x-axis variable. example, x predictor variable regression model, time variable time-series models, etc. x missing NULL observation index used x-axis. ... Currently unused. prob, prob_outer Values 0 1 indicating desired probability mass include inner outer intervals. defaults prob=0.5 prob_outer=0.9. alpha, size, fatten, linewidth Arguments passed geoms. ribbon plots alpha passed ggplot2::geom_ribbon() control opacity outer ribbon size passed ggplot2::geom_line() control size line representing median prediction (size=0 remove line). interval plots alpha, size, fatten, linewidth passed ggplot2::geom_pointrange() (fatten=0 remove point estimates). group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". y_draw ribbon plots , string specifying draw y. Can \"line\" (default), \"points\", \"\".","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC intervals — PPC-intervals","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPC intervals — PPC-intervals","text":"ppc_intervals(), ppc_ribbon() 100*prob% central intervals yrep x value. ppc_intervals() plots intervals vertical bars points indicating yrep medians darker points indicating observed y values. ppc_ribbon() plots ribbon connected intervals line median yrep darker line connecting observed y values. cases optional x variable can also specified x-axis variable. Depending number observations variability predictions different values x, one plots may easier read . ppc_intervals_grouped(), ppc_ribbon_grouped() ppc_intervals() ppc_ribbon(), respectively, separate plot (facet) generated level grouping variable.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC intervals — PPC-intervals","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC intervals — PPC-intervals","text":"","code":"y <- rnorm(50) yrep <- matrix(rnorm(5000, 0, 2), ncol = 50)  color_scheme_set(\"brightblue\") ppc_intervals(y, yrep)  ppc_ribbon(y, yrep)  ppc_ribbon(y, yrep, y_draw = \"points\")  # \\dontrun{ ppc_ribbon(y, yrep, y_draw = \"both\")  # }  ppc_intervals(y, yrep, size = 1.5, fatten = 0) # remove the yrep point estimates   color_scheme_set(\"teal\") year <- 1950:1999 ppc_intervals(y, yrep, x = year, fatten = 1) + ggplot2::xlab(\"Year\")  ppc_ribbon(y, yrep, x = year) + ggplot2::xlab(\"Year\")   color_scheme_set(\"pink\") year <- rep(2000:2009, each = 5) group <- gl(5, 1, length = 50, labels = LETTERS[1:5]) ppc_ribbon_grouped(y, yrep, x = year, group, y_draw = \"both\") +   ggplot2::scale_x_continuous(breaks = pretty)   ppc_ribbon_grouped(y, yrep, x = year, group,                    facet_args = list(scales = \"fixed\")) +  xaxis_text(FALSE) +  xaxis_ticks(FALSE) +  panel_bg(fill = \"gray20\")   # get the data frames used to make the ggplots ppc_dat <- ppc_intervals_data(y, yrep, x = year, prob = 0.5) ppc_group_dat <- ppc_intervals_data(y, yrep, x = year, group = group, prob = 0.5)  # \\dontrun{ library(\"rstanarm\") fit <- stan_glmer(mpg ~ wt + (1|cyl), data = mtcars, refresh = 0) yrep <- posterior_predict(fit)  color_scheme_set(\"purple\") ppc_intervals(y = mtcars$mpg, yrep = yrep, x = mtcars$wt, prob = 0.8) +  panel_bg(fill=\"gray90\", color = NA) +  grid_lines(color = \"white\")   ppc_ribbon(y = mtcars$mpg, yrep = yrep, x = mtcars$wt,            prob = 0.6, prob_outer = 0.8)   ppc_ribbon_grouped(y = mtcars$mpg, yrep = yrep, x = mtcars$wt,                    group = mtcars$cyl)    color_scheme_set(\"gray\") ppc_intervals(mtcars$mpg, yrep, prob = 0.5) +  ggplot2::scale_x_continuous(    labels = rownames(mtcars),    breaks = 1:nrow(mtcars)  ) +  xaxis_text(angle = -70, vjust = 1, hjust = 0) +  xaxis_title(FALSE)   # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":null,"dir":"Reference","previous_headings":"","what":"LOO predictive checks — PPC-loo","title":"LOO predictive checks — PPC-loo","text":"Leave-One-(LOO) predictive checks. See Plot Descriptions section, , Gabry et al. (2019) details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"LOO predictive checks — PPC-loo","text":"","code":"ppc_loo_pit_overlay(   y,   yrep,   lw = NULL,   ...,   psis_object = NULL,   pit = NULL,   samples = 100,   size = 0.25,   alpha = 0.7,   boundary_correction = TRUE,   grid_len = 512,   bw = \"nrd0\",   trim = FALSE,   adjust = 1,   kernel = \"gaussian\",   n_dens = 1024 )  ppc_loo_pit_data(   y,   yrep,   lw = NULL,   ...,   psis_object = NULL,   pit = NULL,   samples = 100,   bw = \"nrd0\",   boundary_correction = TRUE,   grid_len = 512 )  ppc_loo_pit_qq(   y,   yrep,   lw = NULL,   ...,   psis_object = NULL,   pit = NULL,   compare = c(\"uniform\", \"normal\"),   size = 2,   alpha = 1 )  ppc_loo_pit_ecdf(   y,   yrep,   lw = NULL,   ...,   psis_object = NULL,   pit = NULL,   K = NULL,   prob = 0.99,   plot_diff = FALSE,   interpolate_adj = NULL )  ppc_loo_pit(   y,   yrep,   lw,   pit = NULL,   compare = c(\"uniform\", \"normal\"),   ...,   size = 2,   alpha = 1 )  ppc_loo_intervals(   y,   yrep,   psis_object,   ...,   subset = NULL,   intervals = NULL,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 1,   fatten = 2.5,   linewidth = 1,   order = c(\"index\", \"median\") )  ppc_loo_ribbon(   y,   yrep,   psis_object,   ...,   subset = NULL,   intervals = NULL,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 0.25 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"LOO predictive checks — PPC-loo","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. lw matrix (smoothed) log weights dimensions yrep. See loo::psis() associated weights() method well Examples section, . lw specified psis_object can provided log weights extracted. ... Currently unused. psis_object using loo version 2.0.0 greater, object returned psis() function (loo() function argument save_psis set TRUE). pit ppc_loo_pit_overlay(), ppc_loo_pit_qq(), ppc_loo_pit_ecdf() optionally vector precomputed PIT values can specified instead y, yrep, lw (ignored pit specified). specified PIT values computed internally plotting. samples ppc_loo_pit_overlay(), number data sets (size y) simulate standard uniform distribution. default 100. density estimate dataset plotted thin line plot, density estimate LOO PITs overlaid thicker dark line. alpha, size, fatten, linewidth Arguments passed code geoms control plot aesthetics. ppc_loo_pit_qq() ppc_loo_pit_overlay(),size alpha passed ggplot2::geom_point() ggplot2::geom_density(), respectively. ppc_loo_intervals(), size linewidth fatten passed ggplot2::geom_pointrange(). ppc_loo_ribbon(), alpha size  passed ggplot2::geom_ribbon(). boundary_correction ppc_loo_pit_overlay(), set TRUE (default) function compute boundary corrected density values via convolution Gaussian filter, also known reflection method (Boneva et al., 1971). result, parameters controlling standard kernel density estimation adjust, kernel n_dens ignored. NOTE: current implementation works well continuous observations. grid_len ppc_loo_pit_overlay(), boundary_correction set TRUE parameter specifies number points used generate estimations. set 512 default. bw, adjust, kernel, n_dens Optional arguments passed stats::density() override default kernel density estimation parameters. n_dens defaults 1024. trim Passed ggplot2::stat_density(). compare ppc_loo_pit_qq(), string can either \"uniform\" \"normal\". \"uniform\" (default) Q-Q plot compares computed PIT values standard uniform distribution. compare=\"normal\", Q-Q plot compares standard normal quantiles calculated PIT values theoretical standard normal quantiles. K ppc_loo_pit_ecdf() optional integer defining number equally spaced evaluation points PIT-ECDF. Reducing K using interpolate_adj = FALSE makes computing confidence bands faster. pit supplied, defaults length(pit), otherwise yrep determines maximum accuracy estimated PIT values K set min(nrow(yrep) + 1, 1000). prob, prob_outer Values 0 1 indicating desired probability mass include inner outer intervals. defaults prob=0.5 prob_outer=0.9 ppc_loo_intervals() prob = 0.99 ppc_loo_pit_ecdf(). plot_diff ppc_loo_pit_ecdf(), boolean defining whether plot difference observed PIT-ECDF theoretical expectation uniform PIT values rather plotting regular ECDF. default FALSE, large samples recommend setting plot_diff = TRUE better use plot area. interpolate_adj ppc_loo_pit_ecdf(), boolean defining simultaneous confidence bands interpolated based precomputed values rather computed exactly. Computing bands may computationally intensive approximation gives fast method assessing ECDF trajectory. default use interpolation K greater 200. subset ppc_loo_intervals() ppc_loo_ribbon(), optional integer vector indicating observations y (yrep) include. Dropping observations y yrep manually passing plotting function work dimensions match dimensions psis_object, y yrep passed along subset bayesplot can subsetting internally y, yrep psis_object. See Examples section demonstration. intervals ppc_loo_intervals() ppc_loo_ribbon(), optionally matrix pre-computed LOO predictive intervals can specified instead yrep (ignored intervals specified). specified intervals computed internally plotting. specified, intervals must matrix number rows equal number data points five columns following order: lower outer interval, lower inner interval, median (50%), upper inner interval upper outer interval (column names ignored). order ppc_loo_intervals(), string indicating arrange plotted intervals. default (\"index\") plot order observations. alternative (\"median\") arranges median value smallest (left) largest (right).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"LOO predictive checks — PPC-loo","text":"ggplot object can customized using ggplot2 package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"LOO predictive checks — PPC-loo","text":"ppc_loo_pit_overlay(), ppc_loo_pit_qq(), ppc_loo_pit_ecdf() calibration marginal predictions can assessed using probability integral transformation (PIT) checks. LOO improves check avoiding double use data. See section marginal predictive checks Gelman et al. (2013, p. 152–153) section 5 Gabry et al. (2019) example using bayesplot checks. LOO PIT values asymptotically uniform (continuous data) model calibrated. ppc_loo_pit_overlay() function creates plot comparing density LOO PITs (thick line) density estimates many simulated data sets standard uniform distribution (thin lines). See Gabry et al. (2019) example interpreting shape miscalibration can observed plots. ppc_loo_pit_qq() function provides alternative visualization miscalibration quantile-quantile (Q-Q) plot comparing LOO PITs standard uniform distribution. Comparing uniform good extreme probabilities close 0 1, can sometimes useful set compare argument \"normal\", produce Q-Q plot comparing standard normal quantiles calculated PIT values theoretical standard normal quantiles. can help see (mis)calibration better extreme values. However, cases found overlaid density plot (ppc_loo_pit_overlay()) function provide clearer picture calibration problems Q-Q plot. ppc_loo_pit_ecdf() function visualizes empirical cumulative distribution function (ECDF) LOO PITs overlaid simultaneous confidence intervals standard uniform sample. large samples, confidence intervals visually narrow. Setting plot_diff argument TRUE transforms plot display difference ECDF theoretical expectation, can aid visual assessment calibration. ppc_loo_intervals(), ppc_loo_ribbon() Similar ppc_intervals() ppc_ribbon() intervals LOO predictive distribution.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"LOO predictive checks — PPC-loo","text":"Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (p. 152–153) Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Vehtari, ., Gelman, ., Gabry, J. (2017). Practical Bayesian model evaluation using leave-one-cross-validation WAIC. Statistics Computing. 27(5), 1413–1432. doi:10.1007/s11222-016-9696-4. arXiv preprint: https://arxiv.org/abs/1507.04544 Boneva, L. ., Kendall, D., & Stefanov, . (1971). Spline transformations: Three new diagnostic aids statistical data-analyst. J. R. Stat. Soc. B (Methodological), 33(1), 1-71. https://www.jstor.org/stable/2986005.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-loo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"LOO predictive checks — PPC-loo","text":"","code":"# \\dontrun{ library(rstanarm) library(loo) #> This is loo version 2.8.0 #> - Online documentation and vignettes at mc-stan.org/loo #> - As of v2.0.0 loo defaults to 1 core but we recommend using as many as possible. Use the 'cores' argument or set options(mc.cores = NUM_CORES) for an entire session.  #>  #> Attaching package: ‘loo’ #> The following object is masked from ‘package:rstan’: #>  #>     loo  head(radon) #>   floor county  log_radon log_uranium #> 1     1 AITKIN 0.83290912  -0.6890476 #> 2     0 AITKIN 0.83290912  -0.6890476 #> 3     0 AITKIN 1.09861229  -0.6890476 #> 4     0 AITKIN 0.09531018  -0.6890476 #> 5     0  ANOKA 1.16315081  -0.8473129 #> 6     0  ANOKA 0.95551145  -0.8473129 fit <- stan_lmer(   log_radon ~ floor + log_uranium + floor:log_uranium     + (1 + floor | county),   data = radon,   iter = 100,   chains = 2,   cores = 2 ) #> Warning: The largest R-hat is 1.13, indicating chains have not mixed. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#r-hat #> Warning: Bulk Effective Samples Size (ESS) is too low, indicating posterior means and medians may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#bulk-ess #> Warning: Tail Effective Samples Size (ESS) is too low, indicating posterior variances and tail quantiles may be unreliable. #> Running the chains for more iterations may help. See #> https://mc-stan.org/misc/warnings.html#tail-ess y <- radon$log_radon yrep <- posterior_predict(fit)  loo1 <- loo(fit, save_psis = TRUE, cores = 4) #> Warning: Found 7 observation(s) with a pareto_k > 0.7. We recommend calling 'loo' again with argument 'k_threshold = 0.7' in order to calculate the ELPD without the assumption that these observations are negligible. This will refit the model 7 times to compute the ELPDs for the problematic observations directly. psis1 <- loo1$psis_object lw <- weights(psis1) # normalized log weights  # marginal predictive check using LOO probability integral transform color_scheme_set(\"orange\") ppc_loo_pit_overlay(y, yrep, lw = lw) #> Some PIT values larger than 1! Largest:  1  #> Rounding PIT > 1 to 1. Gradient evaluation took 0.000353 seconds #> Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 3.53 seconds. #> Chain 2: Adjust your expectations accordingly! #> Chain 2:  #> Chain 2:  #> Chain 2: WARNING: There aren't enough warmup iterations to fit the #> Chain 2:          three stages of adaptation as currently configured. #> Chain 2:          Reducing each adaptation stage to 15%/75%/10% of #> Chain 2:          the given number of warmup iterations: #> Chain 2:            init_buffer = 7 #> Chain 2:            adapt_window = 38 #> Chain 2:            term_buffer = 5 #> Chain 2:  #> Chain 2: Iteration:  1 / 100 [  1%]  (Warmup) #> Chain 2: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 10 / 100 [ 10%]  (Warmup) #> Chain 1: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 20 / 100 [ 20%]  (Warmup) #> Chain 2: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 30 / 100 [ 30%]  (Warmup) #> Chain 1: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 40 / 100 [ 40%]  (Warmup) #> Chain 2: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 2: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 1: Iteration: 50 / 100 [ 50%]  (Warmup) #> Chain 1: Iteration: 51 / 100 [ 51%]  (Sampling) #> Chain 2: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 1: Iteration: 60 / 100 [ 60%]  (Sampling) #> Chain 2: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 1: Iteration: 70 / 100 [ 70%]  (Sampling) #> Chain 2: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 1: Iteration: 80 / 100 [ 80%]  (Sampling) #> Chain 2: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 1: Iteration: 90 / 100 [ 90%]  (Sampling) #> Chain 2: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 2:  #> Chain 2:  Elapsed Time: 2.765 seconds (Warm-up) #> Chain 2:                2.454 seconds (Sampling) #> Chain 2:                5.219 seconds (Total) #> Chain 2:  #> Chain 1: Iteration: 100 / 100 [100%]  (Sampling) #> Chain 1:  #> Chain 1:  Elapsed Time: 2.934 seconds (Warm-up) #> Chain 1:                2.465 seconds (Sampling) #> Chain 1:                5.399 seconds (Total) #> Chain 1:  #> Warning:  #> NOTE: The kernel density estimate assumes continuous observations and is not optimal for discrete observations.   ppc_loo_pit_qq(y, yrep, lw = lw) #> Warning:   ppc_loo_pit_qq(y, yrep, lw = lw, compare = \"normal\") #> Warning:  #> Warning: Removed 18 rows containing non-finite outside the scale range (`stat_qq()`).   # predictive calibration check using LOO probability integral transform ppc_loo_pit_ecdf(y, yrep, lw) #> Warning:    # With `plot_diff = TRUE` it is easier to assess the calibration. ppc_loo_pit_ecdf(y, yrep, lw, plot_diff = TRUE) #> Warning:    # can use the psis object instead of lw ppc_loo_pit_qq(y, yrep, psis_object = psis1) #> Warning:    # loo predictive intervals vs observations keep_obs <- 1:50 ppc_loo_intervals(y, yrep, psis_object = psis1, subset = keep_obs)   color_scheme_set(\"gray\") ppc_loo_intervals(y, yrep,   psis_object = psis1, subset = keep_obs,   order = \"median\" )  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Graphical posterior predictive checking — PPC-overview","title":"Graphical posterior predictive checking — PPC-overview","text":"bayesplot PPC module provides various plotting functions creating graphical displays comparing observed data simulated data posterior (prior) predictive distribution. See sections brief discussion ideas behind posterior predictive checking, overview available PPC plots, tips providing interface bayesplot another package. plots posterior (prior) predictive distributions include observed data see PPD-overview instead.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Graphical posterior predictive checking — PPC-overview","text":"idea behind posterior predictive checking simple: model good fit able use generate data looks lot like data observed.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"posterior-predictive-distribution","dir":"Reference","previous_headings":"","what":"Posterior predictive distribution","title":"Graphical posterior predictive checking — PPC-overview","text":"generate data used posterior predictive checks simulate posterior predictive distribution. posterior predictive distribution distribution outcome variable implied model using observed data \\(y\\) (vector outcome values), typically predictors \\(X\\), update beliefs unknown parameters \\(\\theta\\) model. draw parameters \\(\\theta\\) posterior distribution \\(p(\\theta \\,|\\, y, X)\\) generate entire vector outcomes. result \\(S \\times N\\) matrix simulations, \\(S\\) size posterior sample (number draws posterior distribution) \\(N\\) number data points \\(y\\). , row matrix individual \"replicated\" dataset \\(N\\) observations.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"notation","dir":"Reference","previous_headings":"","what":"Notation","title":"Graphical posterior predictive checking — PPC-overview","text":"simulating posterior predictive distribution can use either values predictors \\(X\\) used fitting model new observations predictors. use values \\(X\\) denote resulting simulations \\(y^{rep}\\) can thought replications outcome \\(y\\) rather predictions future observations. corresponds notation Gelman et. al. (2013) notation used throughout documentation package.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"graphical-posterior-predictive-checking","dir":"Reference","previous_headings":"","what":"Graphical posterior predictive checking","title":"Graphical posterior predictive checking — PPC-overview","text":"Using datasets \\(y^{rep}\\) drawn posterior predictive distribution, functions bayesplot package produce various graphical displays comparing observed data \\(y\\) replications. thorough discussion posterior predictive checking see Chapter 6 Gelman et. al. (2013).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"prior-predictive-checking","dir":"Reference","previous_headings":"","what":"Prior predictive checking","title":"Graphical posterior predictive checking — PPC-overview","text":"use bayesplot prior predictive checks can simply use draws prior predictive distribution instead posterior predictive distribution. See Gabry et al. (2019) prior predictive checking reasonable compare prior predictive distribution observed data. want avoid using observed data prior predictive checks can use bayesplot PPD plots instead, take y argument, can use PPC plots provide plausible implausible y values want compare prior predictive realizations.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"ppc-plotting-functions","dir":"Reference","previous_headings":"","what":"PPC plotting functions","title":"Graphical posterior predictive checking — PPC-overview","text":"plotting functions prior posterior predictive checking prefix ppc_ require arguments y, vector observations, yrep, matrix replications (-sample predictions). plots organized several categories, documentation: PPC-distributions: Histograms, kernel density estimates, boxplots, plots comparing empirical distribution data y distributions individual simulated datasets (rows) yrep. PPC-test-statistics: distribution statistic, pair statistics, simulated datasets (rows) yrep compared value statistic(s) computed y. PPC-intervals: Interval estimates yrep y overlaid. x-axis variable can optionally specified user (e.g. plot predictor variable time). PPC-errors: Plots predictive errors (y - yrep) computed y simulated datasets (rows) yrep. binomial models binned error plots also available. PPC-scatterplots: Scatterplots (similar visualizations) data y vs. individual simulated datasets (rows) yrep, vs. average value distributions data point (columns) yrep. PPC-discrete: PPC functions can used y yrep discrete. example, rootograms count outcomes bar plots ordinal, categorical, multinomial outcomes. PPC-loo: PPC functions predictive checks based (approximate) leave-one-(LOO) cross-validation. ' PPC-censoring: PPC functions comparing empirical distribution censored data y distributions individual simulated datasets (rows) yrep.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"providing-an-interface-for-predictive-checking-from-another-package","dir":"Reference","previous_headings":"","what":"Providing an interface for predictive checking from another package","title":"Graphical posterior predictive checking — PPC-overview","text":"addition various plotting functions, bayesplot package provides S3 generic pp_check(). Authors R packages Bayesian inference encouraged define pp_check() methods fitted model objects created packages. See package vignettes details simple example, see rstanarm brms packages full examples pp_check() methods.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-overview.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Graphical posterior predictive checking — PPC-overview","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC scatterplots — PPC-scatterplots","title":"PPC scatterplots — PPC-scatterplots","text":"Scatterplots observed data y vs. simulated/replicated data yrep posterior predictive distribution. See Plot Descriptions Details sections, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC scatterplots — PPC-scatterplots","text":"","code":"ppc_scatter(   y,   yrep,   ...,   facet_args = list(),   size = 2.5,   alpha = 0.8,   ref_line = TRUE )  ppc_scatter_avg(   y,   yrep,   ...,   stat = \"mean\",   size = 2.5,   alpha = 0.8,   ref_line = TRUE )  ppc_scatter_avg_grouped(   y,   yrep,   group,   ...,   stat = \"mean\",   facet_args = list(),   size = 2.5,   alpha = 0.8,   ref_line = TRUE )  ppc_scatter_data(y, yrep)  ppc_scatter_avg_data(y, yrep, group = NULL, stat = \"mean\")"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC scatterplots — PPC-scatterplots","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. ... Currently unused. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". size, alpha Arguments passed ggplot2::geom_point() control appearance points. ref_line TRUE (default) dashed line intercept 0 slope 1 drawn behind scatter plot. stat function string naming function computing posterior average. cases, function take vector input return scalar statistic. function name displayed axis-label, underlying $rep_label ppc_scatter_avg_data() includes function name. Defaults \"mean\". group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC scatterplots — PPC-scatterplots","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPC scatterplots — PPC-scatterplots","text":"Binomial data, plots may useful input contains \"success\" proportions (discrete \"success\" \"failure\" counts).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPC scatterplots — PPC-scatterplots","text":"ppc_scatter() dataset (row) yrep scatterplot generated showing y row yrep. plot yrep contain small number rows. ppc_scatter_avg() single scatterplot y average values yrep, .e., points (x,y) = (average(yrep[, n]), y[n]), yrep[, n] vector length equal number posterior draws average() summary statistic. Unlike ppc_scatter(), ppc_scatter_avg() yrep contain many draws (rows). ppc_scatter_avg_grouped() ppc_scatter_avg(), separate plot generated level grouping variable.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC scatterplots — PPC-scatterplots","text":"Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-scatterplots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC scatterplots — PPC-scatterplots","text":"","code":"y <- example_y_data() yrep <- example_yrep_draws() p1 <- ppc_scatter_avg(y, yrep) p1   # don't draw line x=y ppc_scatter_avg(y, yrep, ref_line = FALSE)   p2 <- ppc_scatter(y, yrep[20:23, ], alpha = 0.5, size = 1.5) p2   # give x and y axes the same limits lims <- ggplot2::lims(x = c(0, 160), y = c(0, 160)) p1 + lims  p2 + lims #> Warning: Removed 1 row containing missing values or values outside the scale range #> (`geom_point()`).   # \"average\" function is customizable ppc_scatter_avg(y, yrep, stat = \"median\", ref_line = FALSE)   # for ppc_scatter_avg_grouped the default is to allow the facets # to have different x and y axes group <- example_group_data() ppc_scatter_avg_grouped(y, yrep, group)   # let x-axis vary but force y-axis to be the same ppc_scatter_avg_grouped(y, yrep, group, facet_args = list(scales = \"free_x\"))"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"PPC test statistics — PPC-test-statistics","title":"PPC test statistics — PPC-test-statistics","text":"distribution (test) statistic T(yrep), pair (test) statistics, simulated datasets yrep, compared observed value T(y) computed data y. See Plot Descriptions Details sections, , well Gabry et al. (2019). NOTE: Although default test statistic mean, unlikely detect anything interesting cases. general recommend using test statistic discussed Section 5 Gabry et al. (2019).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPC test statistics — PPC-test-statistics","text":"","code":"ppc_stat(   y,   yrep,   stat = \"mean\",   ...,   discrete = FALSE,   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppc_stat_grouped(   y,   yrep,   group,   stat = \"mean\",   ...,   discrete = FALSE,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppc_stat_freqpoly(   y,   yrep,   stat = \"mean\",   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   freq = TRUE )  ppc_stat_freqpoly_grouped(   y,   yrep,   group,   stat = \"mean\",   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   freq = TRUE )  ppc_stat_2d(y, yrep, stat = c(\"mean\", \"sd\"), ..., size = 2.5, alpha = 0.7)  ppc_stat_data(y, yrep, group = NULL, stat)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPC test statistics — PPC-test-statistics","text":"y vector observations. See Details. yrep S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate yrep. number columns, N number predicted observations (length(y)). columns yrep order data points y plots make sense. See Details Plot Descriptions sections additional advice specific particular plots. stat single function string naming function, except 2D plot requires vector exactly two names functions. cases function(s) take vector input return scalar statistic. specified string (strings) legend display function name(s). specified function (functions) generic naming used legend. ... Currently unused. discrete ppc_stat() ppc_stat_grouped(), TRUE bar chart used instead histogram. binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". size, alpha 2D plot , arguments passed ggplot2::geom_point() control appearance scatterplot points.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPC test statistics — PPC-test-statistics","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPC test statistics — PPC-test-statistics","text":"Binomial data, plots may useful input contains \"success\" proportions (discrete \"success\" \"failure\" counts).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"plot-descriptions","dir":"Reference","previous_headings":"","what":"Plot Descriptions","title":"PPC test statistics — PPC-test-statistics","text":"ppc_stat(), ppc_stat_freqpoly() histogram/bar plot frequency polygon distribution statistic computed applying stat dataset (row) yrep. value statistic observed data, stat(y), overlaid vertical line. details example usage ppc_stat() can found Gabry et al. (2019). ppc_stat_grouped(),ppc_stat_freqpoly_grouped() ppc_stat() ppc_stat_freqpoly(), separate plot generated level grouping variable. details example usage ppc_stat_grouped() can found Gabry et al. (2019). ppc_stat_2d() scatterplot showing joint distribution two statistics computed datasets (rows) yrep. value statistics observed data overlaid large point.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPC test statistics — PPC-test-statistics","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub) Gelman, ., Carlin, J. B., Stern, H. S., Dunson, D. B., Vehtari, ., Rubin, D. B. (2013). Bayesian Data Analysis. Chapman & Hall/CRC Press, London, third edition. (Ch. 6)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPC-test-statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPC test statistics — PPC-test-statistics","text":"","code":"y <- example_y_data() yrep <- example_yrep_draws() ppc_stat(y, yrep, stat = \"median\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppc_stat(y, yrep, stat = \"sd\") + legend_none() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # discrete data example set.seed(0) y_discrete <- rbinom(20, 1, 0.2) yrep_discrete <- matrix(rbinom(2000, 1, prob = 0.4), 1000, 20, byrow = TRUE) ppc_stat(y_discrete, yrep_discrete, stat = \"mean\", discrete = TRUE) #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest.   # use your own function for the 'stat' argument color_scheme_set(\"brightblue\") q25 <- function(y) quantile(y, 0.25) ppc_stat(y, yrep, stat = \"q25\") # legend includes function name #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # can define the function in the 'stat' argument instead of # using its name but then the legend doesn't include the function name ppc_stat(y, yrep, stat = function(y) quantile(y, 0.25)) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # plots by group color_scheme_set(\"teal\") group <- example_group_data() ppc_stat_grouped(y, yrep, group, stat = \"median\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppc_stat_grouped(y, yrep, group, stat = \"mad\") + yaxis_text() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # discrete data example with groups group_discrete <- rep(c(\"First Half\",\"Second Half\"), each = 10) ppc_stat_grouped(y_discrete, yrep_discrete, group_discrete, stat = \"mean\", discrete = TRUE) #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest.   # force y-axes to have same scales, allow x axis to vary ppc_stat_grouped(y, yrep, group, facet_args = list(scales = \"free_x\")) + yaxis_text() #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # the freqpoly plots use frequency polygons instead of histograms ppc_stat_freqpoly(y, yrep, stat = \"median\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppc_stat_freqpoly_grouped(y, yrep, group, stat = \"median\", facet_args = list(nrow = 2)) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # ppc_stat_2d allows 2 statistics and makes a scatterplot bayesplot_theme_set(ggplot2::theme_linedraw()) color_scheme_set(\"viridisE\") ppc_stat_2d(y, yrep, stat = c(\"mean\", \"sd\")) #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest.   bayesplot_theme_set(ggplot2::theme_grey()) color_scheme_set(\"brewer-Paired\") ppc_stat_2d(y, yrep, stat = c(\"median\", \"mad\"))   # reset aesthetics color_scheme_set() bayesplot_theme_set()"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":null,"dir":"Reference","previous_headings":"","what":"PPD distributions — PPD-distributions","title":"PPD distributions — PPD-distributions","text":"Plot posterior prior predictive distributions. functions makes plot corresponding ppc_ function without plotting observed data y. Plot Descriptions section PPC-distributions details individual plots.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPD distributions — PPD-distributions","text":"","code":"ppd_data(ypred, group = NULL)  ppd_dens_overlay(   ypred,   ...,   size = 0.25,   alpha = 0.7,   trim = FALSE,   bw = \"nrd0\",   adjust = 1,   kernel = \"gaussian\",   n_dens = 1024 )  ppd_ecdf_overlay(   ypred,   ...,   discrete = FALSE,   pad = TRUE,   size = 0.25,   alpha = 0.7 )  ppd_dens(ypred, ..., trim = FALSE, size = 0.5, alpha = 1)  ppd_hist(ypred, ..., binwidth = NULL, bins = NULL, breaks = NULL, freq = TRUE)  ppd_dots(ypred, ..., binwidth = NA, quantiles = NA, freq = TRUE)  ppd_freqpoly(   ypred,   ...,   binwidth = NULL,   bins = NULL,   freq = TRUE,   size = 0.5,   alpha = 1 )  ppd_freqpoly_grouped(   ypred,   group,   ...,   binwidth = NULL,   bins = NULL,   freq = TRUE,   size = 0.5,   alpha = 1 )  ppd_boxplot(ypred, ..., notch = TRUE, size = 0.5, alpha = 1)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPD distributions — PPD-distributions","text":"ypred S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate ypred. number columns, N, number predicted observations. group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. ... dot plots, optional additional arguments pass ggdist::stat_dots(). size, alpha Passed appropriate geom control appearance predictive distributions. trim logical scalar passed ggplot2::geom_density(). bw, adjust, kernel, n_dens Optional arguments passed stats::density() override default kernel density estimation parameters. n_dens defaults 1024. discrete ppc_ecdf_overlay(), data treated discrete? default FALSE, case geom=\"line\" passed ggplot2::stat_ecdf(). discrete set TRUE geom=\"step\" used. pad logical scalar passed ggplot2::stat_ecdf(). binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) quantiles dot plots, optional integer passed ggdist::stat_dots() specifying number quantiles use quantile dot plot. quantiles NA (default) data points plotted. notch box plot, logical scalar passed ggplot2::geom_boxplot(). Note: unlike geom_boxplot(), default notch=TRUE.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPD distributions — PPD-distributions","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPD distributions — PPD-distributions","text":"Binomial data, plots may useful input contains \"success\" proportions (discrete \"success\" \"failure\" counts).","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-distributions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPD distributions — PPD-distributions","text":"","code":"# difference between ppd_dens_overlay() and ppc_dens_overlay() color_scheme_set(\"brightblue\") preds <- example_yrep_draws() ppd_dens_overlay(ypred = preds[1:50, ])  ppc_dens_overlay(y = example_y_data(), yrep = preds[1:50, ])"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":null,"dir":"Reference","previous_headings":"","what":"PPD intervals — PPD-intervals","title":"PPD intervals — PPD-intervals","text":"Medians central interval estimates posterior prior predictive distributions. functions makes plot corresponding ppc_ function without plotting observed data y. Plot Descriptions section PPC-intervals details individual plots.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPD intervals — PPD-intervals","text":"","code":"ppd_intervals(   ypred,   x = NULL,   ...,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 1,   fatten = 2.5,   linewidth = 1 )  ppd_intervals_grouped(   ypred,   x = NULL,   group,   ...,   facet_args = list(),   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 1,   fatten = 2.5,   linewidth = 1 )  ppd_ribbon(   ypred,   x = NULL,   ...,   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 0.25 )  ppd_ribbon_grouped(   ypred,   x = NULL,   group,   ...,   facet_args = list(),   prob = 0.5,   prob_outer = 0.9,   alpha = 0.33,   size = 0.25 )  ppd_intervals_data(   ypred,   x = NULL,   group = NULL,   ...,   prob = 0.5,   prob_outer = 0.9 )  ppd_ribbon_data(   ypred,   x = NULL,   group = NULL,   ...,   prob = 0.5,   prob_outer = 0.9 )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPD intervals — PPD-intervals","text":"ypred S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate ypred. number columns, N, number predicted observations. x numeric vector use x-axis variable. example, x predictor variable regression model, time variable time-series models, etc. x missing NULL observation index used x-axis. ... Currently unused. prob, prob_outer Values 0 1 indicating desired probability mass include inner outer intervals. defaults prob=0.5 prob_outer=0.9. alpha, size, fatten, linewidth Arguments passed geoms. ribbon plots alpha passed ggplot2::geom_ribbon() control opacity outer ribbon size passed ggplot2::geom_line() control size line representing median prediction (size=0 remove line). interval plots alpha, size, fatten, linewidth passed ggplot2::geom_pointrange() (fatten=0 remove point estimates). group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\".","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPD intervals — PPD-intervals","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPD intervals — PPD-intervals","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-intervals.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPD intervals — PPD-intervals","text":"","code":"color_scheme_set(\"brightblue\") ypred <- example_yrep_draws() x <- example_x_data() group <- example_group_data()  ppd_intervals(ypred[, 1:50])  ppd_intervals(ypred[, 1:50], fatten = 0)  ppd_intervals(ypred[, 1:50], fatten = 0, linewidth = 2)  ppd_intervals(ypred[, 1:50], prob_outer = 0.75, fatten = 0, linewidth = 2)   # put a predictor variable on the x-axis ppd_intervals(ypred[, 1:100], x = x[1:100], fatten = 1) +   ggplot2::labs(y = \"Prediction\", x = \"Some variable of interest\")   # with a grouping variable too ppd_intervals_grouped(   ypred = ypred[, 1:100],   x = x[1:100],   group = group[1:100],   size = 2,   fatten = 0,   facet_args = list(nrow = 2) )   # even reducing size, ppd_intervals is too cluttered when there are many # observations included (ppd_ribbon is better) ppd_intervals(ypred, size = 0.5, fatten = 0.1, linewidth = 0.5)  ppd_ribbon(ypred)  ppd_ribbon(ypred, size = 0) # remove line showing median prediction"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-overview.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots of posterior or prior predictive distributions — PPD-overview","title":"Plots of posterior or prior predictive distributions — PPD-overview","text":"bayesplot PPD module provides various plotting functions creating graphical displays simulated data posterior prior predictive distribution. plots essentially corresponding PPC plots without showing observed data. \"checks\" compared data use PPD (prior/posterior predictive distribution) instead PPC (prior/posterior predictive check).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-overview.html","id":"ppd-plotting-functions","dir":"Reference","previous_headings":"","what":"PPD plotting functions","title":"Plots of posterior or prior predictive distributions — PPD-overview","text":"functions plotting prior posterior predictive distributions without observed data prefix ppd_ required argument ypred (matrix predictions). plots organized several categories, documentation: PPD-distributions: Histograms, kernel density estimates, boxplots, plots multiple simulated datasets (rows) ypred. plots PPC-distributions without including comparison y. PPD-intervals: Interval estimates predicted observations (columns) ypred. x-axis variable can optionally specified user (e.g. plot predictor variable time).plots PPC-intervals without including comparison y. PPD-test-statistics: distribution statistic, pair statistics, simulated datasets (rows) ypred. plots PPC-test-statistics without including comparison y.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-overview.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Plots of posterior or prior predictive distributions — PPD-overview","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":null,"dir":"Reference","previous_headings":"","what":"PPD test statistics — PPD-test-statistics","title":"PPD test statistics — PPD-test-statistics","text":"distribution (test) statistic T(ypred), pair (test) statistics, simulations posterior prior predictive distribution. functions makes plot corresponding ppc_ function without comparing observed data y. Plot Descriptions section PPC-test-statistics details individual plots.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PPD test statistics — PPD-test-statistics","text":"","code":"ppd_stat(   ypred,   stat = \"mean\",   ...,   discrete = FALSE,   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppd_stat_grouped(   ypred,   group,   stat = \"mean\",   ...,   discrete = FALSE,   facet_args = list(),   binwidth = NULL,   bins = NULL,   breaks = NULL,   freq = TRUE )  ppd_stat_freqpoly(   ypred,   stat = \"mean\",   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   freq = TRUE )  ppd_stat_freqpoly_grouped(   ypred,   group,   stat = \"mean\",   ...,   facet_args = list(),   binwidth = NULL,   bins = NULL,   freq = TRUE )  ppd_stat_2d(ypred, stat = c(\"mean\", \"sd\"), ..., size = 2.5, alpha = 0.7)  ppd_stat_data(ypred, group = NULL, stat)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PPD test statistics — PPD-test-statistics","text":"ypred S N matrix draws posterior (prior) predictive distribution. number rows, S, size posterior (prior) sample used generate ypred. number columns, N, number predicted observations. stat single function string naming function, except 2D plot requires vector exactly two names functions. cases function(s) take vector input return scalar statistic. specified string (strings) legend display function name(s). specified function (functions) generic naming used legend. ... Currently unused. discrete ppc_stat() ppc_stat_grouped(), TRUE bar chart used instead histogram. binwidth Passed ggplot2::geom_histogram() override default binwidth. bins Passed ggplot2::geom_histogram() override default binwidth. breaks Passed ggplot2::geom_histogram() alternative binwidth. freq histograms, freq=TRUE (default) puts count y-axis. Setting freq=FALSE puts density y-axis. (many plots y-axis text default. view count density labels y-axis see yaxis_text() convenience function.) group grouping variable length y. coerced factor already factor. value group interpreted group level pertaining corresponding observation. facet_args named list arguments (facets) passed ggplot2::facet_wrap() ggplot2::facet_grid() control faceting. Note: scales included facet_args bayesplot may use scales=\"free\" default (depending plot) instead ggplot2 default scales=\"fixed\". size, alpha 2D plot , arguments passed ggplot2::geom_point() control appearance scatterplot points.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PPD test statistics — PPD-test-statistics","text":"plotting functions return ggplot object can customized using ggplot2 package. functions suffix _data() return data drawn plotting function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PPD test statistics — PPD-test-statistics","text":"Binomial data, plots may useful input contains \"success\" proportions (discrete \"success\" \"failure\" counts).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"PPD test statistics — PPD-test-statistics","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/PPD-test-statistics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PPD test statistics — PPD-test-statistics","text":"","code":"yrep <- example_yrep_draws() ppd_stat(yrep) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppd_stat(yrep, stat = \"sd\") + legend_none() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # use your own function for the 'stat' argument color_scheme_set(\"brightblue\") q25 <- function(y) quantile(y, 0.25) ppd_stat(yrep, stat = \"q25\") # legend includes function name #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`."},{"path":"https://mc-stan.org/bayesplot/dev/reference/available_ppc.html","id":null,"dir":"Reference","previous_headings":"","what":"Get or view the names of available plotting or data functions — available_ppc","title":"Get or view the names of available plotting or data functions — available_ppc","text":"Get view names available plotting data functions","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/available_ppc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get or view the names of available plotting or data functions — available_ppc","text":"","code":"available_ppc(pattern = NULL, fixed = FALSE, invert = FALSE, plots_only = TRUE)  available_ppd(pattern = NULL, fixed = FALSE, invert = FALSE, plots_only = TRUE)  available_mcmc(   pattern = NULL,   fixed = FALSE,   invert = FALSE,   plots_only = TRUE )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/available_ppc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get or view the names of available plotting or data functions — available_ppc","text":"pattern, fixed, invert Passed base::grep(). plots_only TRUE (default) plotting functions searched . FALSE functions return data plotting (functions ending _data()) also included.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/available_ppc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get or view the names of available plotting or data functions — available_ppc","text":"possibly empty character vector function names several additional attributes (use custom print method). pattern missing returned object contains names available plotting functions MCMC, PPC, PPD module, depending function called. pattern specified subset function names returned.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/available_ppc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get or view the names of available plotting or data functions — available_ppc","text":"","code":"available_mcmc() #> bayesplot MCMC module: #>   mcmc_acf #>   mcmc_acf_bar #>   mcmc_areas #>   mcmc_areas_ridges #>   mcmc_combo #>   mcmc_dens #>   mcmc_dens_chains #>   mcmc_dens_overlay #>   mcmc_hex #>   mcmc_hist #>   mcmc_hist_by_chain #>   mcmc_intervals #>   mcmc_neff #>   mcmc_neff_hist #>   mcmc_nuts_acceptance #>   mcmc_nuts_divergence #>   mcmc_nuts_energy #>   mcmc_nuts_stepsize #>   mcmc_nuts_treedepth #>   mcmc_pairs #>   mcmc_parcoord #>   mcmc_rank_ecdf #>   mcmc_rank_hist #>   mcmc_rank_overlay #>   mcmc_recover_hist #>   mcmc_recover_intervals #>   mcmc_recover_scatter #>   mcmc_rhat #>   mcmc_rhat_hist #>   mcmc_scatter #>   mcmc_trace #>   mcmc_trace_highlight #>   mcmc_violin available_mcmc(\"nuts\") #> bayesplot MCMC module: #> (matching pattern 'nuts')  #>   mcmc_nuts_acceptance #>   mcmc_nuts_divergence #>   mcmc_nuts_energy #>   mcmc_nuts_stepsize #>   mcmc_nuts_treedepth available_mcmc(\"rhat|neff\") #> bayesplot MCMC module: #> (matching pattern 'rhat|neff')  #>   mcmc_neff #>   mcmc_neff_hist #>   mcmc_rhat #>   mcmc_rhat_hist  available_ppc() #> bayesplot PPC module: #>   ppc_bars #>   ppc_bars_grouped #>   ppc_boxplot #>   ppc_dens #>   ppc_dens_overlay #>   ppc_dens_overlay_grouped #>   ppc_dots #>   ppc_ecdf_overlay #>   ppc_ecdf_overlay_grouped #>   ppc_error_binned #>   ppc_error_hist #>   ppc_error_hist_grouped #>   ppc_error_scatter #>   ppc_error_scatter_avg #>   ppc_error_scatter_avg_grouped #>   ppc_error_scatter_avg_vs_x #>   ppc_freqpoly #>   ppc_freqpoly_grouped #>   ppc_hist #>   ppc_intervals #>   ppc_intervals_grouped #>   ppc_km_overlay #>   ppc_km_overlay_grouped #>   ppc_loo_intervals #>   ppc_loo_pit_ecdf #>   ppc_loo_pit_overlay #>   ppc_loo_pit_qq #>   ppc_loo_ribbon #>   ppc_pit_ecdf #>   ppc_pit_ecdf_grouped #>   ppc_ribbon #>   ppc_ribbon_grouped #>   ppc_rootogram #>   ppc_scatter #>   ppc_scatter_avg #>   ppc_scatter_avg_grouped #>   ppc_stat #>   ppc_stat_2d #>   ppc_stat_freqpoly #>   ppc_stat_freqpoly_grouped #>   ppc_stat_grouped #>   ppc_violin_grouped available_ppc(\"grouped\") #> bayesplot PPC module: #> (matching pattern 'grouped')  #>   ppc_bars_grouped #>   ppc_dens_overlay_grouped #>   ppc_ecdf_overlay_grouped #>   ppc_error_hist_grouped #>   ppc_error_scatter_avg_grouped #>   ppc_freqpoly_grouped #>   ppc_intervals_grouped #>   ppc_km_overlay_grouped #>   ppc_pit_ecdf_grouped #>   ppc_ribbon_grouped #>   ppc_scatter_avg_grouped #>   ppc_stat_freqpoly_grouped #>   ppc_stat_grouped #>   ppc_violin_grouped available_ppc(\"grouped\", invert = TRUE) #> bayesplot PPC module: #> (excluding pattern 'grouped')  #>   ppc_bars #>   ppc_boxplot #>   ppc_dens #>   ppc_dens_overlay #>   ppc_dots #>   ppc_ecdf_overlay #>   ppc_error_binned #>   ppc_error_hist #>   ppc_error_scatter #>   ppc_error_scatter_avg #>   ppc_error_scatter_avg_vs_x #>   ppc_freqpoly #>   ppc_hist #>   ppc_intervals #>   ppc_km_overlay #>   ppc_loo_intervals #>   ppc_loo_pit_ecdf #>   ppc_loo_pit_overlay #>   ppc_loo_pit_qq #>   ppc_loo_ribbon #>   ppc_pit_ecdf #>   ppc_ribbon #>   ppc_rootogram #>   ppc_scatter #>   ppc_scatter_avg #>   ppc_stat #>   ppc_stat_2d #>   ppc_stat_freqpoly  available_ppd() #> bayesplot PPD module: #>   ppd_boxplot #>   ppd_dens #>   ppd_dens_overlay #>   ppd_dots #>   ppd_ecdf_overlay #>   ppd_freqpoly #>   ppd_freqpoly_grouped #>   ppd_hist #>   ppd_intervals #>   ppd_intervals_grouped #>   ppd_ribbon #>   ppd_ribbon_grouped #>   ppd_stat #>   ppd_stat_2d #>   ppd_stat_freqpoly #>   ppd_stat_freqpoly_grouped #>   ppd_stat_grouped available_ppd(\"grouped\") #> bayesplot PPD module: #> (matching pattern 'grouped')  #>   ppd_freqpoly_grouped #>   ppd_intervals_grouped #>   ppd_ribbon_grouped #>   ppd_stat_freqpoly_grouped #>   ppd_stat_grouped  # can also see which functions that return data are available available_ppc(plots_only = FALSE) #> bayesplot PPC module: #>   ppc_bars #>   ppc_bars_data #>   ppc_bars_grouped #>   ppc_boxplot #>   ppc_data #>   ppc_dens #>   ppc_dens_overlay #>   ppc_dens_overlay_grouped #>   ppc_dots #>   ppc_ecdf_overlay #>   ppc_ecdf_overlay_grouped #>   ppc_error_binned #>   ppc_error_data #>   ppc_error_hist #>   ppc_error_hist_grouped #>   ppc_error_scatter #>   ppc_error_scatter_avg #>   ppc_error_scatter_avg_grouped #>   ppc_error_scatter_avg_vs_x #>   ppc_freqpoly #>   ppc_freqpoly_grouped #>   ppc_hist #>   ppc_intervals #>   ppc_intervals_data #>   ppc_intervals_grouped #>   ppc_km_overlay #>   ppc_km_overlay_grouped #>   ppc_loo_intervals #>   ppc_loo_pit_data #>   ppc_loo_pit_ecdf #>   ppc_loo_pit_overlay #>   ppc_loo_pit_qq #>   ppc_loo_ribbon #>   ppc_pit_ecdf #>   ppc_pit_ecdf_grouped #>   ppc_ribbon #>   ppc_ribbon_data #>   ppc_ribbon_grouped #>   ppc_rootogram #>   ppc_scatter #>   ppc_scatter_avg #>   ppc_scatter_avg_data #>   ppc_scatter_avg_grouped #>   ppc_scatter_data #>   ppc_stat #>   ppc_stat_2d #>   ppc_stat_data #>   ppc_stat_freqpoly #>   ppc_stat_freqpoly_grouped #>   ppc_stat_grouped #>   ppc_violin_grouped  # only show the _data functions available_ppc(\"_data\", plots_only = FALSE) #> bayesplot PPC module: #> (matching pattern '_data')  #>   ppc_bars_data #>   ppc_data #>   ppc_error_data #>   ppc_intervals_data #>   ppc_loo_pit_data #>   ppc_ribbon_data #>   ppc_scatter_avg_data #>   ppc_scatter_data #>   ppc_stat_data available_ppd(\"_data\", plots_only = FALSE) #> bayesplot PPD module: #> (matching pattern '_data')  #>   ppd_data #>   ppd_intervals_data #>   ppd_ribbon_data #>   ppd_stat_data available_mcmc(\"_data\", plots_only = FALSE) #> bayesplot MCMC module: #> (matching pattern '_data')  #>   mcmc_areas_data #>   mcmc_areas_ridges_data #>   mcmc_dens_chains_data #>   mcmc_intervals_data #>   mcmc_neff_data #>   mcmc_parcoord_data #>   mcmc_rhat_data #>   mcmc_trace_data"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":null,"dir":"Reference","previous_headings":"","what":"Set, get, or view bayesplot color schemes — bayesplot-colors","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"Set, get, view color schemes. Choose preset scheme create custom scheme. See Available color schemes section list available scheme names. Custom color schemes section describes specify custom scheme.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"","code":"color_scheme_set(scheme = \"blue\")  color_scheme_get(scheme = NULL, i = NULL)  color_scheme_view(scheme = NULL)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"scheme color_scheme_set(), either string naming one available color schemes character vector exactly six colors specifying custom scheme. color_scheme_get(), scheme can missing (get current color scheme) string naming one preset schemes. color_scheme_view(), scheme can missing (use current color scheme) character vector containing subset available scheme names. See Available color schemes section list available scheme names. Custom color schemes section describes specify custom scheme. color_scheme_get(), optional subset integers 1 (lightest) 6 (darkest) indicating colors scheme return. specified six colors scheme included.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"color_scheme_set() side effect setting color scheme used plotting. also returns (invisibly) list hexadecimal color values used scheme. color_scheme_get() returns list hexadecimal color values (without changing current scheme). scheme argument specified returned values correspond current color scheme. optional argument specified returned list contains length() elements. color_scheme_view() returns ggplot object single scheme specified gtable object multiple schemes names specified.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"available-color-schemes","dir":"Reference","previous_headings":"","what":"Available color schemes","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"Currently, available preset color schemes : \"blue\", \"brightblue\" \"gray\", \"darkgray\" \"green\" \"pink\" \"purple\" \"red\" \"teal\" \"yellow\" \"viridis\", \"viridisA\", \"viridisB\", \"viridisC\", \"viridisD\", \"viridisE\" \"mix-x-y\", replacing x y two scheme names listed (e.g. \"mix-teal-pink\", \"mix-blue-red\", etc.). order x y matters, .e., color schemes \"mix-blue-red\" \"mix-red-blue\" identical. guarantee every possible mixed scheme look good every possible plot. \"brewer-x\", replacing x name palette available RColorBrewer::brewer.pal() (e.g., brewer-PuBuGn). suggestion new color scheme please let us know via bayesplot issue tracker.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"custom-color-schemes","dir":"Reference","previous_headings":"","what":"Custom color schemes","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"bayesplot color scheme consists six colors. specify custom color scheme simply pass character vector containing either names six colors six hexadecimal color values (mix names hex values). colors order lightest darkest. See end Examples section demonstration.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-colors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Set, get, or view bayesplot color schemes — bayesplot-colors","text":"","code":"color_scheme_set(\"blue\") color_scheme_view()   color_scheme_get() #>      blue #> 1 #d1e1ec #> 2 #b3cde0 #> 3 #6497b1 #> 4 #005b96 #> 5 #03396c #> 6 #011f4b color_scheme_get(i = c(3, 5)) # 3rd and 5th colors only #> $mid #> [1] \"#6497b1\" #>  #> $dark #> [1] \"#03396c\" #>   color_scheme_get(\"brightblue\") #>   brightblue #> 1    #cce5ff #> 2    #99cbff #> 3    #4ca5ff #> 4    #198bff #> 5    #0065cc #> 6    #004c99 color_scheme_view(\"brightblue\")   # compare multiple schemes color_scheme_view(c(\"pink\", \"gray\", \"teal\"))  color_scheme_view(c(\"viridis\", \"viridisA\", \"viridisB\", \"viridisC\"))   color_scheme_set(\"pink\") x <- example_mcmc_draws() mcmc_intervals(x)   color_scheme_set(\"teal\") color_scheme_view()  mcmc_intervals(x)   color_scheme_set(\"red\") mcmc_areas(x, regex_pars = \"beta\")   color_scheme_set(\"purple\") color_scheme_view()  y <- example_y_data() yrep <- example_yrep_draws() ppc_stat(y, yrep, stat = \"mean\") + legend_none() #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   ############################ ### Mixing color schemes ### ############################ color_scheme_set(\"mix-teal-pink\") ppc_stat(y, yrep, stat = \"sd\") + legend_none() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_areas(x, regex_pars = \"beta\")   ########################## ### ColorBrewer scheme ### ########################## color_scheme_set(\"brewer-Spectral\") color_scheme_view()  mcmc_trace(x, pars = \"sigma\")   ########################### ### Custom color scheme ### ########################### orange_scheme <- c(\"#ffebcc\", \"#ffcc80\",                    \"#ffad33\", \"#e68a00\",                    \"#995c00\", \"#663d00\") color_scheme_set(orange_scheme) color_scheme_view()  mcmc_areas(x, regex_pars = \"alpha\")  mcmc_dens_overlay(x)  ppc_stat(y, yrep, stat = \"var\") + legend_none() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`."},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-extractors.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract quantities needed for plotting from model objects — bayesplot-extractors","title":"Extract quantities needed for plotting from model objects — bayesplot-extractors","text":"Generics methods extracting quantities needed plotting various types model objects. Currently methods provided stanfit (rstan), CmdStanMCMC (cmdstanr), stanreg (rstanarm) objects, adding new methods relatively straightforward.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-extractors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract quantities needed for plotting from model objects — bayesplot-extractors","text":"","code":"log_posterior(object, ...)  nuts_params(object, ...)  rhat(object, ...)  neff_ratio(object, ...)  # S3 method for class 'stanfit' log_posterior(object, inc_warmup = FALSE, ...)  # S3 method for class 'stanreg' log_posterior(object, inc_warmup = FALSE, ...)  # S3 method for class 'CmdStanMCMC' log_posterior(object, inc_warmup = FALSE, ...)  # S3 method for class 'stanfit' nuts_params(object, pars = NULL, inc_warmup = FALSE, ...)  # S3 method for class 'stanreg' nuts_params(object, pars = NULL, inc_warmup = FALSE, ...)  # S3 method for class 'list' nuts_params(object, pars = NULL, ...)  # S3 method for class 'CmdStanMCMC' nuts_params(object, pars = NULL, ...)  # S3 method for class 'stanfit' rhat(object, pars = NULL, ...)  # S3 method for class 'stanreg' rhat(object, pars = NULL, regex_pars = NULL, ...)  # S3 method for class 'CmdStanMCMC' rhat(object, pars = NULL, ...)  # S3 method for class 'stanfit' neff_ratio(object, pars = NULL, ...)  # S3 method for class 'stanreg' neff_ratio(object, pars = NULL, regex_pars = NULL, ...)  # S3 method for class 'CmdStanMCMC' neff_ratio(object, pars = NULL, ...)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-extractors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract quantities needed for plotting from model objects — bayesplot-extractors","text":"object object use. ... Arguments passed individual methods. inc_warmup logical scalar (defaulting FALSE) indicating whether include warmup draws, applicable. pars optional character vector parameter names. nuts_params() NUTS sampler parameter names rather model parameters. pars omitted parameters included. regex_pars optional regular expression use parameter selection. Can specified instead pars addition pars. using pars tidy parameter selection, regex_pars argument ignored since select helpers perform similar function.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-extractors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract quantities needed for plotting from model objects — bayesplot-extractors","text":"log_posterior() log_posterior() methods return molten data frame (see reshape2::melt()). data frame columns \"Iteration\" (integer), \"Chain\" (integer), \"Value\" (numeric). See Examples, . nuts_params() nuts_params() methods return molten data frame (see reshape2::melt()). data frame columns \"Parameter\" (factor), \"Iteration\" (integer), \"Chain\" (integer), \"Value\" (numeric). See Examples, . rhat(), neff_ratio() Methods return (named) vectors.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-extractors.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract quantities needed for plotting from model objects — bayesplot-extractors","text":"","code":"# \\dontrun{ library(rstanarm) fit <- stan_glm(mpg ~ wt, data = mtcars, refresh = 0)  np <- nuts_params(fit) head(np) #>   Chain Iteration     Parameter     Value #> 1     1         1 accept_stat__ 1.0000000 #> 2     1         2 accept_stat__ 0.9466923 #> 3     1         3 accept_stat__ 0.9904577 #> 4     1         4 accept_stat__ 0.9034513 #> 5     1         5 accept_stat__ 0.9068563 #> 6     1         6 accept_stat__ 0.9517777 tail(np) #>       Chain Iteration Parameter    Value #> 23995     4       995  energy__ 87.72738 #> 23996     4       996  energy__ 86.46415 #> 23997     4       997  energy__ 86.80967 #> 23998     4       998  energy__ 86.47497 #> 23999     4       999  energy__ 88.53321 #> 24000     4      1000  energy__ 88.01486  lp <- log_posterior(fit) head(lp) #>   Chain Iteration     Value #> 1     1         1 -86.12467 #> 2     1         2 -86.80760 #> 3     1         3 -86.45860 #> 4     1         4 -86.53618 #> 5     1         5 -86.71946 #> 6     1         6 -88.15369 tail(lp) #>      Chain Iteration     Value #> 3995     4       995 -86.19753 #> 3996     4       996 -86.36249 #> 3997     4       997 -86.38378 #> 3998     4       998 -85.83448 #> 3999     4       999 -86.94738 #> 4000     4      1000 -86.36645 # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":null,"dir":"Reference","previous_headings":"","what":"Convenience functions for adding or changing plot details — bayesplot-helpers","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"Convenience functions adding (changing details ) ggplot objects (many objects returned bayesplot functions). See Examples section, .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"","code":"vline_at(v, fun, ..., na.rm = TRUE)  hline_at(v, fun, ..., na.rm = TRUE)  vline_0(..., na.rm = TRUE)  hline_0(..., na.rm = TRUE)  abline_01(..., na.rm = TRUE)  lbub(p, med = TRUE)  legend_move(position = \"right\")  legend_none()  legend_text(...)  xaxis_title(on = TRUE, ...)  xaxis_text(on = TRUE, ...)  xaxis_ticks(on = TRUE, ...)  yaxis_title(on = TRUE, ...)  yaxis_text(on = TRUE, ...)  yaxis_ticks(on = TRUE, ...)  facet_text(on = TRUE, ...)  facet_bg(on = TRUE, ...)  panel_bg(on = TRUE, ...)  plot_bg(on = TRUE, ...)  grid_lines(color = \"gray50\", size = 0.2)  overlay_function(...)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"v Either numeric vector specifying value(s) draw vertical horizontal line(s), object type use first argument fun. fun function, name function, returns numeric vector. ... various vline_, hline_, abline_ functions, ... passed ggplot2::geom_vline(), ggplot2::geom_hline(), ggplot2::geom_abline(), respectively, control appearance line(s). functions ending _bg, ... passed ggplot2::element_rect(). functions ending _text _title, ... passed ggplot2::element_text(). xaxis_ticks yaxis_ticks, ... passed ggplot2::element_line(). overlay_function, ... passed ggplot2::stat_function(). na.rm logical scalar passed appropriate geom (e.g. ggplot2::geom_vline()). default TRUE. p probability mass ([0,1]) include interval. med median also included addition lower upper bounds interval? position position legend. Either numeric vector (length 2) giving relative coordinates (0 1) legend, string among \"right\", \"left\", \"top\", \"bottom\". Using position = \"none\" also allowed equivalent using legend_none(). functions modifying ggplot theme elements, set =FALSE set element ggplot2::element_blank(). example, facet text can removed adding facet_text(=FALSE), simply facet_text(FALSE) ggplot object. =TRUE (default), ... can used customize appearance theme element. color, size Passed ggplot2::element_line().","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"ggplot2 layer ggplot2::theme() object can added existing ggplot objects, like created many bayesplot plotting functions. See Details section.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"add-vertical-horizontal-and-diagonal-lines-to-plots","dir":"Reference","previous_headings":"","what":"Add vertical, horizontal, and diagonal lines to plots","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"vline_at() hline_at() return object created either ggplot2::geom_vline() ggplot2::geom_hline() can added ggplot object draw vertical horizontal line (one several values). fun missing lines drawn values v. fun specified lines drawn values returned fun(v). vline_0() hline_0() wrappers vline_at() hline_at() v = 0 fun missing. abline_01() wrapper ggplot2::geom_abline() intercept set 0 slope set 1. lbub() returns function takes single argument x returns lower upper bounds (lb, ub) 100*p\\ x, well median (med=TRUE).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"control-appearance-of-facet-strips","dir":"Reference","previous_headings":"","what":"Control appearance of facet strips","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"facet_text() returns ggplot2 theme objects can added existing plot (ggplot object) format text facet strips. facet_bg() can added plot change background facet strips.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"move-legend-remove-legend-or-style-the-legend-text","dir":"Reference","previous_headings":"","what":"Move legend, remove legend, or style the legend text","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"legend_move() legend_none() return ggplot2 theme object can added existing plot (ggplot object) order change position legend remove . legend_text() works much like facet_text() legend.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"control-appearance-of-x-axis-and-y-axis-features","dir":"Reference","previous_headings":"","what":"Control appearance of \\(x\\)-axis and \\(y\\)-axis features","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"xaxis_title() yaxis_title() return ggplot2 theme object can added existing plot (ggplot object) order toggle format titles displayed x y axis. (change titles use ggplot2::labs().) xaxis_text() yaxis_text() return ggplot2 theme object can added existing plot (ggplot object) order toggle format text displayed x y axis (e.g. tick labels). xaxis_ticks() yaxis_ticks() return ggplot2 theme object can added existing plot (ggplot object) change appearance axis tick marks.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"customize-plot-background","dir":"Reference","previous_headings":"","what":"Customize plot background","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"plot_bg() returns ggplot2 theme object can added existing plot (ggplot object) format background entire plot. panel_bg() returns ggplot2 theme object can added existing plot (ggplot object) format background just plotting area. grid_lines() returns ggplot2 theme object can added existing plot (ggplot object) add grid lines plot background.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"superimpose-a-function-on-an-existing-plot","dir":"Reference","previous_headings":"","what":"Superimpose a function on an existing plot","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"overlay_function() simple wrapper ggplot2::stat_function() inherit.aes argument fixed FALSE. Fixing inherit.aes=FALSE avoid potential errors due ggplot2::aes()thetic mapping used certain bayesplot plotting functions.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-helpers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convenience functions for adding or changing plot details — bayesplot-helpers","text":"","code":"color_scheme_set(\"gray\") x <- example_mcmc_draws(chains = 1) dim(x) #> [1] 250   4 colnames(x) #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\"   ################################### ### vertical & horizontal lines ### ################################### (p <- mcmc_intervals(x, regex_pars = \"beta\"))   # vertical line at zero (with some optional styling) p + vline_0()  p + vline_0(linewidth = 0.25, color = \"darkgray\", linetype = 2)   # vertical line(s) at specified values v <- c(-0.5, 0, 0.5) p + vline_at(v, linetype = 3, linewidth = 0.25)   my_lines <- vline_at(v, alpha = 0.25, linewidth = 0.75 * c(1, 2, 1),                      color = c(\"maroon\", \"skyblue\", \"violet\")) p + my_lines   # \\donttest{ # add vertical line(s) at computed values # (three ways of getting lines at column means) color_scheme_set(\"brightblue\") p <- mcmc_intervals(x, regex_pars = \"beta\") p + vline_at(x[, 3:4], colMeans)  p + vline_at(x[, 3:4], \"colMeans\", color = \"darkgray\",              lty = 2, linewidth = 0.25)  p + vline_at(x[, 3:4], function(a) apply(a, 2, mean),              color = \"orange\",              linewidth = 2, alpha = 0.1)  # }  # using the lbub function to get interval lower and upper bounds (lb, ub) color_scheme_set(\"pink\") parsed <- ggplot2::label_parsed p2 <- mcmc_hist(x, pars = \"beta[1]\", binwidth = 1/20,                 facet_args = list(labeller = parsed)) (p2 <- p2 + facet_text(size = 16))   b1 <- x[, \"beta[1]\"] p2 + vline_at(b1, fun = lbub(0.8), color = \"gray20\",               linewidth = 2 * c(1,.5,1), alpha = 0.75)  p2 + vline_at(b1, lbub(0.8, med = FALSE), color = \"gray20\",               linewidth = 2, alpha = 0.75)    ########################## ### format axis titles ### ########################## color_scheme_set(\"green\") y <- example_y_data() yrep <- example_yrep_draws() (p3 <- ppc_stat(y, yrep, stat = \"median\", binwidth = 1/4))   # turn off the legend, turn on x-axis title p3 +  legend_none() +  xaxis_title(size = 13, family = \"sans\") +  ggplot2::xlab(expression(italic(T(y)) == median(italic(y))))    ################################ ### format axis & facet text ### ################################ color_scheme_set(\"gray\") p4 <- mcmc_trace(example_mcmc_draws(), pars = c(\"alpha\", \"sigma\"))  myfacets <-  facet_bg(fill = \"gray30\", color = NA) +  facet_text(face = \"bold\", color = \"skyblue\", size = 14) p4 + myfacets   # \\donttest{ ########################## ### control tick marks ### ########################## p4 +  myfacets +  yaxis_text(FALSE) +  yaxis_ticks(FALSE) +  xaxis_ticks(linewidth = 1, color = \"skyblue\")  # }  ############################## ### change plot background ### ############################## color_scheme_set(\"blue\")  # add grid lines ppc_stat(y, yrep) + grid_lines() #> Note: in most cases the default test statistic 'mean' is too weak to detect anything of interest. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # panel_bg vs plot_bg ppc_scatter_avg(y, yrep) + panel_bg(fill = \"gray90\")  ppc_scatter_avg(y, yrep) + plot_bg(fill = \"gray90\")   color_scheme_set(\"yellow\") p5 <- ppc_scatter_avg(y, yrep, alpha = 1) p5 + panel_bg(fill = \"gray20\") + grid_lines(color = \"white\")  # \\donttest{ color_scheme_set(\"purple\") ppc_dens_overlay(y, yrep[1:30, ]) +  legend_text(size = 14) +  legend_move(c(0.75, 0.5)) +  plot_bg(fill = \"gray90\") +  panel_bg(color = \"black\", fill = \"gray99\", linewidth = 3)  # }   ############################################### ### superimpose a function on existing plot ### ############################################### # compare posterior of beta[1] to Gaussian with same posterior mean # and sd as beta[1] x <- example_mcmc_draws(chains = 4) dim(x) #> [1] 250   4   4 purple_gaussian <-   overlay_function(     fun = dnorm,     args = list(mean(x[,, \"beta[1]\"]), sd(x[,, \"beta[1]\"])),     color = \"purple\",     linewidth = 2   )  color_scheme_set(\"gray\") mcmc_hist(x, pars = \"beta[1]\", freq = FALSE) + purple_gaussian #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # \\donttest{ mcmc_dens(x, pars = \"beta[1]\") + purple_gaussian  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":null,"dir":"Reference","previous_headings":"","what":"bayesplot: Plotting for Bayesian Models — bayesplot-package","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"Stan Development Team bayesplot package provides variety ggplot2-based plotting functions use fitting Bayesian models (typically, though exclusively, via Markov chain Monte Carlo). package designed provide convenient functionality users, also common set functions can easily used developers working variety packages Bayesian modeling, particularly (necessarily) packages powered RStan (R interface Stan). Examples packages soon (already ) using bayesplot rstan , well rstan-dependent rstanarm brms packages applied regression modeling.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":"plotting-functionality","dir":"Reference","previous_headings":"","what":"Plotting functionality","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"plotting functions bayesplot organized several modules: MCMC: Visualizations Markov chain Monte Carlo (MCMC) simulations generated MCMC algorithm well diagnostics. also additional functions specifically use models fit using -U-Turn Sampler (NUTS). PPC: Graphical (posterior prior) predictive checks (PPCs). PPD: Plots (posterior prior) predictive distributions without comparisons observed data.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":"resources","dir":"Reference","previous_headings":"","what":"Resources","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"Online documentation vignettes: Visit bayesplot website https://mc-stan.org/bayesplot/ Bug reports feature requests: like request new feature noticed bug needs fixed please let us know bayesplot issue tracker https://github.com/stan-dev/bayesplot/issues/ General questions help: ask question bayesplot Stan Forums forum please visit https://discourse.mc-stan.org.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"Gabry, J. , Simpson, D. , Vehtari, . , Betancourt, M. Gelman, . (2019), Visualization Bayesian workflow. J. R. Stat. Soc. , 182: 389-402. doi:10.1111/rssa.12378. (journal version, arXiv preprint, code GitHub)","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"Maintainer: Jonah Gabry jsg2201@columbia.edu Authors: Tristan Mahr (ORCID) contributors: Paul-Christian Bürkner [contributor] Martin Modrák [contributor] Malcolm Barrett [contributor] Frank Weber [contributor] Eduardo Coronado Sroka [contributor] Teemu Sailynoja [contributor] Aki Vehtari [contributor] Behram Ulukır [contributor]","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"bayesplot: Plotting for Bayesian Models — bayesplot-package","text":"","code":"# A few quick examples (all of the functions have many examples # on their individual help pages)  # MCMC plots x <- example_mcmc_draws(params = 5) mcmc_intervals(x, prob = 0.5)  mcmc_intervals(x, regex_pars = \"beta\")   color_scheme_set(\"purple\") mcmc_areas(x, regex_pars = \"beta\", prob = 0.8)   color_scheme_set(\"mix-blue-red\") mcmc_trace(x, pars = c(\"alpha\", \"sigma\"),            facet_args = list(nrow = 2))   color_scheme_set(\"brightblue\") mcmc_scatter(x, pars = c(\"beta[1]\", \"sigma\"),              transformations = list(sigma = \"log\"))    # Graphical PPCs y <- example_y_data() yrep <- example_yrep_draws() ppc_dens_overlay(y, yrep[1:50, ])  # \\donttest{ color_scheme_set(\"pink\") ppc_stat(y, yrep, stat = \"median\") + grid_lines() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppc_hist(y, yrep[1:8, ]) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # Same plots but without y (using ppd_ instead of ppc_) bayesplot_theme_set(ggplot2::theme_gray()) ypred <- yrep ppd_dens_overlay(ypred[1:50, ])  ppd_stat(ypred, stat = \"median\") + grid_lines() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  ppd_hist(ypred[1:8, ]) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Arrange plots in a grid — bayesplot_grid","title":"Arrange plots in a grid — bayesplot_grid","text":"bayesplot_grid function makes simple juxtapose plots using common \\(x\\) /\\(y\\) axes.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Arrange plots in a grid — bayesplot_grid","text":"","code":"bayesplot_grid(   ...,   plots = list(),   xlim = NULL,   ylim = NULL,   grid_args = list(),   titles = character(),   subtitles = character(),   legends = TRUE,   save_gg_objects = TRUE )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Arrange plots in a grid — bayesplot_grid","text":"... One ggplot objects. plots list ggplot objects. Can used alternative specifying plot objects via .... xlim, ylim Optionally, numeric vectors length 2 specifying lower upper limits axes shared across plots. grid_args optional named list arguments pass gridExtra::arrangeGrob() (nrow, ncol, widths, etc.). titles, subtitles Optional character vectors plot titles subtitles. specified, titles subtitles must must length equal number plots specified. legends plots legends displayed? Defaults TRUE. save_gg_objects TRUE, default, ggplot objects specified ... via plots argument saved list \"bayesplots\" component returned object. Setting FALSE make returned object smaller individual plot objects available.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Arrange plots in a grid — bayesplot_grid","text":"object class \"bayesplot_grid\" (essentially gtable object gridExtra::arrangeGrob()), plot method.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Arrange plots in a grid — bayesplot_grid","text":"","code":"y <- example_y_data() yrep <- example_yrep_draws() stats <- c(\"sd\", \"median\", \"max\", \"min\")  color_scheme_set(\"pink\") bayesplot_grid(  plots = lapply(stats, function(s) ppc_stat(y, yrep, stat = s)),  titles = stats,  legends = FALSE,  grid_args = list(ncol = 1) ) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`. #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # \\dontrun{ library(rstanarm) mtcars$log_mpg <- log(mtcars$mpg) fit1 <- stan_glm(mpg ~ wt, data = mtcars, refresh = 0) fit2 <- stan_glm(log_mpg ~ wt, data = mtcars, refresh = 0)  y <- mtcars$mpg yrep1 <- posterior_predict(fit1, draws = 50) yrep2 <- posterior_predict(fit2, fun = exp, draws = 50)  color_scheme_set(\"blue\") ppc1 <- ppc_dens_overlay(y, yrep1) ppc1  ppc1 + yaxis_text()   color_scheme_set(\"red\") ppc2 <- ppc_dens_overlay(y, yrep2) bayesplot_grid(ppc1, ppc2)   # make sure the plots use the same limits for the axes bayesplot_grid(ppc1, ppc2, xlim = c(-5, 60), ylim = c(0, 0.2))   # remove the legends and add text bayesplot_grid(ppc1, ppc2, xlim = c(-5, 60), ylim = c(0, 0.2),                legends = FALSE, subtitles = rep(\"Predicted MPG\", 2))  # }"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":null,"dir":"Reference","previous_headings":"","what":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"functions bayesplot equivalent ggplot2's ggplot2::theme_set() friends. set, get, update active theme apply bayesplots. current/active theme automatically applied every bayesplot draw. Use bayesplot_theme_get() get current bayesplot theme bayesplot_theme_set() set new theme. bayesplot_theme_update() bayesplot_theme_replace() shorthands changing individual elements.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"","code":"bayesplot_theme_get()  bayesplot_theme_set(new = theme_default())  bayesplot_theme_update(...)  bayesplot_theme_replace(...)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"new new theme (list theme elements) use. analogous new argument ggplot2::theme_set(). ... named list theme settings.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"bayesplot_theme_get() returns current theme. three functions (set, update, replace) invisibly return previous theme can saved easily restored later. behavior ggplot2 versions functions.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"bayesplot_theme_set() friends apply bayesplots. However, ggplot2::theme_set() can also used change bayesplot theme. Currently, setting theme ggplot2::theme_set() (ggplot2 default ggplot2::theme_grey()) override bayesplot theme.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/bayesplot_theme_get.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get, set, and modify the active bayesplot theme — bayesplot_theme_get","text":"","code":"library(ggplot2)  # plot using the current value of bayesplot_theme_get() # (the default is bayesplot::theme_default()) x <- example_mcmc_draws() mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # change the bayesplot theme to theme_minimal and save the old theme old <- bayesplot_theme_set(theme_minimal()) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # change back to the previous theme bayesplot_theme_set(old) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # change the default font size and family for bayesplots bayesplot_theme_update(text = element_text(size = 16, family = \"sans\")) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # change back to the default bayesplot_theme_set() # same as bayesplot_theme_set(theme_default()) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # updating theme elements color_scheme_set(\"brightblue\") bayesplot_theme_set(theme_dark()) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   bayesplot_theme_update(panel.background = element_rect(fill = \"black\")) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # to get the same plot without updating the theme we could also have # used the bayeplot convenience function panel_bg() bayesplot_theme_set(theme_dark()) mcmc_hist(x) + panel_bg(fill = \"black\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # reset bayesplot_theme_set()"},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example draws to use in demonstrations and tests — example-data","title":"Example draws to use in demonstrations and tests — example-data","text":"functions return various objects containing data used examples throughout bayesplot package documentation.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example draws to use in demonstrations and tests — example-data","text":"","code":"example_mcmc_draws(chains = 4, params = 4)  example_yrep_draws()  example_y_data()  example_x_data()  example_group_data()"},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Example draws to use in demonstrations and tests — example-data","text":"chains integer 1 4 indicating desired number chains. params integer 1 6 indicating desired number parameters.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Example draws to use in demonstrations and tests — example-data","text":"See Details.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Example draws to use in demonstrations and tests — example-data","text":"functions returns object containing data, parameter draws, predictions corresponding basic linear regression model data y (outcome vector) X (predictor matrix), parameters alpha (intercept), beta (coefficient vector), sigma (error sd). example_mcmc_draws() chains > 1, 250 (iterations) chains params array , chains = 1, 250 params matrix MCMC draws posterior distribution parameters linear regression model described . params = 1 draws alpha included returned object. params >= 2 draws sigma also included. params 3 maximum 6 draws regression coefficients beta[k] (k 1:(params-2)) also included. example_y_data() numeric vector 434 observations outcome variable linear regression model. example_x_data() numeric vector 434 observations one predictor variables linear regression model. example_group_data() factor variable 434 observations grouping variable two levels. example_yrep_draws() 500 (draws) 434 (data points) matrix draws posterior predictive distribution. row represents full dataset drawn posterior predictive distribution outcome y fitting linear regression model mentioned .","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/example-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example draws to use in demonstrations and tests — example-data","text":"","code":"draws <- example_mcmc_draws() dim(draws) #> [1] 250   4   4 dimnames(draws) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" #>   draws <- example_mcmc_draws(1, 2) dim(draws) #> [1] 250   2 colnames(draws) #> [1] \"alpha\" \"sigma\"  draws <- example_mcmc_draws(params = 6) dimnames(draws)[[3]] #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\"  y <- example_y_data() x <- example_x_data() group <- example_group_data() length(y) #> [1] 434 length(x) #> [1] 434 length(group) #> [1] 434 tail(data.frame(y, x, group), 5) #>      y        x  group #> 430 94 84.87741 GroupA #> 431 76 92.99039 GroupB #> 432 50 94.85971 GroupA #> 433 88 96.85662 GroupB #> 434 70 91.25334 GroupB  yrep <- example_yrep_draws() dim(yrep) # ncol(yrep) = length(y) = length(x) = length(group) #> [1] 500 434"},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":null,"dir":"Reference","previous_headings":"","what":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"S3 generic simple default method. intent provide generic authors R packages wish provide interfaces functions bayesplot encouraged include pp_check() methods package, preserving naming conventions posterior (prior) predictive checking across many R packages Bayesian inference. convenience users developers. See Details Examples sections, , package vignettes examples defining pp_check() methods.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"","code":"pp_check(object, ...)  # Default S3 method pp_check(object, yrep, fun, ...)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"object Typically fitted model object. default method, however, takes object y (outcome) vector. ... generic, arguments passed individual methods. default method, additional arguments pass fun. yrep default method, yrep matrix passed fun. fun default method, plotting function call. Can PPC functions. \"ppc_\" prefix can optionally dropped fun specified string.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"exact form value returned pp_check() may vary class object, consistency encourage authors methods return ggplot object created one bayesplot's plotting functions. default method returns object returned fun.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"package creates fitted model objects class \"foo\" can include method pp_check.foo() prepares appropriate inputs (y, yrep, etc.) bayesplot functions. pp_check.foo() method may, example, let user choose various plots, calling functions bayesplot internally needed. See Examples, , package vignettes.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/pp_check.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Posterior (or prior) predictive checks (S3 generic and default method) — pp_check","text":"","code":"# default method y <- example_y_data() yrep <- example_yrep_draws() pp_check(y, yrep[1:50,], ppc_dens_overlay)   g <- example_group_data() pp_check(y, yrep, fun = \"stat_grouped\", group = g, stat = \"median\") #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # defining a method x <- list(y = rnorm(50), yrep = matrix(rnorm(5000), nrow = 100, ncol = 50)) class(x) <- \"foo\" pp_check.foo <- function(object, ..., type = c(\"multiple\", \"overlaid\")) {   y <- object[[\"y\"]]   yrep <- object[[\"yrep\"]]   switch(match.arg(type),          multiple = ppc_hist(y, yrep[1:min(8, nrow(yrep)),, drop = FALSE]),          overlaid = ppc_dens_overlay(y, yrep)) } pp_check(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  pp_check(x, type = \"overlaid\")"},{"path":"https://mc-stan.org/bayesplot/dev/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr vars","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/theme_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default bayesplot plotting theme — theme_default","title":"Default bayesplot plotting theme — theme_default","text":"theme_default() function returns default ggplot theme used bayesplot plotting functions. See bayesplot_theme_set() details setting updating plotting theme.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/theme_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default bayesplot plotting theme — theme_default","text":"","code":"theme_default(   base_size = getOption(\"bayesplot.base_size\", 12),   base_family = getOption(\"bayesplot.base_family\", \"serif\") )"},{"path":"https://mc-stan.org/bayesplot/dev/reference/theme_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default bayesplot plotting theme — theme_default","text":"base_size, base_family Base font size family (passed ggplot2::theme_bw()). possible set \"bayesplot.base_size\" \"bayesplot.base_family\" via options() change defaults, 12 \"serif\", respectively.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/theme_default.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Default bayesplot plotting theme — theme_default","text":"ggplot theme object.","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/theme_default.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Default bayesplot plotting theme — theme_default","text":"","code":"class(theme_default()) #> [1] \"theme\"          \"ggplot2::theme\" \"gg\"             \"S7_object\"       bayesplot_theme_set() # defaults to setting theme_default() x <- example_mcmc_draws() mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # change the default font size and family for bayesplots bayesplot_theme_set(theme_default(base_size = 8, base_family = \"sans\")) mcmc_hist(x) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  mcmc_areas(x, regex_pars = \"beta\")   # change back bayesplot_theme_set() mcmc_areas(x, regex_pars = \"beta\")"},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidy parameter selection — tidy-params","title":"Tidy parameter selection — tidy-params","text":"Parameter selection style dplyr tidyverse packages.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tidy parameter selection — tidy-params","text":"","code":"param_range(prefix, range, vars = NULL)  param_glue(pattern, ..., vars = NULL)"},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tidy parameter selection — tidy-params","text":"prefix, range param_range() , prefix string naming parameter range integer vector providing indices subset elements select. example, using   select parameters named beta[1], beta[2], beta[8]. param_range() designed case indices integers surrounded brackets. brackets use num_range(). vars NULL character vector parameter names choose . needed atypical use case calling function standalone function outside vars(), select(), etc. Typically left NULL set automatically user. pattern, ... param_glue() , pattern string containing expressions enclosed braces ... named arguments providing one character vector per expression braces pattern. easiest describe use arguments example:   select parameters names \"beta_age[3]\", \"beta_income[3]\", \"beta_age[8]\", \"beta_income[8]\".","code":"param_range(\"beta\", c(1,2,8)) param_glue(\"beta_{var}[{level}]\",            var = c(\"age\", \"income\"),            level = c(3,8))"},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tidy parameter selection — tidy-params","text":"version 1.7.0, bayesplot allows pars argument MCMC plots use \"tidy\" variable selection (style dplyr package). vars() function re-exported dplyr purpose. Features tidy selection includes direct selection (vars(alpha, sigma)), everything-selection (vars(-alpha)), ranged selection (vars(`beta[1]`:`beta[3]`)), support selection functions (vars(starts_with(\"beta\"))), combinations features. See Examples section, . using pars tidy parameter selection, regex_pars argument ignored bayesplot supports using tidyselect helper functions (starts_with(), contains(), num_range(), etc.) purpose. bayesplot also exports additional helper functions help parameter selection: param_range(): like num_range() used parameter indexes brackets (e.g. beta[2]). param_glue(): complicated parameter names multiple indexes (including variable names) inside brackets (e.g., beta[(Intercept) age_group:3]). functions can used inside vars(), dplyr::select(), similar functions, just like tidyselect helper functions.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":"extra-advice","dir":"Reference","previous_headings":"","what":"Extra Advice","title":"Tidy parameter selection — tidy-params","text":"Parameter names vars() quoted. names contain special characters like brackets, wrapped backticks, vars(`beta[1]`). exclude range variables, wrap sequence parentheses negate . example, (vars(-(`beta[1]`:`beta[3]`))) exclude beta[1], beta[2], beta[3]. vars() helper function. holds onto names expressions used select columns. selecting variables inside bayesplot function, use vars(...): mcmc_hist(data, pars = vars(alpha)). using select() prepare dataframe bayesplot function, use vars(): data %>% select(alpha) %>% mcmc_hist(). Internally, tidy selection works converting names expressions position numbers. result, integers select parameters; vars(1, 3) selects first third ones. endorse approach positions might change variables added removed models. select parameter happens called 1, use backticks escape vars(`1`).","code":""},{"path":[]},{"path":"https://mc-stan.org/bayesplot/dev/reference/tidy-params.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidy parameter selection — tidy-params","text":"","code":"x <- example_mcmc_draws(params = 6) dimnames(x) #> $Iteration #> NULL #>  #> $Chain #> [1] \"chain:1\" \"chain:2\" \"chain:3\" \"chain:4\" #>  #> $Parameter #> [1] \"alpha\"   \"sigma\"   \"beta[1]\" \"beta[2]\" \"beta[3]\" \"beta[4]\" #>  mcmc_hex(x, pars = vars(alpha, `beta[2]`))  mcmc_dens(x, pars = vars(sigma, contains(\"beta\")))  mcmc_hist(x, pars = vars(-contains(\"beta\"))) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # using the param_range() helper mcmc_hist(x, pars = vars(param_range(\"beta\", c(1, 3, 4)))) #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # \\donttest{ ############################# ## Examples using rstanarm ## ############################# if (requireNamespace(\"rstanarm\", quietly = TRUE)) {   # see ?rstanarm::example_model   fit <- example(\"example_model\", package = \"rstanarm\", local=TRUE)$value   print(fit)   posterior <- as.data.frame(fit)   str(posterior)    color_scheme_set(\"brightblue\")   mcmc_hist(posterior, pars = vars(size, contains(\"period\")))    # same as previous but using dplyr::select() and piping   library(\"dplyr\")   posterior %>%     select(size, contains(\"period\")) %>%     mcmc_hist()    mcmc_intervals(posterior, pars = vars(contains(\"herd\")))   mcmc_intervals(posterior, pars = vars(contains(\"herd\"), -contains(\"Sigma\")))    bayesplot_theme_set(ggplot2::theme_dark())   color_scheme_set(\"viridisC\")   mcmc_areas_ridges(posterior, pars = vars(starts_with(\"b[\")))    bayesplot_theme_set()   color_scheme_set(\"purple\")   not_789 <- vars(starts_with(\"b[\"), -matches(\"[7-9]\"))   mcmc_intervals(posterior, pars = not_789)    # using the param_glue() helper   just_149 <- vars(param_glue(\"b[(Intercept) herd:{level}]\", level = c(1,4,9)))   mcmc_intervals(posterior, pars = just_149)    # same but using param_glue() with dplyr::select()   # before passing to bayesplot   posterior %>%     select(param_glue(\"b[(Intercept) herd:{level}]\",                       level = c(1, 4, 9))) %>%     mcmc_intervals() } #>  #> exmpl_> if (.Platform$OS.type != \"windows\" || .Platform$r_arch != \"i386\") { #> exmpl_+ example_model <-  #> exmpl_+   stan_glmer(cbind(incidence, size - incidence) ~ size + period + (1|herd), #> exmpl_+              data = lme4::cbpp, family = binomial, QR = TRUE, #> exmpl_+              # this next line is only to keep the example small in size! #> exmpl_+              chains = 2, cores = 1, seed = 12345, iter = 1000, refresh = 0) #> exmpl_+ example_model #> exmpl_+ } #> stan_glmer #>  family:       binomial [logit] #>  formula:      cbind(incidence, size - incidence) ~ size + period + (1 | herd) #>  observations: 56 #> ------ #>             Median MAD_SD #> (Intercept) -1.5    0.6   #> size         0.0    0.0   #> period2     -1.0    0.3   #> period3     -1.1    0.4   #> period4     -1.6    0.5   #>  #> Error terms: #>  Groups Name        Std.Dev. #>  herd   (Intercept) 0.76     #> Num. levels: herd 15  #>  #> ------ #> * For help interpreting the printed output see ?print.stanreg #> * For info on the priors used see ?prior_summary.stanreg #> stan_glmer #>  family:       binomial [logit] #>  formula:      cbind(incidence, size - incidence) ~ size + period + (1 | herd) #>  observations: 56 #> ------ #>             Median MAD_SD #> (Intercept) -1.5    0.6   #> size         0.0    0.0   #> period2     -1.0    0.3   #> period3     -1.1    0.4   #> period4     -1.6    0.5   #>  #> Error terms: #>  Groups Name        Std.Dev. #>  herd   (Intercept) 0.76     #> Num. levels: herd 15  #>  #> ------ #> * For help interpreting the printed output see ?print.stanreg #> * For info on the priors used see ?prior_summary.stanreg #> 'data.frame':\t1000 obs. of  21 variables: #>  $ (Intercept)                        : num  -1.6 -1.24 -1.3 -1.8 -1.48 ... #>  $ size                               : num  0.0124 -0.0029 -0.00998 0.0388 -0.01711 ... #>  $ period2                            : num  -1.541 -1.037 -0.871 -0.957 -0.708 ... #>  $ period3                            : num  -0.961 -0.908 -1.264 -1.376 -0.839 ... #>  $ period4                            : num  -0.992 -2.078 -2.285 -1.928 -1.864 ... #>  $ b[(Intercept) herd:1]              : num  1.278 0.236 0.585 0.519 1.145 ... #>  $ b[(Intercept) herd:2]              : num  -0.6003 -0.4211 0.2602 0.046 0.0328 ... #>  $ b[(Intercept) herd:3]              : num  0.0964 -0.164 0.4593 0.462 0.3967 ... #>  $ b[(Intercept) herd:4]              : num  -0.25115 -0.66573 -0.00498 -0.02112 0.17044 ... #>  $ b[(Intercept) herd:5]              : num  -0.43488 -0.41332 0.03217 0.00765 -0.69101 ... #>  $ b[(Intercept) herd:6]              : num  -0.192 -1.3639 0.1202 -0.0872 -0.7538 ... #>  $ b[(Intercept) herd:7]              : num  1.111 0.709 0.856 1.038 1.055 ... #>  $ b[(Intercept) herd:8]              : num  -0.1658 0.3727 0.4357 0.1857 0.0805 ... #>  $ b[(Intercept) herd:9]              : num  -1.0669 -1.0112 -0.0674 -0.1599 0.4322 ... #>  $ b[(Intercept) herd:10]             : num  -1.433 -0.861 -0.218 -0.391 -0.283 ... #>  $ b[(Intercept) herd:11]             : num  -0.374583 0.187836 -0.000632 -0.24431 0.533227 ... #>  $ b[(Intercept) herd:12]             : num  -0.3899 0.1492 -0.106 0.0967 -0.2035 ... #>  $ b[(Intercept) herd:13]             : num  -0.785 -0.714 -0.837 -1.062 -1.234 ... #>  $ b[(Intercept) herd:14]             : num  0.936 0.853 0.483 0.763 0.867 ... #>  $ b[(Intercept) herd:15]             : num  -0.5534 -0.3425 -0.6066 -0.0171 -1.0893 ... #>  $ Sigma[herd:(Intercept),(Intercept)]: num  0.419 0.451 0.252 0.344 1.087 ... #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union  # } # \\dontrun{ ################################### ## More examples of param_glue() ## ################################### library(dplyr) posterior <- tibble(   b_Intercept = rnorm(1000),   sd_condition__Intercept = rexp(1000),   sigma = rexp(1000),   `r_condition[A,Intercept]` = rnorm(1000),   `r_condition[B,Intercept]` = rnorm(1000),   `r_condition[C,Intercept]` = rnorm(1000),   `r_condition[A,Slope]` = rnorm(1000),   `r_condition[B,Slope]` = rnorm(1000) ) posterior #> # A tibble: 1,000 × 8 #>    b_Intercept sd_condition__Intercept sigma `r_condition[A,Intercept]` #>          <dbl>                   <dbl> <dbl>                      <dbl> #>  1     -0.396                   0.0636 0.251                   -0.443   #>  2      0.0641                  0.504  0.630                   -0.00404 #>  3     -0.497                   3.11   1.45                     0.570   #>  4      0.0985                  0.524  0.768                    0.490   #>  5     -0.884                   0.777  0.347                   -1.44    #>  6      1.19                    0.334  0.332                    0.685   #>  7     -0.605                   1.82   0.471                   -0.822   #>  8      0.807                   0.653  1.19                    -0.893   #>  9     -0.810                   1.03   0.460                    0.536   #> 10     -0.117                   0.688  1.28                     2.28    #> # ℹ 990 more rows #> # ℹ 4 more variables: `r_condition[B,Intercept]` <dbl>, #> #   `r_condition[C,Intercept]` <dbl>, `r_condition[A,Slope]` <dbl>, #> #   `r_condition[B,Slope]` <dbl>  # using one expression in braces posterior %>%   select(     param_glue(\"r_condition[{level},Intercept]\", level = c(\"A\", \"B\"))   ) %>%   mcmc_hist() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.   # using multiple expressions in braces posterior %>%    select(      param_glue(        \"r_condition[{level},{type}]\",         level = c(\"A\", \"B\"),         type = c(\"Intercept\", \"Slope\"))    ) %>%    mcmc_hist() #> `stat_bin()` using `bins = 30`. Pick better value `binwidth`.  # }"},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-development-version","dir":"Changelog","previous_headings":"","what":"bayesplot (development version)","title":"bayesplot (development version)","text":"Add shape argument mcmc_scatter() @behramulukir (#375) Restore pre ggplot2 v4.0 behavior bayesplot theme setting (#385)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1140","dir":"Changelog","previous_headings":"","what":"bayesplot 1.14.0","title":"bayesplot 1.14.0","text":"CRAN release: 2025-08-31 PPC “avg” functions (ppc_scatter_avg(), ppc_error_scatter_avg(), etc.) gain stat argument set averaging function. (Suggestion #348, @kruschke). ppc_error_scatter_avg_vs_x(x = some_expression) labels x axis some_expression. New quantile dot plot functions ppc_dots() ppd_dots() @behramulukir (#357) Add x argument ppc_error_binned() control x axis @behramulukir (#359) Add x argument ppc_error_scatter_avg() control x axis @behramulukir (#367) Add discrete style ppc_rootogram() @behramulukir (#362) Add discrete argument ppc_stat() ppd_stat() support discrete stats @behramulukir (#369)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1130","dir":"Changelog","previous_headings":"","what":"bayesplot 1.13.0","title":"bayesplot 1.13.0","text":"CRAN release: 2025-06-18 Add ppc_loo_pit_ecdf() @TeemuSailynoja (#345) Add possibility left-truncation ppc_km_overlay() ppc_km_overlay_grouped() @Sakuski (#347) Give user control extrapolation ppc_km_overlay() ppc_km_overlay_grouped() @Sakuski (#353) Allow passing moment_match via ... loo functions @n-kall (#351) Skip tests missing Suggests @MichaelChirico (#344) Remove test fail next ggplot2 release (#356)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1120","dir":"Changelog","previous_headings":"","what":"bayesplot 1.12.0","title":"bayesplot 1.12.0","text":"CRAN release: 2025-04-10 Expand checking workflows platforms @andrjohns (#324) Skip tests depending Suggested dependency rstantools installed @MichaelChirico (#325) Skip tests depending Suggested dependency gridExtra installed @MichaelChirico (#326) Fix missing legends unobserved levels rhat neff plots (#328) Document problems ppc_stat stat=\"mean\" (#329) Ensure rank overlay plot starts 0 even bins present, thanks @sims1253 (#332) Compatibility ggplot2 3.6.0 @teunbrand (#337) Update GitHub actions workflows (#338) Remove deprecated functions available_ppc() (#340) Fix missing counts ppc_bars_data() @TeemuSailynoja, thanks @famuvie (#342)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1111","dir":"Changelog","previous_headings":"","what":"bayesplot 1.11.1","title":"bayesplot 1.11.1","text":"CRAN release: 2024-02-15 Limit maximum number evaluation points ppc_pit_ecdf functions default 1000. @TeemuSailynoja #318","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1110","dir":"Changelog","previous_headings":"","what":"bayesplot 1.11.0","title":"bayesplot 1.11.0","text":"CRAN release: 2024-01-30 Update new ggplot2 release @teunbrand #309 Add bins argument many histogram plots 2 #300 Follow ggplot2 updates facet_grid() facet_wrap() @heavywatal #305 Better ppc_loo_pit_qq plots @avehtari #307 Check prob numeric intervals plots @tony-stone #299 Add bins breaks arguments histogram hex plots @heavywatal #313 Replace size argument linewidth geom_line geom_ridgeline @heavywatal #314 LOO plots now accept psis_object argument @jgabry #311 ppc_pit_ecdf() ppc_pit_ecdf_grouped() now support discrete variables, default method selecting number ECDF evaluation points updated. @TeemuSailynoja #316","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-1100","dir":"Changelog","previous_headings":"","what":"bayesplot 1.10.0","title":"bayesplot 1.10.0","text":"CRAN release: 2022-11-16 New function mcmc_rank_ecdf() rank ecdf plots confidence bands assessing two chains sample distribution (#282, @TeemuSailynoja) New functions ppc_pit_ecdf(), ppc_pit_ecdf_grouped(), PIT ecdf plots confidence bands assess y yrep contain samples distribution. (#282, @TeemuSailynoja) Several ppc ppd functions now accept new linewidth argument introduced ggplot2 3.4.0: ppc_bars(), ppc_bars_grouped(), ppc_intervals(), ppc_intervals_grouped(), ppd_intervals(), ppd_intervals_grouped(). Fix bug mcmc_pairs() detected hitting max_treedepth, thanks @dmphillippo. (#281) Fix failing tests due changes ggplot2 3.4.0 (#289)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-190","dir":"Changelog","previous_headings":"","what":"bayesplot 1.9.0","title":"bayesplot 1.9.0","text":"CRAN release: 2022-03-10 New module PPD (posterior/prior predictive distribution) lot new plotting functions ppd_ prefix. functions plot draws prior posterior predictive distributions (PPD) without comparing observed data (.e., y argument). “checks” observed data use PPD instead PPC. plots essentially corresponding PPC plots without showing observed data (e.g., ppd_intervals() like ppc_intervals() without plotting y). See help(\"PPD-overview\") details. (#151, #222) PPC categories now one _data() functions return data frame used plotting (#97, #222). Many already previous releases, new ones release : ppc_bars_data() ppc_error_data() ppc_error_binnned_data() ppc_scatter_data() ppc_scatter_avg_data() ppc_stat_data() Many functions gain argument facet_args controlling ggplot2 faceting (many functions argument long time). ones just now got argument : ppc_scatter() ppc_scatter_avg_grouped() ppc_error_hist() ppc_error_hist_grouped() ppc_error_scatter() ppc_error_binned() New plotting function ppc_km_overlay_grouped(), grouped variant ppc_km_overlay(). (#260, @fweber144) ppc_scatter(), ppc_scatter_avg(), ppc_scatter_avg_grouped() gain argument ref_line, can set FALSE turn x=y line drawn behind scatterplot. ppc_ribbon() ppc_ribbon_grouped() gain argument y_draw specifies whether observed y plotted using point, line, . (#257, @charlesm93) mcmc_*() functions now support draws formats posterior package. (#277, @Ozan147) mcmc_dens() mcmc_dens_overlay() gain arguments controlling density calculation. (#258) mcmc_hist() mcmc_dens() gain argument alpha controlling transparency. (#244) mcmc_areas() mcmc_areas_ridges() gain argument border_size controlling thickness ridgelines. (#224)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-181","dir":"Changelog","previous_headings":"","what":"bayesplot 1.8.1","title":"bayesplot 1.8.1","text":"CRAN release: 2021-06-14 Fix R cmd check error linux CRAN","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-180","dir":"Changelog","previous_headings":"","what":"bayesplot 1.8.0","title":"bayesplot 1.8.0","text":"CRAN release: 2021-01-10","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bug-fixes-1-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"bayesplot 1.8.0","text":"mcmc_areas() tries use less vertical blank space. (#218, #230) Fix bug color_scheme_view() minimal theme (#213). Fix error mcmc_acf() certain input types. (#244, #245, @hhau)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"new-features-1-8-0","dir":"Changelog","previous_headings":"","what":"New features","title":"bayesplot 1.8.0","text":"New plotting functions ppc_dens_overlay_grouped() ppc_ecdf_overlay_grouped() plotting density cumulative distributions posterior predictive distribution (versus observed data) group. (#212) New plotting function ppc_km_overlay() outcome variables right-censored. Empirical CCDF estimates yrep compared Kaplan-Meier estimate y. (#233, #234, @fweber144) ppc_loo_pit_overlay() now uses boundary correction improved kernel density estimation. new argument boundary_correction defaults TRUE can set FALSE recover old version plot. (#171, #235,  CmdStanMCMC objects (CmdStanR) can now used extractor functions nuts_params(), log_posterior(), rhat(), neff_ratio(). (#227) y axis, ppc_loo_pit_qq(..., compare = \"normal\") now plots standard normal quantiles calculated PIT values (instead standardized PIT values). (#240, #243, @fweber144) mcmc_rank_overlay() gains argument facet_args. (#221, @hhau) mcmc_intervals() sizeof points interval lines can set withmcmc_intervals(…, outer_size, inner_size, point_size)`. (#215, #228, #229)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-172","dir":"Changelog","previous_headings":"","what":"bayesplot 1.7.2","title":"bayesplot 1.7.2","text":"CRAN release: 2020-05-28 Compatibility dplyr 1.0.0 (#219)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-171","dir":"Changelog","previous_headings":"","what":"bayesplot 1.7.1","title":"bayesplot 1.7.1","text":"CRAN release: 2019-12-01 Release requested CRAN fix errors https://cran.r-project.org/web/checks/check_results_bayesplot.html due matrices also inheriting “array” R 4.0.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-170","dir":"Changelog","previous_headings":"","what":"bayesplot 1.7.0","title":"bayesplot 1.7.0","text":"CRAN release: 2019-05-23 (GitHub issue/PR numbers parentheses) pars argument MCMC plotting functions now supports tidy variable selection. See help(\"tidy-params\", package=\"bayesplot\") details examples. (#161, #183, #188) Two new plots added inspecting distribution ranks. Rank histograms introduced Stan team’s new paper MCMC diagnostics. (#178, #179) mcmc_rank_hist(): traditional traceplot (mcmc_trace()) visualizes sampled values MCMC chains mix course sampling. rank histogram (mcmc_rank_hist()) visualizes ranks values chains mix together. ideal plot show ranks mixing overlapping uniform distribution. mcmc_rank_overlay(): Instead drawing chain’s histogram separate panel, plot draws top edge chains’ histograms single panel. Added mcmc_trace_data(), returns data used plotting trace plots rank histograms. (Advances #97) ColorBrewer palettes now available color schemes via color_scheme_set(). example, color_scheme_set(\"brewer-Spectral\") use Spectral palette. (#177, #190) MCMC plots now also accept objects .array method input (e.g., stanfit objects). (#175, #184) mcmc_trace() gains argument iter1 can used label traceplot starting first iteration warmup. (#14, #155, @mcol) mcmc_areas() gains argument area_method controls draw density curves. default \"equal area\" constrains heights curves area. result, narrow interval appear spike density, wide, uncertain interval spread thin x axis. Alternatively \"equal height\" set maximum height curve value. works well intervals width. Otherwise, wide, uncertain interval dominate visual space compared narrow, less uncertain interval. compromise two \"scaled height\" scales curves \"equal height\" using height * sqrt(height). (#163, #169) mcmc_areas() correctly plots density curves point estimate include highest point density curve. (#168, #169, @jtimonen) mcmc_areas_ridges() draws vertical line x = 0 curves always visible. mcmc_intervals() mcmc_areas() raise warning prob_outer ever less prob. sorts two values correct order. (#138) MCMC parameter names now always converted factors prior plotting. use factors order parameters plot matches order parameters original MCMC data. change fixes case factor-conversion failed. (#162, #165, @wwiecek) examples ?ppc_loo_pit_overlay() now work expected. (#166, #167) Added \"viridisD\" alternative name \"viridis\" supported colors. Added \"viridisE\" (cividis version viridis) supported colors. ppc_bars() ppc_bars_grouped() now allow negative integers input. (#172, @jeffpollock9)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-160","dir":"Changelog","previous_headings":"","what":"bayesplot 1.6.0","title":"bayesplot 1.6.0","text":"CRAN release: 2018-08-02 (GitHub issue/PR numbers parentheses) Loading bayesplot longer overrides ggplot theme! Rather, sets theme specific bayesplot. packages using bayesplot may still override default ggplot theme (e.g., rstanarm next release), simply loading bayesplot . new functions controlling ggplot theme bayesplot work like ggplot2 counterparts affect plots made using bayesplot. Thanks Malcolm Barrett. (#117, #149). bayesplot_theme_set() bayesplot_theme_get() bayesplot_theme_update() bayesplot_theme_replace() Visual MCMC Diagnostics vignette reorganized lot useful new content thanks Martin Modrák. (#144, #153) LOO predictive checks now require loo version >= 2.0.0. (#139) Histogram plots gain breaks argument can used alternative binwidth. (#148) mcmc_pairs() now argument grid_args provide way passing optional arguments gridExtra::arrangeGrob(). can used add title plot, example. (#143) ppc_ecdf_overlay() gains argument discrete, FALSE default, can used make Geom appropriate discrete data. (#145) PPC intervals plots LOO predictive checks now draw outer inner probability interval, can controlled new argument prob_outer already existing prob. consistent produced mcmc_intervals(). (#152, #154, @mcol)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-150","dir":"Changelog","previous_headings":"","what":"bayesplot 1.5.0","title":"bayesplot 1.5.0","text":"CRAN release: 2018-03-30 (GitHub issue/PR numbers parentheses) New package documentation website: https://mc-stan.org/bayesplot/ Two new plots visualize posterior density using ridgelines. work well parameters similar values similar densities, hierarchical models. (#104) mcmc_dens_chains() draws kernel density sampling chain. mcmc_areas_ridges() draws kernel density combined across chains. functions _data() function return data plotted function. mcmc_intervals() mcmc_areas() rewritten. (#103) now use discrete y-axis. Previously, used continuous scale numeric breaks relabelled parameter names; design caused unexpected behavior customizing plots. mcmc_areas() now uses geoms ggridges package draw density curves. Added mcmc_intervals_data() mcmc_areas_data() return data plotted mcmc_intervals() mcmc_areas(). (Advances #97) New ppc_data() function returns data plotted many PPC plotting functions. (Advances #97) Added ppc_loo_pit_overlay() function better LOO PIT predictive check. (#123) Started using vdiffr add visual unit tests existing PPC unit tests. (#137)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-140","dir":"Changelog","previous_headings":"","what":"bayesplot 1.4.0","title":"bayesplot 1.4.0","text":"CRAN release: 2017-09-12 (GitHub issue/PR numbers parentheses) New plotting function mcmc_parcoord() parallel coordinates plots MCMC draws (optionally including HMC/NUTS diagnostic information). (#108) mcmc_scatter gains np argument specifying NUTS parameters, allows highlighting divergences plot. (#112) New functions names ending suffix _data don’t make plots, just return data prepared plotting (come future releases): ppc_intervals_data() (#101) ppc_ribbon_data() (#101) mcmc_parcoord_data() (#108) mcmc_rhat_data() (#110) mcmc_neff_data() (#110) ppc_stat_grouped(), ppc_stat_freqpoly_grouped() gain facet_args argument controlling ggplot2 faceting (many mcmc_ functions already ). divergences argument mcmc_trace() deprecated favor np (NUTS parameters) match functions np argument. Fixed issue duplicated rhat values break mcmc_rhat() (#105).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-130","dir":"Changelog","previous_headings":"","what":"bayesplot 1.3.0","title":"bayesplot 1.3.0","text":"CRAN release: 2017-08-07 (GitHub issue/PR numbers parentheses) bayesplot::theme_default() now set default ggplot2 plotting theme bayesplot loaded, makes changing default theme using ggplot2::theme_set() possible. Thanks @gavinsimpson. (#87) mcmc_hist() mcmc_hist_by_chain() now take freq argument defaults TRUE (behavior like freq argument R’s hist function). Using ts object y PPC plots longer results error. Thanks @helske. (#94) mcmc_intervals() doesn’t use round lineends anymore slightly exaggerate width intervals. Thanks @tjmahr. (#96)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-120","dir":"Changelog","previous_headings":"","what":"bayesplot 1.2.0","title":"bayesplot 1.2.0","text":"CRAN release: 2017-04-12 lot new stuff release. (GitHub issue/PR numbers parentheses)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"bayesplot 1.2.0","text":"Avoid error cases divergences specified call mcmc_trace() actually divergent transitions. merge_chains argument mcmc_nuts_energy() now defaults FALSE.","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"new-features-in-existing-functions-1-2-0","dir":"Changelog","previous_headings":"","what":"New features in existing functions","title":"bayesplot 1.2.0","text":"mcmc_*() functions, transformations recycled transformations argument specified single function rather named list. Thanks @tklebel. (#64) ppc_violin_grouped() now option showing y violin, points, . Thanks @silberzwiebel. (#74) color_scheme_get() now optional argument selecting subset colors. New color schemes: darkgray, orange, viridis, viridisA, viridisB, viridisC. viridis schemes better schemes trace plots (colors distinct ).","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"new-functions-1-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayesplot 1.2.0","text":"mcmc_pairs(), essentially ggplot2+grid implementation rstan’s pairs.stanfit() method. (#67) mcmc_hex(), similar mcmc_scatter() using geom_hex() instead geom_point(). can used avoid overplotting. (#67) overlay_function() convenience function. Example usage: add Gaussian (distribution) density curve plot made mcmc_hist(). mcmc_recover_scatter() mcmc_recover_hist(), similar mcmc_recover_intervals() compare estimates “true” values used simulate data. (#81, #83) New PPC category Discrete functions: (#28) ppc_bars(), ppc_bars_grouped() use models ordinal, categorical multinomial data. Thanks @silberzwiebel. (#73) New PPC category LOO (thanks suggestions @avehtari) functions: ppc_loo_pit() assessing calibration marginal predictions. (#72) ppc_loo_intervals(), ppc_loo_ribbon() plotting intervals LOO predictive distribution. (#72)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-110","dir":"Changelog","previous_headings":"","what":"bayesplot 1.1.0","title":"bayesplot 1.1.0","text":"CRAN release: 2016-12-20 (GitHub issue/PR numbers parentheses)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"fixes-1-1-0","dir":"Changelog","previous_headings":"","what":"Fixes","title":"bayesplot 1.1.0","text":"Images vignettes now render properly using png device. Thanks TJ Mahr. (#51) xaxis_title(FALSE) yaxis_title(FALSE) now set axis titles NULL rather changing theme elements element_blank(). makes easier add axis titles plots don’t default. Thanks Bill Harris. (#53)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"new-features-in-existing-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New features in existing functions","title":"bayesplot 1.1.0","text":"Add argument divergences mcmc_trace() function. models fit using HMC/NUTS can used display divergences rug bottom trace plot. (#42) stat argument ppc_stat_*() functions now accepts function instead name function. (#31)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"new-functions-1-1-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"bayesplot 1.1.0","text":"ppc_error_hist_grouped() plotting predictive errors level grouping variable. (#40) mcmc_recover_intervals)( comparing MCMC estimates “true” parameter values used simulate data. (#56) bayesplot_grid() juxtaposing plots enforcing shared axis limits. (#59)","code":""},{"path":"https://mc-stan.org/bayesplot/dev/news/index.html","id":"bayesplot-100","dir":"Changelog","previous_headings":"","what":"bayesplot 1.0.0","title":"bayesplot 1.0.0","text":"CRAN release: 2016-11-18 Initial CRAN release","code":""}]
